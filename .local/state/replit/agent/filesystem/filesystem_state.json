{"file_contents":{"app.py":{"content":"import os\nimport logging\nimport base64\nfrom io import BytesIO\nfrom PIL import Image\nfrom flask import Flask, render_template, request, jsonify, flash, redirect, url_for\nfrom flask_cors import CORS\nfrom werkzeug.utils import secure_filename\nfrom openai_service import analyze_product_image, generate_ugc_prompt, enhance_prompt_with_templates\n# Google Vision removed - using OpenAI only\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key\")\nCORS(app)\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\nMAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n\n# Ensure upload directory exists\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef image_to_base64(image_path):\n    \"\"\"Convert image file to base64 string\"\"\"\n    try:\n        with Image.open(image_path) as img:\n            # Resize image if too large (max 1024px on longest side)\n            img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)\n            \n            # Convert to RGB if necessary\n            if img.mode != 'RGB':\n                img = img.convert('RGB')\n            \n            # Save to bytes\n            buffer = BytesIO()\n            img.save(buffer, format='JPEG', quality=85)\n            img_bytes = buffer.getvalue()\n            \n            # Encode to base64\n            return base64.b64encode(img_bytes).decode('utf-8')\n    except Exception as e:\n        logging.error(f\"Error converting image to base64: {e}\")\n        raise\n\n@app.route('/')\ndef index():\n    # Check API availability from both sources\n    from secure_config import api_key_manager\n    \n    # Try environment variable first\n    openai_available = bool(os.environ.get(\"OPENAI_API_KEY\"))\n    \n    # If not in env, check secure storage (without password for status check)\n    if not openai_available:\n        try:\n            # Check if secure config files exist\n            import pathlib\n            config_dir = pathlib.Path(\".secure_config\")\n            openai_available = (config_dir / \"api_keys.enc\").exists()\n        except:\n            openai_available = False\n    \n    return render_template('index.html', \n                         openai_available=openai_available)\n\n@app.route('/api-settings')\ndef api_settings():\n    \"\"\"API Settings management page\"\"\"\n    from secure_config import api_key_manager\n    import pathlib\n    \n    # Check if API is currently connected\n    api_connected = False\n    has_stored_keys = False\n    \n    try:\n        # Check environment variable\n        if os.environ.get(\"OPENAI_API_KEY\"):\n            api_connected = True\n        else:\n            # Check if secure storage exists\n            config_dir = pathlib.Path(\".secure_config\")\n            has_stored_keys = (config_dir / \"api_keys.enc\").exists()\n    except:\n        pass\n    \n    return render_template('api_settings.html',\n                         api_connected=api_connected,\n                         has_stored_keys=has_stored_keys)\n\n@app.route('/api/save-key', methods=['POST'])\ndef save_api_key():\n    \"\"\"Save API key securely\"\"\"\n    try:\n        from secure_config import api_key_manager\n        \n        data = request.get_json()\n        master_password = data.get('masterPassword')\n        api_key = data.get('apiKey')\n        \n        if not master_password:\n            return jsonify({'success': False, 'error': 'Master password is required'})\n        \n        # If no API key provided, just test the password\n        if not api_key:\n            # Try to retrieve existing key to validate password\n            existing_key = api_key_manager.get_api_key('openai', master_password)\n            if existing_key:\n                return jsonify({'success': True, 'message': 'Password validated successfully'})\n            else:\n                return jsonify({'success': False, 'error': 'Invalid password or no stored key found'})\n        \n        # Validate API key format\n        if not api_key.startswith('sk-'):\n            return jsonify({'success': False, 'error': 'Invalid OpenAI API key format'})\n        \n        # Store the API key\n        if api_key_manager.store_api_key('openai', api_key, master_password):\n            return jsonify({'success': True, 'message': 'API key saved successfully!'})\n        else:\n            return jsonify({'success': False, 'error': 'Failed to save API key'})\n            \n    except Exception as e:\n        return jsonify({'success': False, 'error': f'Error: {str(e)}'})\n\n@app.route('/api/test-connection', methods=['POST'])\ndef test_connection():\n    \"\"\"Test OpenAI API connection\"\"\"\n    try:\n        from secure_config import api_key_manager\n        from openai import OpenAI\n        \n        data = request.get_json()\n        master_password = data.get('masterPassword')\n        \n        if not master_password:\n            return jsonify({'success': False, 'error': 'Master password is required'})\n        \n        # Get API key\n        api_key = api_key_manager.get_api_key('openai', master_password)\n        if not api_key:\n            # Try environment variable as fallback\n            api_key = os.environ.get('OPENAI_API_KEY')\n            if not api_key:\n                return jsonify({'success': False, 'error': 'No API key found'})\n        \n        # Test the connection\n        client = OpenAI(api_key=api_key)\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[{\"role\": \"user\", \"content\": \"Say 'Connection successful!'\"}],\n            max_tokens=10\n        )\n        \n        result = response.choices[0].message.content\n        return jsonify({'success': True, 'message': f'Connection successful! Response: {result}'})\n        \n    except Exception as e:\n        return jsonify({'success': False, 'error': f'Connection failed: {str(e)}'})\n\n@app.route('/api/list-services', methods=['POST'])\ndef list_services():\n    \"\"\"List stored services\"\"\"\n    try:\n        from secure_config import api_key_manager\n        \n        data = request.get_json()\n        master_password = data.get('masterPassword')\n        \n        if not master_password:\n            return jsonify({'success': False, 'error': 'Master password is required'})\n        \n        services = api_key_manager.list_stored_services(master_password)\n        return jsonify({'success': True, 'services': services})\n        \n    except Exception as e:\n        return jsonify({'success': False, 'error': f'Error: {str(e)}'})\n\n@app.route('/api/delete-key', methods=['POST'])\ndef delete_api_key():\n    \"\"\"Delete stored API key\"\"\"\n    try:\n        from secure_config import api_key_manager\n        \n        data = request.get_json()\n        master_password = data.get('masterPassword')\n        service_name = data.get('serviceName', 'openai')\n        \n        if not master_password:\n            return jsonify({'success': False, 'error': 'Master password is required'})\n        \n        if api_key_manager.delete_api_key(service_name, master_password):\n            return jsonify({'success': True, 'message': f'{service_name} API key deleted successfully'})\n        else:\n            return jsonify({'success': False, 'error': 'Failed to delete API key'})\n            \n    except Exception as e:\n        return jsonify({'success': False, 'error': f'Error: {str(e)}'})\n\n@app.route('/tutorial')\ndef tutorial():\n    \"\"\"Complete tutorial and user guide\"\"\"\n    return render_template('tutorial_complete.html')\n\n@app.route('/faq')\ndef faq():\n    \"\"\"Frequently Asked Questions page\"\"\"\n    return render_template('faq.html')\n\n@app.route('/help')\ndef help_redirect():\n    \"\"\"Redirect /help to /faq for convenience\"\"\"\n    return redirect(url_for('faq'))\n\n@app.route('/analyze-scene', methods=['POST'])\ndef analyze_scene():\n    \"\"\"Analyze scene/location image using OpenAI Vision\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'image' not in data:\n            return jsonify({'error': 'No image data provided'}), 400\n        \n        image_data = data['image']\n        # Extract base64 data\n        if 'base64,' in image_data:\n            base64_image = image_data.split('base64,')[1]\n        else:\n            base64_image = image_data\n        \n        # Use OpenAI Vision for scene analysis  \n        from openai_service import analyze_scene_image\n        analysis_result = analyze_scene_image(base64_image)\n        \n        return jsonify({\n            'success': True,\n            'scene_analysis': analysis_result\n        })\n        \n    except Exception as e:\n        logging.error(f\"Error analyzing scene: {e}\")\n        return jsonify({'error': f'Failed to analyze scene: {str(e)}'}), 500\n\n@app.route('/analyze-actor', methods=['POST'])\ndef analyze_actor():\n    \"\"\"Analyze actor image using OpenAI Vision\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'image' not in data:\n            return jsonify({'error': 'No image data provided'}), 400\n        \n        image_data = data['image']\n        # Extract base64 data\n        if 'base64,' in image_data:\n            base64_image = image_data.split('base64,')[1]\n        else:\n            base64_image = image_data\n        \n        # Use OpenAI Vision for actor analysis  \n        from openai_service import analyze_actor_image\n        analysis_result = analyze_actor_image(base64_image)\n        \n        return jsonify({\n            'success': True,\n            'actor_analysis': analysis_result\n        })\n        \n    except Exception as e:\n        logging.error(f\"Error analyzing actor: {e}\")\n        return jsonify({'error': f'Failed to analyze actor: {str(e)}'}), 500\n\n@app.route('/analyze', methods=['POST'])\ndef analyze():\n    \"\"\"Analyze product image using OpenAI Vision\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'image' not in data:\n            return jsonify({'error': 'No image data provided'}), 400\n        \n        image_data = data['image']\n        # Extract base64 data (remove data:image/jpeg;base64, prefix if present)\n        if 'base64,' in image_data:\n            base64_image = image_data.split('base64,')[1]\n        else:\n            base64_image = image_data\n        \n        # Use OpenAI Vision with 4o-mini\n        analysis_result = analyze_product_image(base64_image)\n        \n        return jsonify({\n            'success': True,\n            'analysis': analysis_result\n        })\n        \n    except Exception as e:\n        logging.error(f\"Error analyzing image: {e}\")\n        return jsonify({'error': f'Failed to analyze image: {str(e)}'}), 500\n\n\n\n@app.route('/generate', methods=['POST'])\ndef generate():\n    \"\"\"Generate UGC prompt based on form data and analysis\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data:\n            return jsonify({'error': 'No data provided'}), 400\n        \n        # Extract analysis and settings\n        analysis = data.get('analysis', {})\n        settings = data.get('settings', {})\n        \n        # Create context from form data and analysis\n        context = {\n            'product': settings.get('product', ''),\n            'target_audience': settings.get('target_audience', ''),\n            'ugc_type': settings.get('ugc_type', ''),\n            'creator_age': settings.get('creator_age', ''),\n            'creator_style': settings.get('creator_style', ''),\n            'energy_level': settings.get('energy_level', ''),\n            'tone': settings.get('tone', ''),\n            'duration': settings.get('duration', ''),\n            'platform': settings.get('platform', ''),\n            'setting': settings.get('setting', ''),\n            'lighting': settings.get('lighting', ''),\n            'camera_movement': settings.get('camera_movement', ''),\n            'hook_type': settings.get('hook_type', ''),\n            'custom_hook': settings.get('custom_hook', ''),\n            'conversion_focus': settings.get('conversion_focus', ''),\n            'visual_style': settings.get('visual_style', ''),\n            'product_analysis': analysis\n        }\n        \n        # Generate prompt using templates\n        prompt_result = generate_ugc_prompt(context)\n        \n        return jsonify({\n            'success': True,\n            'prompt': prompt_result\n        })\n        \n    except Exception as e:\n        logging.error(f\"Error generating prompt: {e}\")\n        return jsonify({'error': f'Failed to generate prompt: {str(e)}'}), 500\n\n@app.route('/enhance-prompt', methods=['POST'])\ndef enhance_prompt():\n    \"\"\"Enhance existing prompt with AI optimization\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'prompt' not in data:\n            return jsonify({'error': 'No prompt provided'}), 400\n        \n        original_prompt = data['prompt']\n        enhancement_focus = data.get('enhancement_focus', 'conversion')\n        \n        # Enhance prompt using templates\n        enhancement_result = enhance_prompt_with_templates(original_prompt, enhancement_focus)\n        \n        return jsonify({\n            'success': True,\n            'enhancement': enhancement_result\n        })\n        \n    except Exception as e:\n        logging.error(f\"Error enhancing prompt: {e}\")\n        return jsonify({'error': f'Failed to enhance prompt: {str(e)}'}), 500\n\n@app.errorhandler(413)\ndef too_large(e):\n    return jsonify({'error': 'File too large. Maximum size is 16MB.'}), 413\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5050, debug=True)\n","size_bytes":13711},"google_vision_service.py":{"content":"import json\nimport os\nimport base64\nimport logging\nfrom google.cloud import vision\nfrom google.oauth2 import service_account\n\ndef analyze_product_with_google_vision(base64_image):\n    \"\"\"Analyze product image using Google Cloud Vision API (free tier: 1000/month)\"\"\"\n    try:\n        # Initialize the client with proper credentials handling\n        credentials_json = os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\")\n        \n        if credentials_json and credentials_json.startswith('{'):\n            # If it's a JSON string, parse it and create credentials\n            import json\n            from google.oauth2 import service_account\n            \n            credentials_info = json.loads(credentials_json)\n            credentials = service_account.Credentials.from_service_account_info(credentials_info)\n            client = vision.ImageAnnotatorClient(credentials=credentials)\n        else:\n            # Default client (uses environment variable as file path)\n            client = vision.ImageAnnotatorClient()\n        \n        # Convert base64 to image\n        image_data = base64.b64decode(base64_image)\n        image = vision.Image(content=image_data)\n        \n        # Perform multiple types of detection\n        features = [\n            vision.Feature(type_=vision.Feature.Type.LABEL_DETECTION, max_results=10),\n            vision.Feature(type_=vision.Feature.Type.TEXT_DETECTION, max_results=5),\n            vision.Feature(type_=vision.Feature.Type.OBJECT_LOCALIZATION, max_results=5),\n        ]\n        \n        request = vision.AnnotateImageRequest(image=image, features=features)\n        response = client.annotate_image(request=request)\n        \n        # Extract individual responses\n        label_response = response\n        text_response = response  \n        object_response = response\n        \n        # Extract labels (what the image contains)\n        labels = []\n        if label_response.label_annotations:\n            labels = [\n                {\n                    \"description\": label.description,\n                    \"confidence\": label.score,\n                    \"relevance\": \"high\" if label.score > 0.8 else \"medium\" if label.score > 0.5 else \"low\"\n                }\n                for label in label_response.label_annotations[:10]  # Top 10 labels\n            ]\n        \n        # Extract text (product names, descriptions on packaging)\n        detected_text = []\n        if text_response.text_annotations:\n            detected_text = [text.description for text in text_response.text_annotations[:5]]\n        \n        # Extract objects (specific items detected)\n        objects = []\n        if object_response.localized_object_annotations:\n            objects = [\n                {\n                    \"name\": obj.name,\n                    \"confidence\": obj.score\n                }\n                for obj in object_response.localized_object_annotations[:5]\n            ]\n        \n        # Process and structure the results\n        analysis_result = _process_google_vision_results(labels, detected_text, objects)\n        \n        return analysis_result\n        \n    except Exception as e:\n        logging.error(f\"Google Vision API error: {e}\")\n        raise Exception(f\"Failed to analyze image with Google Vision: {e}\")\n\ndef _process_google_vision_results(labels, detected_text, objects):\n    \"\"\"Process Google Vision results into our standard format\"\"\"\n    \n    # Determine product name from text or labels\n    product_name = \"Product\"\n    if detected_text and detected_text[0]:\n        # Use first detected text as potential product name\n        product_name = detected_text[0].strip()[:50]  # Limit length\n    elif labels:\n        # Use highest confidence label as product name\n        product_name = labels[0][\"description\"]\n    \n    # Determine product type from labels\n    product_type = \"General Product\"\n    if labels:\n        # Look for specific product categories\n        for label in labels[:3]:\n            desc = label[\"description\"].lower()\n            if any(category in desc for category in [\"clothing\", \"apparel\", \"shirt\", \"pants\", \"dress\", \"shoe\"]):\n                product_type = \"Fashion & Apparel\"\n                break\n            elif any(category in desc for category in [\"electronics\", \"phone\", \"computer\", \"device\", \"gadget\"]):\n                product_type = \"Electronics\"\n                break\n            elif any(category in desc for category in [\"food\", \"drink\", \"beverage\", \"snack\", \"meal\"]):\n                product_type = \"Food & Beverage\"\n                break\n            elif any(category in desc for category in [\"beauty\", \"cosmetic\", \"skincare\", \"makeup\"]):\n                product_type = \"Beauty & Personal Care\"\n                break\n            elif any(category in desc for category in [\"home\", \"furniture\", \"decor\", \"kitchen\"]):\n                product_type = \"Home & Living\"\n                break\n        \n        # If no specific category, use the most confident label\n        if product_type == \"General Product\" and labels:\n            product_type = labels[0][\"description\"]\n    \n    # Extract key features from high-confidence labels\n    key_features = []\n    for label in labels[:5]:\n        if label[\"confidence\"] > 0.7:\n            key_features.append(label[\"description\"])\n    \n    # Build detailed description from all available data\n    detailed_description = _build_detailed_description(labels, detected_text, objects, product_name)\n    \n    # Determine target audience based on product type and features\n    target_audience = _determine_target_audience(labels, product_type)\n    \n    # Suggest use cases\n    use_cases = _suggest_use_cases(labels, product_type)\n    \n    # Determine visual style\n    visual_style = _determine_visual_style(labels)\n    \n    # Suggest filming setting\n    suggested_setting = _suggest_filming_setting(product_type, labels)\n    \n    # Determine emotional appeal\n    emotional_appeal = _determine_emotional_appeal(product_type, labels)\n    \n    return {\n        \"product_name\": product_name,\n        \"product_type\": product_type,\n        \"detailed_description\": detailed_description,\n        \"key_features\": key_features,\n        \"target_audience\": target_audience,\n        \"use_cases\": use_cases,\n        \"visual_style\": visual_style,\n        \"suggested_setting\": suggested_setting,\n        \"emotional_appeal\": emotional_appeal,\n        \"materials_textures\": _extract_materials_textures(labels),\n        \"color_palette\": _extract_colors(labels),\n        \"lighting_style\": \"natural lighting recommended\",\n        \"composition_notes\": \"center product prominently in frame\",\n        \"analysis_source\": \"Google Cloud Vision API\",\n        \"confidence_score\": labels[0][\"confidence\"] if labels else 0.5\n    }\n\ndef _build_detailed_description(labels, detected_text, objects, product_name):\n    \"\"\"Build a detailed product description from Google Vision data\"\"\"\n    \n    description_parts = []\n    \n    # Start with product identification\n    description_parts.append(f\"This is a {product_name.lower()}\")\n    \n    # Add visual characteristics from labels\n    visual_terms = []\n    material_terms = []\n    color_terms = []\n    \n    for label in labels[:8]:\n        desc = label[\"description\"].lower()\n        \n        # Visual characteristics\n        if any(term in desc for term in [\"sleek\", \"modern\", \"vintage\", \"classic\", \"elegant\", \"simple\", \"complex\", \"detailed\"]):\n            visual_terms.append(desc)\n        \n        # Materials\n        elif any(term in desc for term in [\"metal\", \"plastic\", \"wood\", \"fabric\", \"leather\", \"glass\", \"ceramic\", \"rubber\"]):\n            material_terms.append(desc)\n        \n        # Colors\n        elif any(term in desc for term in [\"white\", \"black\", \"blue\", \"red\", \"green\", \"yellow\", \"brown\", \"gray\", \"silver\", \"gold\"]):\n            color_terms.append(desc)\n    \n    # Add visual characteristics\n    if visual_terms:\n        description_parts.append(f\"featuring a {', '.join(visual_terms[:3])} design\")\n    \n    # Add materials\n    if material_terms:\n        description_parts.append(f\"made with {', '.join(material_terms[:2])} materials\")\n    \n    # Add colors\n    if color_terms:\n        description_parts.append(f\"in {', '.join(color_terms[:2])} coloring\")\n    \n    # Add object details if available\n    if objects:\n        object_names = [obj[\"name\"] for obj in objects[:3]]\n        description_parts.append(f\"showing {', '.join(object_names)}\")\n    \n    # Add text information if relevant\n    if detected_text and len(detected_text) > 1:\n        relevant_text = [text for text in detected_text[1:3] if len(text.strip()) > 2]\n        if relevant_text:\n            description_parts.append(f\"with visible text including '{', '.join(relevant_text)}'\")\n    \n    # Add quality and presentation notes\n    description_parts.append(\"professionally photographed with clear detail visibility\")\n    description_parts.append(\"suitable for high-quality video content creation\")\n    \n    return \". \".join(description_parts).capitalize() + \".\"\n\ndef _determine_target_audience(labels, product_type):\n    \"\"\"Determine target audience from product analysis\"\"\"\n    \n    audience_map = {\n        \"Fashion & Apparel\": \"Fashion-conscious consumers aged 18-35\",\n        \"Electronics\": \"Tech enthusiasts and early adopters\",\n        \"Food & Beverage\": \"Food lovers and health-conscious consumers\",\n        \"Beauty & Personal Care\": \"Beauty enthusiasts and self-care focused individuals\",\n        \"Home & Living\": \"Homeowners and interior design enthusiasts\"\n    }\n    \n    # Check for age-specific indicators in labels\n    for label in labels[:5]:\n        desc = label[\"description\"].lower()\n        if any(term in desc for term in [\"baby\", \"infant\", \"child\", \"kid\"]):\n            return \"Parents and families with young children\"\n        elif any(term in desc for term in [\"senior\", \"elder\", \"mature\"]):\n            return \"Mature adults and seniors\"\n        elif any(term in desc for term in [\"teen\", \"youth\", \"young\"]):\n            return \"Teenagers and young adults\"\n    \n    return audience_map.get(product_type, \"General consumers\")\n\ndef _suggest_use_cases(labels, product_type):\n    \"\"\"Suggest use cases based on product analysis\"\"\"\n    \n    use_case_map = {\n        \"Fashion & Apparel\": [\"Daily wear\", \"Special occasions\", \"Work attire\", \"Casual outings\"],\n        \"Electronics\": [\"Daily productivity\", \"Entertainment\", \"Professional work\", \"Creative projects\"],\n        \"Food & Beverage\": [\"Daily nutrition\", \"Special occasions\", \"Quick meals\", \"Health goals\"],\n        \"Beauty & Personal Care\": [\"Daily routine\", \"Special events\", \"Self-care rituals\", \"Professional looks\"],\n        \"Home & Living\": [\"Home decoration\", \"Daily organization\", \"Entertainment hosting\", \"Comfort enhancement\"]\n    }\n    \n    return use_case_map.get(product_type, [\"Daily use\", \"Special occasions\", \"Gift giving\", \"Personal enjoyment\"])\n\ndef _determine_visual_style(labels):\n    \"\"\"Determine visual style from labels\"\"\"\n    \n    for label in labels[:5]:\n        desc = label[\"description\"].lower()\n        if any(term in desc for term in [\"modern\", \"contemporary\", \"sleek\"]):\n            return \"Modern and contemporary\"\n        elif any(term in desc for term in [\"vintage\", \"classic\", \"traditional\"]):\n            return \"Classic and timeless\"\n        elif any(term in desc for term in [\"colorful\", \"bright\", \"vibrant\"]):\n            return \"Vibrant and energetic\"\n        elif any(term in desc for term in [\"minimal\", \"simple\", \"clean\"]):\n            return \"Minimal and clean\"\n    \n    return \"Professional and appealing\"\n\ndef _suggest_filming_setting(product_type, labels):\n    \"\"\"Suggest appropriate filming setting\"\"\"\n    \n    setting_map = {\n        \"Fashion & Apparel\": \"bedroom or dressing area with natural lighting\",\n        \"Electronics\": \"modern office or desk setup with good lighting\",\n        \"Food & Beverage\": \"clean kitchen or dining area with natural light\",\n        \"Beauty & Personal Care\": \"bathroom or vanity area with soft lighting\",\n        \"Home & Living\": \"relevant room setting showcasing the product in use\"\n    }\n    \n    return setting_map.get(product_type, \"clean, well-lit indoor space that complements the product\")\n\ndef _determine_emotional_appeal(product_type, labels):\n    \"\"\"Determine emotional appeal strategy\"\"\"\n    \n    appeal_map = {\n        \"Fashion & Apparel\": \"confidence and self-expression\",\n        \"Electronics\": \"innovation and productivity\",\n        \"Food & Beverage\": \"satisfaction and enjoyment\",\n        \"Beauty & Personal Care\": \"self-care and confidence\",\n        \"Home & Living\": \"comfort and lifestyle enhancement\"\n    }\n    \n    return appeal_map.get(product_type, \"satisfaction and value\")\n\ndef _extract_materials_textures(labels):\n    \"\"\"Extract material and texture information\"\"\"\n    \n    materials = []\n    for label in labels:\n        desc = label[\"description\"].lower()\n        if any(material in desc for material in [\"metal\", \"plastic\", \"wood\", \"fabric\", \"leather\", \"glass\", \"ceramic\", \"rubber\", \"cotton\", \"silk\", \"denim\"]):\n            materials.append(desc)\n    \n    return materials[:3] if materials else [\"Standard materials\"]\n\ndef _extract_colors(labels):\n    \"\"\"Extract color information\"\"\"\n    \n    colors = []\n    color_terms = [\"white\", \"black\", \"blue\", \"red\", \"green\", \"yellow\", \"brown\", \"gray\", \"grey\", \"silver\", \"gold\", \"pink\", \"purple\", \"orange\", \"beige\", \"cream\"]\n    \n    for label in labels:\n        desc = label[\"description\"].lower()\n        for color in color_terms:\n            if color in desc:\n                colors.append(color)\n    \n    return colors[:3] if colors else [\"Neutral tones\"]\n\n# Utility function to check if Google Vision is configured\ndef is_google_vision_configured():\n    \"\"\"Check if Google Vision API is properly configured\"\"\"\n    try:\n        # Check for credentials\n        credentials_json = os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\")\n        \n        if credentials_json:\n            logging.info(f\"Found Google credentials, length: {len(credentials_json)}\")\n            \n            if credentials_json.startswith('{'):\n                # If it's a JSON string, parse it and create credentials\n                import json\n                from google.oauth2 import service_account\n                \n                credentials_info = json.loads(credentials_json)\n                credentials = service_account.Credentials.from_service_account_info(credentials_info)\n                client = vision.ImageAnnotatorClient(credentials=credentials)\n                logging.info(\"Google Vision client created successfully\")\n                return True\n            else:\n                # If it's a file path (shouldn't happen in Replit but handle it)\n                client = vision.ImageAnnotatorClient()\n                logging.info(\"Google Vision client created with file path\")\n                return True\n        else:\n            logging.info(\"No Google credentials found\")\n            return False\n    except Exception as e:\n        logging.error(f\"Google Vision configuration error: {e}\")\n        return False","size_bytes":15049},"main.py":{"content":"from app import app  # noqa: F401\n","size_bytes":34},"openai_service.py":{"content":"import json\nimport os\nimport logging\nfrom openai import OpenAI\n\n# the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n# do not change this unless explicitly requested by the user\n\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\nif not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY environment variable is required\")\n\nopenai = OpenAI(api_key=OPENAI_API_KEY)\n\n\n\ndef analyze_scene_image(base64_image):\n    \"\"\"Analyze scene/location image for technical description\"\"\"\n    try:\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a technical scene analyst for video production. \"\n                    + \"Analyze this location/room image and provide a detailed technical description \"\n                    + \"focused on lighting, spatial layout, surfaces, colors, and atmosphere. \"\n                    + \"This will be used for AI video generation, so be precise about visual elements. \"\n                    + \"Focus on: lighting quality and direction, wall colors and textures, floor materials, \"\n                    + \"furniture placement, room size/scale, ambient mood, and any distinctive features. \"\n                    + \"Write as a single paragraph technical description suitable for video generation prompts.\"\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Analyze this scene/location image. Provide a technical description focusing on lighting, spatial elements, colors, textures, and overall atmosphere that would help recreate this environment in video generation.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            max_tokens=500\n        )\n\n        description = response.choices[0].message.content or 'Scene analysis failed'\n        return {\"scene_description\": description}\n\n    except Exception as e:\n        raise Exception(f\"Failed to analyze scene image: {e}\")\n\ndef analyze_actor_image(base64_image):\n    \"\"\"Analyze actor image to generate detailed physical description\"\"\"\n    try:\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are describing a person's physical appearance for a blind person. \"\n                    + \"Describe only what you SEE in the image, as if for a blind person. Do NOT guess, do NOT infer, do NOT describe anything not visually obvious. \"\n                    + \"No names unless printed. \"\n                    + \"Focus on: hair (color, length, style), facial features (eye color if visible, facial hair, skin tone), \"\n                    + \"posture, and any distinctive visual characteristics. \"\n                    + \"Be precise and factual - only describe what is clearly visible of the person in the image.\"\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Describe exactly what you see in this image of a person. Focus only on visible physical characteristics, clothing, and posture. Do not guess  name, or make assumptions about anything not clearly visible.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            max_tokens=300\n        )\n\n        description = response.choices[0].message.content or 'Actor analysis failed'\n        return {\"actor_description\": description}\n\n    except Exception as e:\n        raise Exception(f\"Failed to analyze actor image: {e}\")\n\ndef analyze_product_image(base64_image):\n    \"\"\"Provide detailed analysis and description of product image\"\"\"\n    try:\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a precise product analyst creating descriptions for video generation. \"\n                    + \"CRITICAL: Only describe what you actually see in the image. Do not add fictional elements or substitute products. \"\n                    + \"Provide a focused, accurate description that captures the exact visual elements present. \"\n                    + \"This description will be used for AI video generation, so accuracy is essential. \"\n                    + \"Focus on: exact colors, visible text/branding, materials, shape, size, and positioning. \"\n                    + \"Keep descriptions clear and specific - imagine describing this to someone who cannot see the image. \"\n                    + \"Respond with JSON in this exact format: \"\n                    + \"{'detailed_description': 'precise visual description (100-150 words)', \"\n                    + \"'product_name': 'exact name if visible', 'product_type': 'category', 'key_features': ['feature1', 'feature2'], \"\n                    + \"'target_audience': 'likely audience', 'use_cases': ['use1', 'use2'], 'visual_style': 'style', \"\n                    + \"'suggested_setting': 'setting', 'emotional_appeal': 'appeal', \"\n                    + \"'materials_textures': ['material1', 'material2'], 'color_palette': ['primary_color', 'secondary_color'], \"\n                    + \"'lighting_style': 'lighting', 'composition_notes': 'composition'}\"\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Analyze this product image with precision. Describe ONLY what you can actually see - do not invent details or substitute different products. Focus on exact colors, visible text, materials, and physical characteristics. Be accurate and concise, as if describing to someone who cannot see the image.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            response_format={\"type\": \"json_object\"},\n            max_tokens=2000\n        )\n\n        result = json.loads(response.choices[0].message.content or '{}')\n        return result\n\n    except Exception as e:\n        raise Exception(f\"Failed to analyze product image: {e}\")\n\ndef generate_ugc_prompt(form_data):\n    \"\"\"Generate optimized UGC prompt using template-based logic (no AI tokens used)\"\"\"\n    try:\n        # Build comprehensive context from form data\n        context = {\n            \"product\": form_data.get(\"product\", \"\"),\n            \"ugc_type\": form_data.get(\"ugc_type\", \"\"),\n            \"target_audience\": form_data.get(\"target_audience\", \"\"),\n            \"actor_type\": form_data.get(\"actor_type\", \"\"),\n            \"age_range\": form_data.get(\"age_range\", \"\"),\n            \"gender\": form_data.get(\"gender\", \"\"),\n            \"setting\": form_data.get(\"setting\", \"\"),\n            \"lighting\": form_data.get(\"lighting\", \"\"),\n            \"camera_movement\": form_data.get(\"camera_movement\", \"\"),\n            \"hook_type\": form_data.get(\"hook_type\", \"\"),\n            \"custom_hook\": form_data.get(\"custom_hook\", \"\"),\n            \"performance_style\": form_data.get(\"performance_style\", \"\"),\n            \"video_length\": form_data.get(\"video_length\", \"8\"),\n            \"aspect_ratio\": form_data.get(\"aspect_ratio\", \"9:16\"),\n            \"audio_enabled\": form_data.get(\"audio_enabled\", True),\n            \"product_analysis\": form_data.get(\"product_analysis\", {}),\n            \"actor_description\": form_data.get(\"actor_description\"),\n            \"character_archetype\": form_data.get(\"character_archetype\")\n        }\n\n        # Generate prompt using template-based logic\n        result = _build_prompt_from_templates(context)\n        return result\n\n    except Exception as e:\n        raise Exception(f\"Failed to generate UGC prompt: {e}\")\n\ndef _build_prompt_logic(context):\n    \"\"\"Build strategic logic for prompt generation based on context\"\"\"\n    logic = {\n        \"hook_strategy\": _determine_hook_strategy(context),\n        \"emotional_triggers\": _identify_emotional_triggers(context),\n        \"conversion_elements\": _select_conversion_elements(context),\n        \"technical_requirements\": _build_technical_specs(context),\n        \"audience_psychology\": _analyze_audience_psychology(context)\n    }\n    return logic\n\ndef _determine_hook_strategy(context):\n    \"\"\"Determine the best hook strategy based on product and audience\"\"\"\n    hook_type = context.get(\"hook_type\", \"\")\n    custom_hook = context.get(\"custom_hook\", \"\")\n\n    if custom_hook:\n        return {\"type\": \"custom\", \"message\": custom_hook}\n\n    hook_strategies = {\n        \"problem_agitate_solve\": \"Start with relatable problem, agitate pain point, reveal solution\",\n        \"curiosity_gap\": \"Create knowledge gap that viewers must fill by watching\",\n        \"social_proof\": \"Lead with testimonial or crowd validation\",\n        \"pattern_interrupt\": \"Break expected patterns to capture attention\",\n        \"controversial\": \"Present contrarian viewpoint to spark engagement\",\n        \"fomo\": \"Create urgency and scarcity to drive immediate action\"\n    }\n\n    return {\"type\": hook_type, \"strategy\": hook_strategies.get(hook_type, \"Direct product showcase\")}\n\ndef _identify_emotional_triggers(context):\n    \"\"\"Identify key emotional triggers for the target audience\"\"\"\n    audience = context.get(\"target_audience\", \"\")\n    product_analysis = context.get(\"product_analysis\", {})\n\n    triggers = []\n\n    if \"gen-z\" in audience.lower():\n        triggers.extend([\"authenticity\", \"social_validation\", \"trending\", \"self_expression\"])\n    elif \"millennials\" in audience.lower():\n        triggers.extend([\"nostalgia\", \"value_optimization\", \"life_balance\", \"social_impact\"])\n    elif \"parents\" in audience.lower():\n        triggers.extend([\"family_safety\", \"time_saving\", \"child_development\", \"peace_of_mind\"])\n    elif \"professionals\" in audience.lower():\n        triggers.extend([\"productivity\", \"status\", \"efficiency\", \"career_advancement\"])\n\n    emotional_appeal = product_analysis.get(\"emotional_appeal\", \"\")\n    if emotional_appeal:\n        triggers.append(emotional_appeal.lower())\n\n    return list(set(triggers))\n\ndef _select_conversion_elements(context):\n    \"\"\"Select conversion optimization elements\"\"\"\n    elements = []\n\n    ugc_type = context.get(\"ugc_type\", \"\")\n    if \"unboxing\" in ugc_type:\n        elements.extend([\"anticipation_building\", \"reveal_moment\", \"first_impression\"])\n    elif \"review\" in ugc_type:\n        elements.extend([\"credibility_indicators\", \"before_after\", \"specific_benefits\"])\n    elif \"tutorial\" in ugc_type:\n        elements.extend([\"step_by_step\", \"transformation\", \"ease_of_use\"])\n\n    elements.extend([\"clear_cta\", \"social_proof\", \"urgency\", \"value_proposition\"])\n\n    return elements\n\ndef _build_technical_specs(context):\n    \"\"\"Build technical specifications for Veo3 optimization\"\"\"\n    specs = {\n        \"duration\": f\"{context.get('video_length', '8')} seconds\",\n        \"aspect_ratio\": \"9:16 vertical format\",\n        \"camera_work\": context.get(\"camera_movement\", \"smooth_tracking\"),\n        \"lighting\": context.get(\"lighting\", \"natural\"),\n        \"setting\": context.get(\"setting\", \"home_bedroom\"),\n        \"audio\": \"clear dialogue with ambient sound\" if context.get(\"audio_enabled\", True) else \"visual only\"\n    }\n\n    return specs\n\ndef _analyze_audience_psychology(context):\n    \"\"\"Analyze target audience psychology for optimization\"\"\"\n    audience = context.get(\"target_audience\", \"\")\n    age_range = context.get(\"age_range\", \"\")\n\n    psychology = {\n        \"attention_span\": \"short\" if \"gen-z\" in audience.lower() else \"medium\",\n        \"trust_factors\": [\"peer_recommendations\", \"authentic_reactions\", \"real_results\"],\n        \"decision_triggers\": [\"social_validation\", \"fear_of_missing_out\", \"problem_solution_fit\"],\n        \"communication_style\": \"casual_conversational\" if \"gen-z\" in audience.lower() else \"informative_friendly\"\n    }\n\n    return psychology\n\ndef _build_prompt_from_templates(context):\n    \"\"\"Build UGC prompt using template-based system generation\"\"\"\n\n    # Get template components\n    hook = _build_hook(context)\n    subject = _build_subject(context)\n    action = _build_action(context)\n    setting = _build_setting(context)\n    camera = _build_camera_work(context)\n    audio = _build_audio(context)\n\n    # Add detailed product description if available\n    product_analysis = context.get(\"product_analysis\", {})\n    detailed_description = product_analysis.get(\"detailed_description\", \"\")\n\n    # Build structured prompt in required format\n    product_analysis = context.get(\"product_analysis\", {})\n    detailed_description = product_analysis.get(\"detailed_description\", \"\")\n\n    # Format exactly as required\n    prompt_sections = []\n\n    # PRODUCT section (visual ground truth)\n    if detailed_description:\n        prompt_sections.append(f\"PRODUCT (read this exactly; use as visual ground truth):\\n{detailed_description}\\n\\nDO NOT SUBSTITUTE ANOTHER PRODUCT. Keep exact branding/text/colors.\")\n\n    # UGC advert section\n    duration = context.get(\"video_length\", \"8\")\n    setting = context.get(\"setting\", \"modern office desk\")\n    lighting = context.get(\"lighting\", \"soft natural light\")\n\n    # Use the actor_persona built in _build_subject\n    actor_persona = _build_subject(context) # Re-call to get the actor_persona\n\n    ugc_section = f\"\"\"UGC advert. Duration {duration} seconds. Aspect 9:16.\nSetting: {setting}, {lighting}. Camera: handheld.\nActor: {actor_persona}.\nAction: {action}\nDialogue (to camera): {hook}\nCaptions: match the spoken line. Audio: clear voice, faint room tone only.\"\"\"\n\n    prompt_sections.append(ugc_section)\n\n    # Combine sections\n    final_prompt = \"\\n\\n\".join(prompt_sections)\n\n    # Generate metadata\n    key_elements = _extract_key_elements(context)\n    conversion_potential = _assess_conversion_potential(context)\n    optimization_tips = _generate_optimization_tips(context)\n\n    return {\n        \"prompt\": final_prompt,\n        \"key_elements\": key_elements,\n        \"conversion_psychology\": _get_conversion_psychology(context),\n        \"technical_elements\": _get_technical_elements(context),\n        \"estimated_conversion_potential\": conversion_potential,\n        \"optimization_tips\": optimization_tips,\n        \"prompt_structure\": \"Structured Format\",\n        \"generation_method\": \"Template Logic\"\n    }\n\ndef _build_hook(context):\n    \"\"\"Build compelling hook based on strategy\"\"\"\n    hook_type = context.get(\"hook_type\", \"\")\n    custom_hook = context.get(\"custom_hook\", \"\")\n    product = context.get(\"product\", \"Product\")\n\n    if custom_hook:\n        return custom_hook\n\n    hooks = {\n        \"problem_agitate_solve\": f\"Are you tired of [problem with {product}]? Here's the game-changer\",\n        \"curiosity_gap\": f\"This {product} trick will blow your mind\",\n        \"social_proof\": f\"Everyone's talking about this {product} - here's why\",\n        \"pattern_interrupt\": f\"Stop! Before you buy another {product}, watch this\",\n        \"controversial\": f\"Unpopular opinion: Most {product} advice is wrong\",\n        \"fomo\": f\"Limited time: This {product} is flying off the shelves\"\n    }\n\n    return hooks.get(hook_type, f\"Check out this amazing {product}\")\n\ndef _build_subject(context):\n    \"\"\"Build subject description\"\"\"\n    character_archetype = context.get(\"character_archetype\", \"\")\n    actor_description = context.get(\"actor_description\")\n\n    # Use Maya's detailed description for gamer archetype\n    if character_archetype == \"gamer\":\n        return \"Maya is a 22 year old woman with an oval face clear fair skin with warm pink undertones defined cheekbones almond shaped hazel eyes framed by straight slightly arched brows a straight medium length nose full lips with a wide natural smile long chestnut brown hair falling past her shoulders and a slim average build with youthful proportions\"\n    elif actor_description and isinstance(actor_description, str):\n        return actor_description\n    else:\n        # Build basic description\n        creator_age = context.get(\"creator_age\", \"young adult\")\n        creator_style = context.get(\"creator_style\", \"authentic\")\n        energy_level = context.get(\"energy_level\", \"upbeat\")\n        return f\"{creator_age}, {creator_style}, {energy_level}\"\n\n\ndef _build_action(context):\n    \"\"\"Build action description based on UGC type\"\"\"\n    ugc_type = context.get(\"ugc_type\", \"\")\n    product = context.get(\"product\", \"product\")\n\n    # Get detailed description to enhance the action\n    product_analysis = context.get(\"product_analysis\", {})\n    detailed_description = product_analysis.get(\"detailed_description\", \"\")\n\n    # Build base action\n    actions = {\n        \"unboxing\": f\"unboxing and revealing the {product} with genuine excitement and surprise reactions\",\n        \"review\": f\"demonstrating and reviewing the {product}, showing its key features and benefits\",\n        \"tutorial\": f\"showing step-by-step how to use the {product} with clear instructions\",\n        \"lifestyle\": f\"naturally incorporating the {product} into their daily routine\",\n        \"problem_solving\": f\"solving a common problem using the {product} as the solution\",\n        \"before_after\": f\"showing dramatic before and after results using the {product}\"\n    }\n\n    base_action = actions.get(ugc_type, f\"showcasing the {product}\")\n\n    # Enhance with detailed description if available\n    if detailed_description:\n        # Extract key visual elements from description\n        visual_details = _extract_visual_details(detailed_description)\n        if visual_details:\n            base_action += f\", highlighting {visual_details}\"\n\n    return base_action\n\ndef _extract_visual_details(description):\n    \"\"\"Extract key visual details from description for prompt enhancement\"\"\"\n    description_lower = description.lower()\n    found_details = []\n\n    # Enhanced color detection with more dynamic descriptions\n    colors = {\n        \"white\": \"crisp white\", \"black\": \"sleek black\", \"blue\": \"vibrant blue\",\n        \"red\": \"bold red\", \"green\": \"fresh green\", \"yellow\": \"bright yellow\",\n        \"purple\": \"rich purple\", \"orange\": \"energetic orange\", \"pink\": \"playful pink\",\n        \"brown\": \"warm brown\", \"gray\": \"sophisticated gray\", \"grey\": \"sophisticated grey\",\n        \"beige\": \"elegant beige\", \"cream\": \"luxurious cream\", \"gold\": \"stunning gold\",\n        \"silver\": \"polished silver\", \"navy\": \"classic navy\", \"tan\": \"rich tan\"\n    }\n\n    for color, enhanced_desc in colors.items():\n        if color in description_lower:\n            found_details.append(f\"the {enhanced_desc} coloring\")\n            break\n\n    # Enhanced material detection with exciting descriptions\n    materials = {\n        \"leather\": \"premium leather craftsmanship\",\n        \"fabric\": \"high-quality fabric construction\", \n        \"metal\": \"gleaming metal accents\",\n        \"plastic\": \"durable design elements\",\n        \"wood\": \"natural wood grain\",\n        \"glass\": \"crystal-clear finish\",\n        \"suede\": \"luxurious suede texture\",\n        \"canvas\": \"sturdy canvas build\",\n        \"rubber\": \"flexible grip technology\"\n    }\n\n    for material, enhanced_desc in materials.items():\n        if material in description_lower:\n            found_details.append(enhanced_desc)\n            break\n\n    # Look for brand/product specific details\n    if \"nike\" in description_lower or \"nikki\" in description_lower:\n        found_details.append(\"the iconic design elements\")\n    if \"logo\" in description_lower or \"text\" in description_lower:\n        found_details.append(\"the distinctive branding\")\n    if \"shoe\" in description_lower or \"sneaker\" in description_lower:\n        found_details.append(\"the athletic silhouette and comfort features\")\n\n    # Look for quality indicators\n    quality_words = [\"professional\", \"detailed\", \"clear\", \"high-quality\", \"premium\", \"luxury\"]\n    for word in quality_words:\n        if word in description_lower:\n            found_details.append(\"the exceptional build quality\")\n            break\n\n    return \", \".join(found_details[:4])  # Allow up to 4 details for richer descriptions\n\ndef _create_enhanced_product_description(original_description, context):\n    \"\"\"Transform basic product description into engaging, dynamic content\"\"\"\n    product = context.get(\"product\", \"product\")\n    description_lower = original_description.lower()\n\n    # Build enhanced description components\n    enhanced_parts = []\n\n    # Start with exciting product intro\n    if \"shoe\" in description_lower or \"sneaker\" in description_lower:\n        enhanced_parts.append(f\"This stunning {product} showcases incredible attention to detail\")\n    elif \"clothing\" in description_lower or \"apparel\" in description_lower:\n        enhanced_parts.append(f\"This beautiful {product} features premium design and craftsmanship\")\n    else:\n        enhanced_parts.append(f\"This amazing {product} combines style and functionality\")\n\n    # Add color descriptions with emotion\n    colors = {\n        \"white\": \"featuring crisp, clean white tones that exude elegance\",\n        \"brown\": \"with rich, warm brown accents that add sophistication\", \n        \"black\": \"showcasing sleek black elements for a modern aesthetic\",\n        \"blue\": \"highlighting vibrant blue details that catch the eye\",\n        \"red\": \"with bold red features that command attention\"\n    }\n\n    for color, desc in colors.items():\n        if color in description_lower:\n            enhanced_parts.append(desc)\n            break\n\n    # Add material and construction details\n    if \"leather\" in description_lower:\n        enhanced_parts.append(\"crafted with premium materials for lasting quality\")\n    elif \"fabric\" in description_lower:\n        enhanced_parts.append(\"made with high-performance materials\")\n    else:\n        enhanced_parts.append(\"built with exceptional attention to quality\")\n\n    # Add brand recognition\n    if \"nike\" in description_lower or \"nikki\" in description_lower:\n        enhanced_parts.append(\"featuring the iconic brand elements you love\")\n    if \"logo\" in description_lower or \"text\" in description_lower:\n        enhanced_parts.append(\"with distinctive branding that makes a statement\")\n\n    # Add visual appeal for video\n    enhanced_parts.append(\"perfectly designed for stunning visual content\")\n\n    # Add engagement elements\n    if \"professional\" in description_lower:\n        enhanced_parts.append(\"professionally styled for maximum impact\")\n\n    # Combine with dynamic connectors\n    connectors = [\", \", \" while \", \". The design \", \", and \", \". Every detail \"]\n    description = enhanced_parts[0]\n\n    for i, part in enumerate(enhanced_parts[1:], 1):\n        if i < len(connectors):\n            description += connectors[i-1] + part\n        else:\n            description += \", \" + part\n\n    return description\n\ndef _generate_ai_powered_ugc_prompt(context, product_analysis):\n    \"\"\"Use OpenAI to generate engaging UGC prompts from product analysis\"\"\"\n    try:\n        # Extract all available data\n        product_name = product_analysis.get(\"product_name\", \"product\")\n        detailed_description = product_analysis.get(\"detailed_description\", \"\")\n        key_features = product_analysis.get(\"key_features\", [])\n        target_audience = context.get(\"target_audience\", \"general consumers\")\n        ugc_type = context.get(\"ugc_type\", \"unboxing\")\n        setting = context.get(\"setting\", \"indoors\")\n        lighting = context.get(\"lighting\", \"natural\")\n        duration = context.get(\"video_length\", \"8\")\n\n        # Create comprehensive prompt for OpenAI - MUST include full description\n        ai_input = f\"\"\"\n        Create an engaging UGC video prompt for this product. IMPORTANT: You must include the complete product description in the final prompt.\n\n        Product: {product_name}\n        Full Product Description: {detailed_description}\n        Key Features: {', '.join(key_features) if key_features else 'Not specified'}\n\n        Video Details:\n        - Type: {ugc_type}\n        - Target Audience: {target_audience}  \n        - Setting: {setting}\n        - Lighting: {lighting}\n        - Duration: {duration} seconds\n        - Format: Vertical 9:16\n\n        Generate a compelling video prompt that MUST end with: \"Product description: [the full detailed description provided above]\"\n\n        Structure: [Engaging UGC directions]. Product description: {detailed_description}\n        \"\"\"\n\n        # Using gpt-4o-mini for cost-effective image analysis\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\", \n                    \"content\": \"You are an expert UGC video strategist who creates compelling, authentic video prompts that drive conversions. Focus on natural, engaging language that resonates with real people.\"\n                },\n                {\n                    \"role\": \"user\", \n                    \"content\": ai_input\n                }\n            ],\n            max_tokens=500,\n            temperature=0.7\n        )\n\n        ai_generated_prompt = response.choices[0].message.content.strip() if response.choices[0].message.content else \"AI generation failed\"\n\n        # Generate metadata using existing functions\n        key_elements = _extract_key_elements(context)\n        conversion_potential = _assess_conversion_potential(context)\n        optimization_tips = _generate_optimization_tips(context)\n\n        return {\n            \"prompt\": ai_generated_prompt,\n            \"key_elements\": key_elements,\n            \"conversion_psychology\": _get_conversion_psychology(context),\n            \"technical_elements\": _get_technical_elements(context),\n            \"estimated_conversion_potential\": conversion_potential,\n            \"optimization_tips\": optimization_tips,\n            \"prompt_structure\": \"AI-Generated Comprehensive UGC Prompt\",\n            \"generation_method\": \"OpenAI GPT-4o\"\n        }\n\n    except Exception as e:\n        logging.error(f\"Error generating AI prompt: {e}\")\n        # Fallback to template method\n        return _generate_basic_template_prompt(context)\n\ndef _generate_basic_template_prompt(context):\n    \"\"\"Fallback template method when AI generation fails\"\"\"\n    # Basic template components\n    hook = _build_hook(context)\n    subject = _build_subject(context)\n    action = _build_action(context)\n    setting = _build_setting(context)\n    camera = _build_camera_work(context)\n    audio = _build_audio(context)\n\n    # Build basic prompt\n    prompt_parts = [hook, subject, action, setting, camera, audio]\n    prompt = \". \".join([part for part in prompt_parts if part])\n\n    return {\n        \"prompt\": prompt,\n        \"key_elements\": _extract_key_elements(context),\n        \"conversion_psychology\": _get_conversion_psychology(context),\n        \"technical_elements\": _get_technical_elements(context),\n        \"estimated_conversion_potential\": _assess_conversion_potential(context),\n        \"optimization_tips\": _generate_optimization_tips(context),\n        \"prompt_structure\": \"Template-Based Fallback\",\n        \"generation_method\": \"Template Logic\"\n    }\n\ndef _build_setting(context):\n    \"\"\"Build setting description enhanced with product details\"\"\"\n    setting = context.get(\"setting\", \"\")\n    lighting = context.get(\"lighting\", \"\")\n\n    settings = {\n        \"home_bedroom\": \"in a cozy, well-lit bedroom\",\n        \"kitchen\": \"in a modern, clean kitchen\",\n        \"office\": \"in a professional office workspace\",\n        \"outdoors\": \"in a beautiful outdoor location with natural scenery\",\n        \"car\": \"inside a clean, modern vehicle\",\n        \"bathroom\": \"in a clean, well-lit bathroom\"\n    }\n\n    lighting_styles = {\n        \"natural\": \"with soft natural lighting\",\n        \"ring_light\": \"with professional ring light setup\",\n        \"golden_hour\": \"during golden hour with warm, flattering light\",\n        \"soft_indoor\": \"with soft, diffused indoor lighting\"\n    }\n\n    setting_desc = settings.get(setting, \"in an attractive indoor setting\")\n    lighting_desc = lighting_styles.get(lighting, \"with good lighting\")\n\n    # Enhance with product analysis if available\n    product_analysis = context.get(\"product_analysis\", {})\n    detailed_description = product_analysis.get(\"detailed_description\", \"\")\n\n    base_setting = f\"{setting_desc} {lighting_desc}\"\n\n    # Add environmental details from product description\n    if detailed_description:\n        env_details = _extract_environmental_details(detailed_description)\n        if env_details:\n            base_setting += f\", {env_details}\"\n\n    return base_setting\n\ndef _extract_environmental_details(description):\n    \"\"\"Extract environmental/background details from description\"\"\"\n    description_lower = description.lower()\n\n    # Look for background/surface mentions\n    surfaces = [\"fabric\", \"wood\", \"table\", \"surface\", \"background\", \"floor\", \"wall\"]\n    for surface in surfaces:\n        if surface in description_lower:\n            if \"fabric\" in description_lower:\n                return \"with textured fabric surfaces visible\"\n            elif \"wood\" in description_lower:\n                return \"with warm wooden surfaces\"\n            elif \"neutral\" in description_lower and \"background\" in description_lower:\n                return \"against a clean, neutral background\"\n\n    return \"\"\n\ndef _build_camera_work(context):\n    \"\"\"Build camera work description\"\"\"\n    camera_movement = context.get(\"camera_movement\", \"\")\n    video_length = context.get(\"video_length\", \"8\")\n\n    camera_styles = {\n        \"static\": \"Shot with a steady, static camera for clear focus\",\n        \"handheld\": \"Filmed with natural handheld movement for authenticity\",\n        \"smooth_tracking\": \"Using smooth camera tracking to follow the action\",\n        \"close_zoom\": \"Starting wide and smoothly zooming in for detail\"\n    }\n\n    camera_desc = camera_styles.get(camera_movement, \"with steady, professional camera work\")\n\n    return f\"{camera_desc}. {video_length}-second duration, vertical 9:16 format\"\n\ndef _build_audio(context):\n    \"\"\"Build audio description\"\"\"\n    audio_enabled = context.get(\"audio_enabled\", True)\n    performance_style = context.get(\"performance_style\", \"\")\n\n    if not audio_enabled:\n        return \"Silent video with text overlays and engaging visuals\"\n\n    audio_styles = {\n        \"conversational\": \"with clear, natural speech and ambient background\",\n        \"excited\": \"with enthusiastic, high-energy narration\",\n        \"calm\": \"with calm, trustworthy voice and subtle background music\",\n        \"energetic\": \"with upbeat music and dynamic audio\",\n        \"emotional\": \"with heartfelt narration and supporting music\"\n    }\n\n    audio_desc = audio_styles.get(performance_style, \"with clear audio and engaging narration\")\n\n    return f\"Audio: {audio_desc}\"\n\ndef _extract_key_elements(context):\n    \"\"\"Extract key elements from context\"\"\"\n    elements = []\n\n    if context.get(\"hook_type\"):\n        elements.append(f\"Hook Strategy: {context['hook_type'].replace('_', ' ').title()}\")\n    if context.get(\"ugc_type\"):\n        elements.append(f\"Content Type: {context['ugc_type'].replace('_', ' ').title()}\")\n    if context.get(\"target_audience\"):\n        elements.append(f\"Target: {context['target_audience'].replace('_', ' ').title()}\")\n    if context.get(\"setting\"):\n        elements.append(f\"Setting: {context['setting'].replace('_', ' ').title()}\")\n    if context.get(\"performance_style\"):\n        elements.append(f\"Style: {context['performance_style'].replace('_', ' ').title()}\")\n\n    return elements\n\ndef _assess_conversion_potential(context):\n    \"\"\"Assess conversion potential based on context\"\"\"\n    score = 0\n\n    # Score based on completeness and quality of inputs\n    if context.get(\"hook_type\"): score += 20\n    if context.get(\"ugc_type\"): score += 20\n    if context.get(\"target_audience\"): score += 15\n    if context.get(\"product_analysis\"): score += 15\n    if context.get(\"performance_style\"): score += 10\n    if context.get(\"setting\"): score += 10\n    if context.get(\"custom_hook\"): score += 10\n\n    if score >= 80:\n        return \"high\"\n    elif score >= 50:\n        return \"medium\"\n    else:\n        return \"low\"\n\ndef _generate_optimization_tips(context):\n    \"\"\"Generate optimization tips based on context\"\"\"\n    tips = []\n\n    if not context.get(\"hook_type\"):\n        tips.append(\"Add a compelling hook strategy to grab immediate attention\")\n\n    if not context.get(\"custom_hook\"):\n        tips.append(\"Consider adding a custom hook message for more personalization\")\n\n    if context.get(\"target_audience\") == \"gen-z\":\n        tips.append(\"Keep pace fast and include trending elements for Gen Z audience\")\n\n    if context.get(\"ugc_type\") == \"unboxing\":\n        tips.append(\"Focus on the excitement and surprise elements during unboxing\")\n\n    tips.append(\"Test different hooks with your audience to find what converts best\")\n    tips.append(\"Ensure the first 3 seconds are highly engaging to prevent scroll-past\")\n\n    return tips\n\ndef _get_conversion_psychology(context):\n    \"\"\"Get conversion psychology elements\"\"\"\n    return [\n        \"Social proof through authentic reactions\",\n        \"Problem-solution framework\",\n        \"Emotional triggers and relatability\",\n        \"Visual demonstration of benefits\"\n    ]\n\ndef _get_technical_elements(context):\n    \"\"\"Get technical elements for Veo3\"\"\"\n    return [\n        \"9:16 vertical aspect ratio\",\n        f\"{context.get('video_length', '8')}-second duration\",\n        \"Clear subject focus and framing\",\n        \"Optimized for mobile viewing\"\n    ]\n\ndef _get_enhancement_templates(context=None):\n    \"\"\"Get enhancement templates for different focus areas\"\"\"\n    return {\n        \"conversion\": {\n            \"improvements\": [\"Added urgency triggers\", \"Enhanced call-to-action\", \"Included social proof elements\"],\n            \"changes\": [\"Stronger opening hook\", \"Clear value proposition\", \"Conversion-focused language\"],\n            \"boost_explanation\": \"Enhanced psychological triggers and conversion elements for higher sales potential\"\n        },\n        \"visual\": {\n            \"improvements\": [\"Enhanced cinematography\", \"Better visual composition\", \"Improved lighting description\"],\n            \"changes\": [\"More detailed camera work\", \"Professional visual elements\", \"Aesthetic improvements\"],\n            \"boost_explanation\": \"Improved visual storytelling and cinematography for more engaging content\"\n        },\n        \"emotion\": {\n            \"improvements\": [\"Deeper emotional connection\", \"Enhanced storytelling\", \"Relatable scenarios\"],\n            \"changes\": [\"Emotional language\", \"Personal connection points\", \"Empathy-driven content\"],\n            \"boost_explanation\": \"Amplified emotional resonance for stronger viewer connection and engagement\"\n        },\n        \"engagement\": {\n            \"improvements\": [\"Social media optimized\", \"Viral potential elements\", \"Interactive components\"],\n            \"changes\": [\"Platform-specific optimization\", \"Shareability factors\", \"Engagement hooks\"],\n            \"boost_explanation\": \"Optimized for maximum social media engagement and viral potential\"\n        }\n    }\n\ndef _apply_enhancement_template(original_prompt, focus, templates):\n    \"\"\"Apply enhancement template to original prompt\"\"\"\n\n    # Enhancement strategies based on focus\n    if focus == \"conversion\":\n        # Add conversion elements\n        enhanced = f\"URGENT: {original_prompt}. Viewers can't stop buying this! Limited time offer - act now before it's gone!\"\n\n    elif focus == \"visual\":\n        # Enhance visual elements\n        enhanced = f\"Cinematic quality: {original_prompt}. Shot with professional-grade lighting, perfect composition, and stunning visual appeal that stops viewers mid-scroll.\"\n\n    elif focus == \"emotion\":\n        # Add emotional elements\n        enhanced = f\"Heartfelt story: {original_prompt}. The genuine emotion and personal connection will move viewers to tears and create lasting impact.\"\n\n    elif focus == \"engagement\":\n        # Add engagement elements\n        enhanced = f\"Viral potential: {original_prompt}. Designed to maximize shares, comments, and saves. This content will dominate social feeds!\"\n\n    else:\n        enhanced = original_prompt\n\n    return enhanced\n\ndef enhance_prompt_with_templates(original_prompt, enhancement_focus=\"conversion\"):\n    \"\"\"Enhance existing prompt using template-based improvements (no AI tokens used)\"\"\"\n    try:\n        enhancement_templates = _get_enhancement_templates()\n\n        # Apply enhancement based on focus\n        enhanced_prompt = _apply_enhancement_template(original_prompt, enhancement_focus, enhancement_templates)\n\n        result = {\n            \"enhanced_prompt\": enhanced_prompt,\n            \"improvements_made\": enhancement_templates[enhancement_focus][\"improvements\"],\n            \"enhancement_score\": \"15-25% improvement\",\n            \"key_changes\": enhancement_templates[enhancement_focus][\"changes\"],\n            \"conversion_boost\": enhancement_templates[enhancement_focus][\"boost_explanation\"]\n        }\n\n        return result\n\n    except Exception as e:\n        raise Exception(f\"Failed to enhance prompt: {e}\")","size_bytes":37764},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-cors>=6.0.1\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"openai>=1.101.0\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"werkzeug>=3.1.3\",\n    \"google-cloud-vision>=3.10.2\",\n]\n","size_bytes":408},"replit.md":{"content":"# Overview\n\nThis is an AI-powered UGC (User-Generated Content) advertisement prompt generator that analyzes product images and creates optimized prompts for generating high-converting video advertisements. The application uses OpenAI's GPT-4V model to analyze uploaded product images and extract key details, then generates comprehensive prompts for UGC video creation with customizable settings for audience targeting, content style, and technical specifications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a traditional server-rendered Flask architecture with progressive enhancement through JavaScript. The frontend consists of:\n\n- **Multi-step wizard interface**: Three-step process (upload → configure → generate) with visual progress tracking\n- **Responsive design**: Built with modern CSS custom properties and flexbox/grid layouts\n- **Interactive components**: File upload with drag-and-drop, theme toggling, and dynamic form handling\n- **State management**: Client-side JavaScript class managing application state and user interactions\n\n## Backend Architecture\nThe backend is built on Flask with a modular service-oriented approach:\n\n- **Flask web framework**: Lightweight Python web server handling HTTP requests and responses\n- **Service layer separation**: OpenAI integration abstracted into dedicated service module\n- **File handling**: Secure image upload with validation, resizing, and base64 conversion\n- **Session management**: Flask sessions for maintaining user state across requests\n\n## Data Processing Pipeline\nThe application follows a linear data processing workflow:\n\n1. **Image preprocessing**: Uploaded images are validated, resized (max 1024px), converted to RGB format, and encoded to base64\n2. **AI analysis**: Images are sent to OpenAI's GPT-4V model for structured product analysis\n3. **Prompt generation**: Analysis results combined with user preferences to generate UGC video prompts\n4. **Template system**: Jinja2 templates render dynamic content based on application state\n\n## Security and Validation\nSecurity measures implemented throughout the application:\n\n- **File type validation**: Restricted to common image formats (PNG, JPG, JPEG, GIF, WebP)\n- **File size limits**: Maximum 16MB upload size to prevent abuse\n- **Secure filename handling**: Werkzeug's secure_filename for safe file storage\n- **Environment variable configuration**: Sensitive data like API keys stored in environment variables\n\n# External Dependencies\n\n## AI Services\n- **OpenAI API**: GPT-4V model for image analysis and prompt generation, requiring OPENAI_API_KEY environment variable\n\n## Python Libraries\n- **Flask**: Web framework with CORS support for cross-origin requests\n- **Pillow (PIL)**: Image processing for resizing, format conversion, and optimization\n- **Werkzeug**: File handling utilities and security functions\n\n## Frontend Assets\n- **Custom CSS**: No external CSS frameworks, using modern CSS features and custom design system\n- **Vanilla JavaScript**: No frontend frameworks, pure JavaScript for interactivity and state management\n\n## Development Environment\n- **Environment variables**: SESSION_SECRET for Flask sessions, OPENAI_API_KEY for AI integration\n- **File system**: Local file storage in uploads directory for temporary image processing","size_bytes":3385},"attached_assets/app_1755985533074.js":{"content":"// Application data\nconst appData = {\n  \"ugc_types\": [\n    {\"id\": \"unboxing\", \"name\": \"Unboxing\", \"description\": \"Customer receives and opens product for first time\"},\n    {\"id\": \"review\", \"name\": \"Review/Testimonial\", \"description\": \"Honest customer feedback and recommendation\"},\n    {\"id\": \"tutorial\", \"name\": \"Tutorial/How-to\", \"description\": \"Educational content showing product usage\"},\n    {\"id\": \"lifestyle\", \"name\": \"Lifestyle/Day-in-life\", \"description\": \"Product integrated into daily routine\"},\n    {\"id\": \"problem_solving\", \"name\": \"Problem-solving\", \"description\": \"Product as solution to specific issue\"},\n    {\"id\": \"before_after\", \"name\": \"Before/After\", \"description\": \"Transformation results from product use\"}\n  ],\n  \"hook_types\": [\n    {\n      \"id\": \"problem_agitate_solve\",\n      \"name\": \"Problem-Agitate-Solve\",\n      \"description\": \"Highlight problem, intensify pain, offer solution\",\n      \"template\": \"Struggling with [PROBLEM]? It gets worse when [AGITATION]. Here's how [PRODUCT] fixes it...\"\n    },\n    {\n      \"id\": \"curiosity_gap\",\n      \"name\": \"Curiosity Gap\", \n      \"description\": \"Create open loop that demands closure\",\n      \"template\": \"The one thing I wish I knew about [TOPIC] before... Watch till the end to find out\"\n    },\n    {\n      \"id\": \"social_proof\",\n      \"name\": \"Social Proof\",\n      \"description\": \"Lead with credibility and validation\",\n      \"template\": \"After helping [NUMBER] customers with [PROBLEM], here's what actually works...\"\n    },\n    {\n      \"id\": \"pattern_interrupt\",\n      \"name\": \"Pattern Interrupt\",\n      \"description\": \"Break viewers from their scroll with unexpected element\",\n      \"template\": \"Stop scrolling! This will change how you think about [TOPIC]\"\n    },\n    {\n      \"id\": \"controversial\",\n      \"name\": \"Controversial/Contrarian\", \n      \"description\": \"Challenge common beliefs or conventional wisdom\",\n      \"template\": \"Everyone told me [COMMON BELIEF] was wrong. Here's why they were right...\"\n    },\n    {\n      \"id\": \"fomo\",\n      \"name\": \"FOMO/Urgency\",\n      \"description\": \"Create scarcity and time-sensitive motivation\",\n      \"template\": \"Only [TIME/QUANTITY] left! Here's why you can't wait on this...\"\n    }\n  ],\n  \"actor_types\": [\n    {\"id\": \"customer_testimonial\", \"name\": \"Real Customer Testimonial\", \"description\": \"Authentic user sharing genuine experience\"},\n    {\"id\": \"influencer_style\", \"name\": \"Influencer-style\", \"description\": \"Polished creator-style presentation\"},\n    {\"id\": \"expert_review\", \"name\": \"Expert Review\", \"description\": \"Authority figure providing professional opinion\"},\n    {\"id\": \"everyday_person\", \"name\": \"Everyday Person\", \"description\": \"Relatable individual in natural setting\"}\n  ],\n  \"settings\": [\n    {\"id\": \"home_bedroom\", \"name\": \"Home/Bedroom\", \"description\": \"Personal, intimate setting\"},\n    {\"id\": \"kitchen\", \"name\": \"Kitchen\", \"description\": \"Domestic, practical environment\"},\n    {\"id\": \"office\", \"name\": \"Office/Workspace\", \"description\": \"Professional, productive atmosphere\"},\n    {\"id\": \"outdoors\", \"name\": \"Outdoors\", \"description\": \"Natural, active lifestyle\"},\n    {\"id\": \"car\", \"name\": \"Car/Vehicle\", \"description\": \"On-the-go, commuter scenario\"},\n    {\"id\": \"bathroom\", \"name\": \"Bathroom\", \"description\": \"Personal care, morning routine\"}\n  ],\n  \"camera_movements\": [\n    {\"id\": \"static\", \"name\": \"Static Shot\", \"description\": \"Stable, fixed camera position\"},\n    {\"id\": \"handheld\", \"name\": \"Handheld\", \"description\": \"Natural camera shake for authenticity\"},\n    {\"id\": \"smooth_tracking\", \"name\": \"Smooth Tracking\", \"description\": \"Professional camera movement following subject\"},\n    {\"id\": \"close_zoom\", \"name\": \"Close-up Zoom\", \"description\": \"Dramatic zoom into product or face\"}\n  ],\n  \"lighting_types\": [\n    {\"id\": \"natural\", \"name\": \"Natural Light\", \"description\": \"Window light, outdoor lighting\"},\n    {\"id\": \"ring_light\", \"name\": \"Ring Light\", \"description\": \"Even, flattering illumination\"},\n    {\"id\": \"golden_hour\", \"name\": \"Golden Hour\", \"description\": \"Warm, cinematic outdoor lighting\"},\n    {\"id\": \"soft_indoor\", \"name\": \"Soft Indoor\", \"description\": \"Gentle artificial lighting\"}\n  ],\n  \"veo3_best_practices\": [\n    \"Include specific subject description (person, appearance, clothing)\",\n    \"Define clear action and movement for the subject\",\n    \"Specify setting/location with detailed context\",\n    \"Add camera movement and shot composition\",\n    \"Include lighting and mood descriptions\", \n    \"Specify audio elements (dialogue, sound effects, music)\",\n    \"Keep prompts focused and detailed but not overly complex\",\n    \"Use cinematic and technical terminology\",\n    \"Include emotional context and authentic reactions\"\n  ],\n  \"templates\": [\n    {\n      \"id\": \"product_review\",\n      \"name\": \"Product Review Template\",\n      \"prompt\": \"A handheld camera captures a [AGE] [GENDER] in their [SETTING], holding [PRODUCT]. Natural lighting streams in. They look directly at camera with genuine excitement: '[TESTIMONIAL_HOOK]' They demonstrate the product with authentic hand gestures, showing key features. Audio includes clear speech and subtle ambient sound.\"\n    },\n    {\n      \"id\": \"unboxing_experience\", \n      \"name\": \"Unboxing Experience Template\",\n      \"prompt\": \"Close-up shot of hands carefully opening [PRODUCT] packaging on a clean [SURFACE]. Camera slowly pulls back to reveal excited [AGE] [GENDER] in [SETTING]. '[EXCITEMENT_DIALOGUE]' they say while examining the product. Soft unboxing sounds, paper rustling, and authentic reactions. Natural lighting creates warm, inviting atmosphere.\"\n    },\n    {\n      \"id\": \"problem_solution\",\n      \"name\": \"Problem-Solution Template\", \n      \"prompt\": \"A [AGE] [GENDER] sits in [SETTING] looking frustrated while dealing with [PROBLEM]. Camera captures their expression up close. '[PROBLEM_STATEMENT]' Suddenly, they introduce [PRODUCT]. Their mood shifts as they demonstrate the solution. '[SOLUTION_DIALOGUE]' Clear before-and-after visual progression with authentic emotional arc.\"\n    }\n  ],\n  \"quality_metrics\": [\n    {\"element\": \"Subject Description\", \"weight\": 20, \"description\": \"Detailed person/actor specification\"},\n    {\"element\": \"Action/Movement\", \"weight\": 15, \"description\": \"Clear subject actions and gestures\"},\n    {\"element\": \"Setting/Context\", \"weight\": 15, \"description\": \"Specific location and environment\"},\n    {\"element\": \"Camera Work\", \"weight\": 15, \"description\": \"Camera movement and composition\"},\n    {\"element\": \"Audio Elements\", \"weight\": 15, \"description\": \"Dialogue, sound effects, music\"},\n    {\"element\": \"Sales Hook\", \"weight\": 10, \"description\": \"Compelling opening or message\"},\n    {\"element\": \"Product Integration\", \"weight\": 10, \"description\": \"Natural product placement and demo\"}\n  ]\n};\n\nclass Veo3PromptGenerator {\n  constructor() {\n    this.initializeApp();\n    this.bindEvents();\n    this.populateDropdowns();\n    this.populateBestPractices();\n    this.populateTemplates();\n  }\n\n  initializeApp() {\n    // Set default active tab to Basic Settings\n    this.showTab('basic');\n  }\n\n  bindEvents() {\n    // Tab navigation\n    document.querySelectorAll('.tab-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.preventDefault();\n        const tabId = e.target.getAttribute('data-tab');\n        console.log('Tab clicked:', tabId); // Debug log\n        this.showTab(tabId);\n      });\n    });\n\n    // Form change events for real-time prompt generation\n    document.addEventListener('change', (e) => {\n      if (e.target.matches('select, input, textarea')) {\n        this.generatePrompt();\n      }\n    });\n\n    document.addEventListener('input', (e) => {\n      if (e.target.matches('input[type=\"text\"], textarea')) {\n        this.generatePrompt();\n      }\n    });\n\n    // Hook type change for template preview\n    document.getElementById('hook-type').addEventListener('change', (e) => {\n      this.updateHookTemplate(e.target.value);\n    });\n\n    // Copy prompt button\n    document.getElementById('copy-prompt').addEventListener('click', () => {\n      this.copyPrompt();\n    });\n\n    // Random inspiration button\n    document.getElementById('generate-random').addEventListener('click', () => {\n      this.generateRandomSettings();\n    });\n\n    // Template selector\n    document.getElementById('template-selector').addEventListener('change', (e) => {\n      this.loadTemplate(e.target.value);\n    });\n  }\n\n  showTab(tabId) {\n    console.log('Showing tab:', tabId); // Debug log\n    \n    // Update tab buttons\n    document.querySelectorAll('.tab-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    const activeTabBtn = document.querySelector(`[data-tab=\"${tabId}\"]`);\n    if (activeTabBtn) {\n      activeTabBtn.classList.add('active');\n    }\n\n    // Update tab content - hide all first\n    document.querySelectorAll('.tab-content').forEach(content => {\n      content.classList.remove('active');\n    });\n    \n    // Show the selected tab content\n    const activeTabContent = document.getElementById(`${tabId}-tab`);\n    if (activeTabContent) {\n      activeTabContent.classList.add('active');\n      console.log('Activated tab content:', `${tabId}-tab`); // Debug log\n    } else {\n      console.error('Tab content not found:', `${tabId}-tab`); // Debug log\n    }\n  }\n\n  populateDropdowns() {\n    // Populate UGC types\n    const ugcSelect = document.getElementById('ugc-type');\n    if (ugcSelect) {\n      appData.ugc_types.forEach(type => {\n        const option = document.createElement('option');\n        option.value = type.id;\n        option.textContent = type.name;\n        option.title = type.description;\n        ugcSelect.appendChild(option);\n      });\n    }\n\n    // Populate settings\n    const settingSelect = document.getElementById('setting');\n    if (settingSelect) {\n      appData.settings.forEach(setting => {\n        const option = document.createElement('option');\n        option.value = setting.id;\n        option.textContent = setting.name;\n        option.title = setting.description;\n        settingSelect.appendChild(option);\n      });\n    }\n\n    // Populate lighting types\n    const lightingSelect = document.getElementById('lighting');\n    if (lightingSelect) {\n      appData.lighting_types.forEach(lighting => {\n        const option = document.createElement('option');\n        option.value = lighting.id;\n        option.textContent = lighting.name;\n        option.title = lighting.description;\n        lightingSelect.appendChild(option);\n      });\n    }\n\n    // Populate actor types\n    const actorSelect = document.getElementById('actor-type');\n    if (actorSelect) {\n      appData.actor_types.forEach(actor => {\n        const option = document.createElement('option');\n        option.value = actor.id;\n        option.textContent = actor.name;\n        option.title = actor.description;\n        actorSelect.appendChild(option);\n      });\n    }\n\n    // Populate hook types\n    const hookSelect = document.getElementById('hook-type');\n    if (hookSelect) {\n      appData.hook_types.forEach(hook => {\n        const option = document.createElement('option');\n        option.value = hook.id;\n        option.textContent = hook.name;\n        option.title = hook.description;\n        hookSelect.appendChild(option);\n      });\n    }\n\n    // Populate camera movements\n    const cameraSelect = document.getElementById('camera-movement');\n    if (cameraSelect) {\n      appData.camera_movements.forEach(movement => {\n        const option = document.createElement('option');\n        option.value = movement.id;\n        option.textContent = movement.name;\n        option.title = movement.description;\n        cameraSelect.appendChild(option);\n      });\n    }\n  }\n\n  populateBestPractices() {\n    const list = document.getElementById('best-practices-list');\n    if (list) {\n      appData.veo3_best_practices.forEach(practice => {\n        const li = document.createElement('li');\n        li.textContent = practice;\n        list.appendChild(li);\n      });\n    }\n  }\n\n  populateTemplates() {\n    const templateSelect = document.getElementById('template-selector');\n    if (templateSelect) {\n      appData.templates.forEach(template => {\n        const option = document.createElement('option');\n        option.value = template.id;\n        option.textContent = template.name;\n        templateSelect.appendChild(option);\n      });\n    }\n  }\n\n  updateHookTemplate(hookTypeId) {\n    const hookType = appData.hook_types.find(h => h.id === hookTypeId);\n    const templateText = document.getElementById('hook-template-text');\n    \n    if (templateText) {\n      if (hookType) {\n        templateText.textContent = hookType.template;\n        templateText.style.fontStyle = 'italic';\n        templateText.style.color = 'var(--color-text-secondary)';\n      } else {\n        templateText.textContent = 'Select a hook type to see the template';\n        templateText.style.fontStyle = 'italic';\n        templateText.style.color = 'var(--color-text-secondary)';\n      }\n    }\n  }\n\n  getFormData() {\n    const getData = (id) => {\n      const element = document.getElementById(id);\n      return element ? element.value : '';\n    };\n\n    const getChecked = (id) => {\n      const element = document.getElementById(id);\n      return element ? element.checked : false;\n    };\n\n    return {\n      product: getData('product'),\n      targetAudience: getData('target-audience'),\n      videoLength: getData('video-length'),\n      aspectRatio: getData('aspect-ratio'),\n      audioEnabled: getChecked('audio-enabled'),\n      ugcType: getData('ugc-type'),\n      authenticity: getData('authenticity'),\n      setting: getData('setting'),\n      lighting: getData('lighting'),\n      actorType: getData('actor-type'),\n      ageRange: getData('age-range'),\n      gender: getData('gender'),\n      performanceStyle: getData('performance-style'),\n      hookType: getData('hook-type'),\n      customHook: getData('custom-hook'),\n      productPlacement: getData('product-placement'),\n      productDemo: getData('product-demo'),\n      brandVisibility: getData('brand-visibility'),\n      cameraMovement: getData('camera-movement'),\n      shotComposition: getData('shot-composition'),\n      visualStyle: getData('visual-style'),\n      colorGrading: getData('color-grading')\n    };\n  }\n\n  generatePrompt() {\n    const data = this.getFormData();\n    const prompt = this.buildPrompt(data);\n    \n    // Update prompt display\n    const promptOutput = document.getElementById('prompt-output');\n    if (promptOutput) {\n      if (prompt.trim()) {\n        promptOutput.innerHTML = `<div class=\"generated-prompt\">${this.formatPrompt(prompt)}</div>`;\n      } else {\n        promptOutput.innerHTML = '<p class=\"placeholder-text\">Fill in the form to generate your Veo3 prompt...</p>';\n      }\n    }\n\n    // Update quality score and word count\n    this.updateQualityScore(data, prompt);\n    this.updateWordCount(prompt);\n  }\n\n  buildPrompt(data) {\n    if (!data.product) return '';\n\n    let prompt = '';\n    \n    // Subject description\n    if (data.ageRange || data.gender || data.actorType) {\n      const age = data.ageRange ? data.ageRange.split('-')[0] + '-year-old' : '';\n      const gender = data.gender || 'person';\n      const actorDesc = this.getActorDescription(data.actorType);\n      prompt += `A ${age} ${gender} ${actorDesc}`.replace(/\\s+/g, ' ').trim();\n    } else {\n      prompt += 'A person';\n    }\n\n    // Setting and context\n    if (data.setting) {\n      const settingDesc = this.getSettingDescription(data.setting);\n      prompt += ` in ${settingDesc}`;\n    }\n\n    // Product interaction\n    if (data.productDemo) {\n      const demoDesc = this.getProductDemoDescription(data.productDemo);\n      prompt += `, ${demoDesc} ${data.product}`;\n    } else {\n      prompt += `, holding ${data.product}`;\n    }\n\n    prompt += '.';\n\n    // Camera work\n    if (data.cameraMovement || data.shotComposition) {\n      const cameraDesc = this.getCameraDescription(data.cameraMovement, data.shotComposition);\n      if (cameraDesc) {\n        prompt += ` ${cameraDesc}`;\n      }\n    }\n\n    // Lighting\n    if (data.lighting) {\n      const lightingDesc = this.getLightingDescription(data.lighting);\n      if (lightingDesc) {\n        prompt += ` ${lightingDesc}`;\n      }\n    }\n\n    // Performance and dialogue\n    if (data.performanceStyle) {\n      const performanceDesc = this.getPerformanceDescription(data.performanceStyle);\n      if (performanceDesc) {\n        prompt += ` ${performanceDesc}`;\n      }\n    }\n\n    // Hook or custom dialogue\n    if (data.customHook) {\n      prompt += ` \"${data.customHook}\"`;\n    } else if (data.hookType) {\n      const hookTemplate = this.getHookTemplate(data.hookType, data.product);\n      if (hookTemplate) {\n        prompt += ` \"${hookTemplate}\"`;\n      }\n    }\n\n    // Technical specifications\n    if (data.visualStyle) {\n      prompt += ` Shot in ${data.visualStyle} style`;\n      if (data.colorGrading) {\n        prompt += ` with ${data.colorGrading.replace('-', ' ')} color grading`;\n      }\n      prompt += '.';\n    }\n\n    // Audio elements\n    if (data.audioEnabled) {\n      prompt += ' Audio includes clear speech';\n      if (data.setting === 'outdoors') {\n        prompt += ' with natural ambient sounds';\n      } else if (data.ugcType === 'unboxing') {\n        prompt += ', unboxing sounds, and paper rustling';\n      } else {\n        prompt += ' and subtle background ambiance';\n      }\n      prompt += '.';\n    }\n\n    return prompt.trim();\n  }\n\n  formatPrompt(prompt) {\n    // Add visual formatting to the prompt\n    return prompt\n      .replace(/\\. /g, '.<br><br>')\n      .replace(/Audio includes/g, '<br><strong>Audio:</strong>')\n      .replace(/Shot in/g, '<br><strong>Visual Style:</strong> Shot in');\n  }\n\n  getActorDescription(actorType) {\n    const descriptions = {\n      'customer_testimonial': 'authentic customer',\n      'influencer_style': 'content creator',\n      'expert_review': 'professional expert',\n      'everyday_person': 'everyday individual'\n    };\n    return descriptions[actorType] || '';\n  }\n\n  getSettingDescription(setting) {\n    const descriptions = {\n      'home_bedroom': 'their cozy bedroom',\n      'kitchen': 'a modern kitchen',\n      'office': 'their workspace',\n      'outdoors': 'a natural outdoor setting',\n      'car': 'their car',\n      'bathroom': 'their bathroom'\n    };\n    return descriptions[setting] || setting.replace('_', ' ');\n  }\n\n  getProductDemoDescription(demo) {\n    const descriptions = {\n      'hands-on': 'actively using',\n      'results': 'showcasing results from',\n      'unboxing': 'carefully unboxing'\n    };\n    return descriptions[demo] || 'demonstrating';\n  }\n\n  getCameraDescription(movement, composition) {\n    let desc = '';\n    if (composition) {\n      const compositions = {\n        'wide': 'Wide shot',\n        'medium': 'Medium shot',\n        'close-up': 'Close-up',\n        'over-shoulder': 'Over-shoulder shot'\n      };\n      desc += compositions[composition] || composition;\n    }\n    \n    if (movement) {\n      const movements = {\n        'static': 'with stable framing',\n        'handheld': 'with natural handheld movement',\n        'smooth_tracking': 'with smooth camera tracking',\n        'close_zoom': 'zooming in dramatically'\n      };\n      desc += (desc ? ' ' : '') + (movements[movement] || movement);\n    }\n    \n    return desc ? desc + '.' : '';\n  }\n\n  getLightingDescription(lighting) {\n    const descriptions = {\n      'natural': 'Natural lighting illuminates the scene.',\n      'ring_light': 'Ring light provides even, flattering illumination.',\n      'golden_hour': 'Golden hour lighting creates a warm, cinematic atmosphere.',\n      'soft_indoor': 'Soft indoor lighting creates an intimate mood.'\n    };\n    return descriptions[lighting] || '';\n  }\n\n  getPerformanceDescription(style) {\n    const descriptions = {\n      'conversational': 'They speak in a conversational, natural tone:',\n      'excited': 'With genuine excitement and enthusiasm, they exclaim:',\n      'calm': 'In a calm, trustworthy manner, they explain:',\n      'energetic': 'With high energy and passion, they share:',\n      'emotional': 'With authentic emotion, they reveal:'\n    };\n    return descriptions[style] || 'They say:';\n  }\n\n  getHookTemplate(hookType, product) {\n    const hook = appData.hook_types.find(h => h.id === hookType);\n    if (!hook) return '';\n    \n    return hook.template\n      .replace('[PRODUCT]', product)\n      .replace('[TOPIC]', product)\n      .replace('[PROBLEM]', 'this common issue')\n      .replace('[AGITATION]', 'you ignore it')\n      .replace('[NUMBER]', '1000+')\n      .replace('[COMMON BELIEF]', 'this approach')\n      .replace('[TIME/QUANTITY]', '24 hours');\n  }\n\n  updateQualityScore(data, prompt) {\n    let totalScore = 0;\n    const breakdown = document.getElementById('quality-breakdown');\n    if (!breakdown) return;\n\n    breakdown.innerHTML = '';\n\n    appData.quality_metrics.forEach(metric => {\n      let score = 0;\n      \n      switch(metric.element) {\n        case 'Subject Description':\n          if (data.ageRange || data.gender || data.actorType) score = metric.weight;\n          break;\n        case 'Action/Movement':\n          if (data.productDemo || data.performanceStyle) score = metric.weight;\n          break;\n        case 'Setting/Context':\n          if (data.setting) score = metric.weight;\n          break;\n        case 'Camera Work':\n          if (data.cameraMovement || data.shotComposition) score = metric.weight;\n          break;\n        case 'Audio Elements':\n          if (data.audioEnabled) score = metric.weight;\n          break;\n        case 'Sales Hook':\n          if (data.hookType || data.customHook) score = metric.weight;\n          break;\n        case 'Product Integration':\n          if (data.product && (data.productPlacement || data.productDemo)) score = metric.weight;\n          break;\n      }\n\n      totalScore += score;\n\n      const item = document.createElement('div');\n      item.className = `quality-item ${score > 0 ? 'complete' : ''}`;\n      item.textContent = metric.element;\n      item.title = metric.description;\n      breakdown.appendChild(item);\n    });\n\n    const scoreElement = document.getElementById('quality-score');\n    if (scoreElement) {\n      scoreElement.textContent = totalScore;\n    }\n\n    // Update score circle visual\n    const circle = document.querySelector('.score-circle');\n    if (circle) {\n      const percentage = (totalScore / 100) * 360;\n      circle.style.background = `conic-gradient(var(--color-primary) ${percentage}deg, var(--color-secondary) ${percentage}deg)`;\n    }\n  }\n\n  updateWordCount(prompt) {\n    const wordCount = prompt.split(/\\s+/).filter(word => word.length > 0).length;\n    const wordCountElement = document.getElementById('word-count');\n    if (!wordCountElement) return;\n\n    wordCountElement.textContent = wordCount;\n\n    // Update styling based on word count\n    const wordCountContainer = wordCountElement.parentElement;\n    if (wordCountContainer) {\n      wordCountContainer.className = 'word-count';\n      \n      if (wordCount >= 150 && wordCount <= 200) {\n        wordCountContainer.classList.add('optimal');\n      } else if (wordCount > 200) {\n        wordCountContainer.classList.add('over');\n      }\n    }\n  }\n\n  copyPrompt() {\n    const promptOutput = document.getElementById('prompt-output');\n    if (!promptOutput) return;\n\n    const promptText = promptOutput.textContent || promptOutput.innerText;\n    \n    if (!promptText || promptText.includes('Fill in the form')) {\n      alert('Please generate a prompt first!');\n      return;\n    }\n\n    const button = document.getElementById('copy-prompt');\n    \n    // Use modern clipboard API if available\n    if (navigator.clipboard && window.isSecureContext) {\n      navigator.clipboard.writeText(promptText).then(() => {\n        this.showCopyFeedback(button);\n      }).catch(() => {\n        this.fallbackCopy(promptText, button);\n      });\n    } else {\n      this.fallbackCopy(promptText, button);\n    }\n  }\n\n  showCopyFeedback(button) {\n    if (!button) return;\n    \n    const originalText = button.textContent;\n    button.textContent = 'Copied!';\n    button.classList.add('copied');\n    \n    setTimeout(() => {\n      button.textContent = originalText;\n      button.classList.remove('copied');\n    }, 2000);\n  }\n\n  fallbackCopy(text, button) {\n    try {\n      const textarea = document.createElement('textarea');\n      textarea.value = text;\n      textarea.style.position = 'fixed';\n      textarea.style.opacity = '0';\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      \n      this.showCopyFeedback(button);\n    } catch (err) {\n      alert('Unable to copy to clipboard. Please select and copy the text manually.');\n    }\n  }\n\n  generateRandomSettings() {\n    // Generate random selections for inspiration\n    const randomSelections = {\n      'ugc-type': this.getRandomOption(appData.ugc_types),\n      'setting': this.getRandomOption(appData.settings),\n      'lighting': this.getRandomOption(appData.lighting_types),\n      'actor-type': this.getRandomOption(appData.actor_types),\n      'hook-type': this.getRandomOption(appData.hook_types),\n      'camera-movement': this.getRandomOption(appData.camera_movements),\n      'age-range': ['18-25', '26-35', '36-45'][Math.floor(Math.random() * 3)],\n      'gender': ['', 'female', 'male'][Math.floor(Math.random() * 3)],\n      'performance-style': ['conversational', 'excited', 'calm', 'energetic'][Math.floor(Math.random() * 4)],\n      'authenticity': ['raw', 'polished-amateur', 'semi-professional'][Math.floor(Math.random() * 3)],\n      'shot-composition': ['wide', 'medium', 'close-up'][Math.floor(Math.random() * 3)],\n      'visual-style': ['cinematic', 'documentary', 'social-native'][Math.floor(Math.random() * 3)]\n    };\n\n    // Apply random selections\n    Object.entries(randomSelections).forEach(([fieldId, value]) => {\n      const field = document.getElementById(fieldId);\n      if (field && value) {\n        field.value = value;\n        if (fieldId === 'hook-type') {\n          this.updateHookTemplate(value);\n        }\n      }\n    });\n\n    // Generate new prompt\n    this.generatePrompt();\n\n    // Add visual feedback\n    const button = document.getElementById('generate-random');\n    if (button) {\n      button.style.transform = 'rotate(360deg)';\n      setTimeout(() => {\n        button.style.transform = '';\n      }, 500);\n    }\n  }\n\n  getRandomOption(array) {\n    return array[Math.floor(Math.random() * array.length)].id;\n  }\n\n  loadTemplate(templateId) {\n    if (!templateId) return;\n\n    const template = appData.templates.find(t => t.id === templateId);\n    if (!template) return;\n\n    // Set form values based on template\n    const templateMappings = {\n      'product_review': {\n        'ugc-type': 'review',\n        'actor-type': 'customer_testimonial',\n        'camera-movement': 'handheld',\n        'lighting': 'natural',\n        'performance-style': 'conversational',\n        'authenticity': 'raw'\n      },\n      'unboxing_experience': {\n        'ugc-type': 'unboxing',\n        'product-demo': 'unboxing',\n        'camera-movement': 'close_zoom',\n        'lighting': 'natural',\n        'performance-style': 'excited',\n        'shot-composition': 'close-up'\n      },\n      'problem_solution': {\n        'ugc-type': 'problem_solving',\n        'hook-type': 'problem_agitate_solve',\n        'performance-style': 'emotional',\n        'camera-movement': 'static',\n        'shot-composition': 'medium'\n      }\n    };\n\n    const mapping = templateMappings[templateId];\n    if (mapping) {\n      Object.entries(mapping).forEach(([fieldId, value]) => {\n        const field = document.getElementById(fieldId);\n        if (field) {\n          field.value = value;\n        }\n      });\n\n      // Update hook template if needed\n      if (mapping['hook-type']) {\n        this.updateHookTemplate(mapping['hook-type']);\n      }\n\n      // Generate prompt with template settings\n      this.generatePrompt();\n    }\n\n    // Reset template selector\n    const templateSelector = document.getElementById('template-selector');\n    if (templateSelector) {\n      templateSelector.value = '';\n    }\n  }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM loaded, initializing app...'); // Debug log\n  new Veo3PromptGenerator();\n});","size_bytes":28398},"attached_assets/style_1755985533075.css":{"content":":root {\n  /* Primitive Color Tokens */\n  --color-white: rgba(255, 255, 255, 1);\n  --color-black: rgba(0, 0, 0, 1);\n  --color-cream-50: rgba(252, 252, 249, 1);\n  --color-cream-100: rgba(255, 255, 253, 1);\n  --color-gray-200: rgba(245, 245, 245, 1);\n  --color-gray-300: rgba(167, 169, 169, 1);\n  --color-gray-400: rgba(119, 124, 124, 1);\n  --color-slate-500: rgba(98, 108, 113, 1);\n  --color-brown-600: rgba(94, 82, 64, 1);\n  --color-charcoal-700: rgba(31, 33, 33, 1);\n  --color-charcoal-800: rgba(38, 40, 40, 1);\n  --color-slate-900: rgba(19, 52, 59, 1);\n  --color-teal-300: rgba(50, 184, 198, 1);\n  --color-teal-400: rgba(45, 166, 178, 1);\n  --color-teal-500: rgba(33, 128, 141, 1);\n  --color-teal-600: rgba(29, 116, 128, 1);\n  --color-teal-700: rgba(26, 104, 115, 1);\n  --color-teal-800: rgba(41, 150, 161, 1);\n  --color-red-400: rgba(255, 84, 89, 1);\n  --color-red-500: rgba(192, 21, 47, 1);\n  --color-orange-400: rgba(230, 129, 97, 1);\n  --color-orange-500: rgba(168, 75, 47, 1);\n\n  /* RGB versions for opacity control */\n  --color-brown-600-rgb: 94, 82, 64;\n  --color-teal-500-rgb: 33, 128, 141;\n  --color-slate-900-rgb: 19, 52, 59;\n  --color-slate-500-rgb: 98, 108, 113;\n  --color-red-500-rgb: 192, 21, 47;\n  --color-red-400-rgb: 255, 84, 89;\n  --color-orange-500-rgb: 168, 75, 47;\n  --color-orange-400-rgb: 230, 129, 97;\n\n  /* Background color tokens (Light Mode) */\n  --color-bg-1: rgba(59, 130, 246, 0.08); /* Light blue */\n  --color-bg-2: rgba(245, 158, 11, 0.08); /* Light yellow */\n  --color-bg-3: rgba(34, 197, 94, 0.08); /* Light green */\n  --color-bg-4: rgba(239, 68, 68, 0.08); /* Light red */\n  --color-bg-5: rgba(147, 51, 234, 0.08); /* Light purple */\n  --color-bg-6: rgba(249, 115, 22, 0.08); /* Light orange */\n  --color-bg-7: rgba(236, 72, 153, 0.08); /* Light pink */\n  --color-bg-8: rgba(6, 182, 212, 0.08); /* Light cyan */\n\n  /* Semantic Color Tokens (Light Mode) */\n  --color-background: var(--color-cream-50);\n  --color-surface: var(--color-cream-100);\n  --color-text: var(--color-slate-900);\n  --color-text-secondary: var(--color-slate-500);\n  --color-primary: var(--color-teal-500);\n  --color-primary-hover: var(--color-teal-600);\n  --color-primary-active: var(--color-teal-700);\n  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);\n  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);\n  --color-border: rgba(var(--color-brown-600-rgb), 0.2);\n  --color-btn-primary-text: var(--color-cream-50);\n  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-error: var(--color-red-500);\n  --color-success: var(--color-teal-500);\n  --color-warning: var(--color-orange-500);\n  --color-info: var(--color-slate-500);\n  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);\n  --color-select-caret: rgba(var(--color-slate-900-rgb), 0.8);\n\n  /* Common style patterns */\n  --focus-ring: 0 0 0 3px var(--color-focus-ring);\n  --focus-outline: 2px solid var(--color-primary);\n  --status-bg-opacity: 0.15;\n  --status-border-opacity: 0.25;\n  --select-caret-light: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n  --select-caret-dark: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n\n  /* RGB versions for opacity control */\n  --color-success-rgb: 33, 128, 141;\n  --color-error-rgb: 192, 21, 47;\n  --color-warning-rgb: 168, 75, 47;\n  --color-info-rgb: 98, 108, 113;\n\n  /* Typography */\n  --font-family-base: \"FKGroteskNeue\", \"Geist\", \"Inter\", -apple-system,\n    BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-family-mono: \"Berkeley Mono\", ui-monospace, SFMono-Regular, Menlo,\n    Monaco, Consolas, monospace;\n  --font-size-xs: 11px;\n  --font-size-sm: 12px;\n  --font-size-base: 14px;\n  --font-size-md: 14px;\n  --font-size-lg: 16px;\n  --font-size-xl: 18px;\n  --font-size-2xl: 20px;\n  --font-size-3xl: 24px;\n  --font-size-4xl: 30px;\n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-semibold: 550;\n  --font-weight-bold: 600;\n  --line-height-tight: 1.2;\n  --line-height-normal: 1.5;\n  --letter-spacing-tight: -0.01em;\n\n  /* Spacing */\n  --space-0: 0;\n  --space-1: 1px;\n  --space-2: 2px;\n  --space-4: 4px;\n  --space-6: 6px;\n  --space-8: 8px;\n  --space-10: 10px;\n  --space-12: 12px;\n  --space-16: 16px;\n  --space-20: 20px;\n  --space-24: 24px;\n  --space-32: 32px;\n\n  /* Border Radius */\n  --radius-sm: 6px;\n  --radius-base: 8px;\n  --radius-md: 10px;\n  --radius-lg: 12px;\n  --radius-full: 9999px;\n\n  /* Shadows */\n  --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.02);\n  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.02);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.04),\n    0 2px 4px -1px rgba(0, 0, 0, 0.02);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.04),\n    0 4px 6px -2px rgba(0, 0, 0, 0.02);\n  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.15),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.03);\n\n  /* Animation */\n  --duration-fast: 150ms;\n  --duration-normal: 250ms;\n  --ease-standard: cubic-bezier(0.16, 1, 0.3, 1);\n\n  /* Layout */\n  --container-sm: 640px;\n  --container-md: 768px;\n  --container-lg: 1024px;\n  --container-xl: 1280px;\n}\n\n/* Dark mode colors */\n@media (prefers-color-scheme: dark) {\n  :root {\n    /* RGB versions for opacity control (Dark Mode) */\n    --color-gray-400-rgb: 119, 124, 124;\n    --color-teal-300-rgb: 50, 184, 198;\n    --color-gray-300-rgb: 167, 169, 169;\n    --color-gray-200-rgb: 245, 245, 245;\n\n    /* Background color tokens (Dark Mode) */\n    --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */\n    --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */\n    --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */\n    --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */\n    --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */\n    --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */\n    --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */\n    --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */\n    \n    /* Semantic Color Tokens (Dark Mode) */\n    --color-background: var(--color-charcoal-700);\n    --color-surface: var(--color-charcoal-800);\n    --color-text: var(--color-gray-200);\n    --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);\n    --color-primary: var(--color-teal-300);\n    --color-primary-hover: var(--color-teal-400);\n    --color-primary-active: var(--color-teal-800);\n    --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);\n    --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);\n    --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);\n    --color-border: rgba(var(--color-gray-400-rgb), 0.3);\n    --color-error: var(--color-red-400);\n    --color-success: var(--color-teal-300);\n    --color-warning: var(--color-orange-400);\n    --color-info: var(--color-gray-300);\n    --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);\n    --color-btn-primary-text: var(--color-slate-900);\n    --color-card-border: rgba(var(--color-gray-400-rgb), 0.2);\n    --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);\n    --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),\n      inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n    --button-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);\n    --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);\n    --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);\n\n    /* Common style patterns - updated for dark mode */\n    --focus-ring: 0 0 0 3px var(--color-focus-ring);\n    --focus-outline: 2px solid var(--color-primary);\n    --status-bg-opacity: 0.15;\n    --status-border-opacity: 0.25;\n    --select-caret-light: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n    --select-caret-dark: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n\n    /* RGB versions for dark mode */\n    --color-success-rgb: var(--color-teal-300-rgb);\n    --color-error-rgb: var(--color-red-400-rgb);\n    --color-warning-rgb: var(--color-orange-400-rgb);\n    --color-info-rgb: var(--color-gray-300-rgb);\n  }\n}\n\n/* Data attribute for manual theme switching */\n[data-color-scheme=\"dark\"] {\n  /* RGB versions for opacity control (dark mode) */\n  --color-gray-400-rgb: 119, 124, 124;\n  --color-teal-300-rgb: 50, 184, 198;\n  --color-gray-300-rgb: 167, 169, 169;\n  --color-gray-200-rgb: 245, 245, 245;\n\n  /* Colorful background palette - Dark Mode */\n  --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */\n  --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */\n  --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */\n  --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */\n  --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */\n  --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */\n  --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */\n  --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */\n  \n  /* Semantic Color Tokens (Dark Mode) */\n  --color-background: var(--color-charcoal-700);\n  --color-surface: var(--color-charcoal-800);\n  --color-text: var(--color-gray-200);\n  --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);\n  --color-primary: var(--color-teal-300);\n  --color-primary-hover: var(--color-teal-400);\n  --color-primary-active: var(--color-teal-800);\n  --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);\n  --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);\n  --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);\n  --color-border: rgba(var(--color-gray-400-rgb), 0.3);\n  --color-error: var(--color-red-400);\n  --color-success: var(--color-teal-300);\n  --color-warning: var(--color-orange-400);\n  --color-info: var(--color-gray-300);\n  --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);\n  --color-btn-primary-text: var(--color-slate-900);\n  --color-card-border: rgba(var(--color-gray-400-rgb), 0.15);\n  --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);\n  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);\n  --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);\n\n  /* Common style patterns - updated for dark mode */\n  --focus-ring: 0 0 0 3px var(--color-focus-ring);\n  --focus-outline: 2px solid var(--color-primary);\n  --status-bg-opacity: 0.15;\n  --status-border-opacity: 0.25;\n  --select-caret-light: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n  --select-caret-dark: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n\n  /* RGB versions for dark mode */\n  --color-success-rgb: var(--color-teal-300-rgb);\n  --color-error-rgb: var(--color-red-400-rgb);\n  --color-warning-rgb: var(--color-orange-400-rgb);\n  --color-info-rgb: var(--color-gray-300-rgb);\n}\n\n[data-color-scheme=\"light\"] {\n  /* RGB versions for opacity control (light mode) */\n  --color-brown-600-rgb: 94, 82, 64;\n  --color-teal-500-rgb: 33, 128, 141;\n  --color-slate-900-rgb: 19, 52, 59;\n  \n  /* Semantic Color Tokens (Light Mode) */\n  --color-background: var(--color-cream-50);\n  --color-surface: var(--color-cream-100);\n  --color-text: var(--color-slate-900);\n  --color-text-secondary: var(--color-slate-500);\n  --color-primary: var(--color-teal-500);\n  --color-primary-hover: var(--color-teal-600);\n  --color-primary-active: var(--color-teal-700);\n  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);\n  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);\n  --color-border: rgba(var(--color-brown-600-rgb), 0.2);\n  --color-btn-primary-text: var(--color-cream-50);\n  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);\n  --color-error: var(--color-red-500);\n  --color-success: var(--color-teal-500);\n  --color-warning: var(--color-orange-500);\n  --color-info: var(--color-slate-500);\n  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);\n\n  /* RGB versions for light mode */\n  --color-success-rgb: var(--color-teal-500-rgb);\n  --color-error-rgb: var(--color-red-500-rgb);\n  --color-warning-rgb: var(--color-orange-500-rgb);\n  --color-info-rgb: var(--color-slate-500-rgb);\n}\n\n/* Base styles */\nhtml {\n  font-size: var(--font-size-base);\n  font-family: var(--font-family-base);\n  line-height: var(--line-height-normal);\n  color: var(--color-text);\n  background-color: var(--color-background);\n  -webkit-font-smoothing: antialiased;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n/* Typography */\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n  font-weight: var(--font-weight-semibold);\n  line-height: var(--line-height-tight);\n  color: var(--color-text);\n  letter-spacing: var(--letter-spacing-tight);\n}\n\nh1 {\n  font-size: var(--font-size-4xl);\n}\nh2 {\n  font-size: var(--font-size-3xl);\n}\nh3 {\n  font-size: var(--font-size-2xl);\n}\nh4 {\n  font-size: var(--font-size-xl);\n}\nh5 {\n  font-size: var(--font-size-lg);\n}\nh6 {\n  font-size: var(--font-size-md);\n}\n\np {\n  margin: 0 0 var(--space-16) 0;\n}\n\na {\n  color: var(--color-primary);\n  text-decoration: none;\n  transition: color var(--duration-fast) var(--ease-standard);\n}\n\na:hover {\n  color: var(--color-primary-hover);\n}\n\ncode,\npre {\n  font-family: var(--font-family-mono);\n  font-size: calc(var(--font-size-base) * 0.95);\n  background-color: var(--color-secondary);\n  border-radius: var(--radius-sm);\n}\n\ncode {\n  padding: var(--space-1) var(--space-4);\n}\n\npre {\n  padding: var(--space-16);\n  margin: var(--space-16) 0;\n  overflow: auto;\n  border: 1px solid var(--color-border);\n}\n\npre code {\n  background: none;\n  padding: 0;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--space-8) var(--space-16);\n  border-radius: var(--radius-base);\n  font-size: var(--font-size-base);\n  font-weight: 500;\n  line-height: 1.5;\n  cursor: pointer;\n  transition: all var(--duration-normal) var(--ease-standard);\n  border: none;\n  text-decoration: none;\n  position: relative;\n}\n\n.btn:focus-visible {\n  outline: none;\n  box-shadow: var(--focus-ring);\n}\n\n.btn--primary {\n  background: var(--color-primary);\n  color: var(--color-btn-primary-text);\n}\n\n.btn--primary:hover {\n  background: var(--color-primary-hover);\n}\n\n.btn--primary:active {\n  background: var(--color-primary-active);\n}\n\n.btn--secondary {\n  background: var(--color-secondary);\n  color: var(--color-text);\n}\n\n.btn--secondary:hover {\n  background: var(--color-secondary-hover);\n}\n\n.btn--secondary:active {\n  background: var(--color-secondary-active);\n}\n\n.btn--outline {\n  background: transparent;\n  border: 1px solid var(--color-border);\n  color: var(--color-text);\n}\n\n.btn--outline:hover {\n  background: var(--color-secondary);\n}\n\n.btn--sm {\n  padding: var(--space-4) var(--space-12);\n  font-size: var(--font-size-sm);\n  border-radius: var(--radius-sm);\n}\n\n.btn--lg {\n  padding: var(--space-10) var(--space-20);\n  font-size: var(--font-size-lg);\n  border-radius: var(--radius-md);\n}\n\n.btn--full-width {\n  width: 100%;\n}\n\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* Form elements */\n.form-control {\n  display: block;\n  width: 100%;\n  padding: var(--space-8) var(--space-12);\n  font-size: var(--font-size-md);\n  line-height: 1.5;\n  color: var(--color-text);\n  background-color: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--radius-base);\n  transition: border-color var(--duration-fast) var(--ease-standard),\n    box-shadow var(--duration-fast) var(--ease-standard);\n}\n\ntextarea.form-control {\n  font-family: var(--font-family-base);\n  font-size: var(--font-size-base);\n}\n\nselect.form-control {\n  padding: var(--space-8) var(--space-12);\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-image: var(--select-caret-light);\n  background-repeat: no-repeat;\n  background-position: right var(--space-12) center;\n  background-size: 16px;\n  padding-right: var(--space-32);\n}\n\n/* Add a dark mode specific caret */\n@media (prefers-color-scheme: dark) {\n  select.form-control {\n    background-image: var(--select-caret-dark);\n  }\n}\n\n/* Also handle data-color-scheme */\n[data-color-scheme=\"dark\"] select.form-control {\n  background-image: var(--select-caret-dark);\n}\n\n[data-color-scheme=\"light\"] select.form-control {\n  background-image: var(--select-caret-light);\n}\n\n.form-control:focus {\n  border-color: var(--color-primary);\n  outline: var(--focus-outline);\n}\n\n.form-label {\n  display: block;\n  margin-bottom: var(--space-8);\n  font-weight: var(--font-weight-medium);\n  font-size: var(--font-size-sm);\n}\n\n.form-group {\n  margin-bottom: var(--space-16);\n}\n\n/* Card component */\n.card {\n  background-color: var(--color-surface);\n  border-radius: var(--radius-lg);\n  border: 1px solid var(--color-card-border);\n  box-shadow: var(--shadow-sm);\n  overflow: hidden;\n  transition: box-shadow var(--duration-normal) var(--ease-standard);\n}\n\n.card:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.card__body {\n  padding: var(--space-16);\n}\n\n.card__header,\n.card__footer {\n  padding: var(--space-16);\n  border-bottom: 1px solid var(--color-card-border-inner);\n}\n\n/* Status indicators - simplified with CSS variables */\n.status {\n  display: inline-flex;\n  align-items: center;\n  padding: var(--space-6) var(--space-12);\n  border-radius: var(--radius-full);\n  font-weight: var(--font-weight-medium);\n  font-size: var(--font-size-sm);\n}\n\n.status--success {\n  background-color: rgba(\n    var(--color-success-rgb, 33, 128, 141),\n    var(--status-bg-opacity)\n  );\n  color: var(--color-success);\n  border: 1px solid\n    rgba(var(--color-success-rgb, 33, 128, 141), var(--status-border-opacity));\n}\n\n.status--error {\n  background-color: rgba(\n    var(--color-error-rgb, 192, 21, 47),\n    var(--status-bg-opacity)\n  );\n  color: var(--color-error);\n  border: 1px solid\n    rgba(var(--color-error-rgb, 192, 21, 47), var(--status-border-opacity));\n}\n\n.status--warning {\n  background-color: rgba(\n    var(--color-warning-rgb, 168, 75, 47),\n    var(--status-bg-opacity)\n  );\n  color: var(--color-warning);\n  border: 1px solid\n    rgba(var(--color-warning-rgb, 168, 75, 47), var(--status-border-opacity));\n}\n\n.status--info {\n  background-color: rgba(\n    var(--color-info-rgb, 98, 108, 113),\n    var(--status-bg-opacity)\n  );\n  color: var(--color-info);\n  border: 1px solid\n    rgba(var(--color-info-rgb, 98, 108, 113), var(--status-border-opacity));\n}\n\n/* Container layout */\n.container {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-right: var(--space-16);\n  padding-left: var(--space-16);\n}\n\n@media (min-width: 640px) {\n  .container {\n    max-width: var(--container-sm);\n  }\n}\n@media (min-width: 768px) {\n  .container {\n    max-width: var(--container-md);\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: var(--container-lg);\n  }\n}\n@media (min-width: 1280px) {\n  .container {\n    max-width: var(--container-xl);\n  }\n}\n\n/* Utility classes */\n.flex {\n  display: flex;\n}\n.flex-col {\n  flex-direction: column;\n}\n.items-center {\n  align-items: center;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-4 {\n  gap: var(--space-4);\n}\n.gap-8 {\n  gap: var(--space-8);\n}\n.gap-16 {\n  gap: var(--space-16);\n}\n\n.m-0 {\n  margin: 0;\n}\n.mt-8 {\n  margin-top: var(--space-8);\n}\n.mb-8 {\n  margin-bottom: var(--space-8);\n}\n.mx-8 {\n  margin-left: var(--space-8);\n  margin-right: var(--space-8);\n}\n.my-8 {\n  margin-top: var(--space-8);\n  margin-bottom: var(--space-8);\n}\n\n.p-0 {\n  padding: 0;\n}\n.py-8 {\n  padding-top: var(--space-8);\n  padding-bottom: var(--space-8);\n}\n.px-8 {\n  padding-left: var(--space-8);\n  padding-right: var(--space-8);\n}\n.py-16 {\n  padding-top: var(--space-16);\n  padding-bottom: var(--space-16);\n}\n.px-16 {\n  padding-left: var(--space-16);\n  padding-right: var(--space-16);\n}\n\n.block {\n  display: block;\n}\n.hidden {\n  display: none;\n}\n\n/* Accessibility */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n:focus-visible {\n  outline: var(--focus-outline);\n  outline-offset: 2px;\n}\n\n/* Dark mode specifics */\n[data-color-scheme=\"dark\"] .btn--outline {\n  border: 1px solid var(--color-border-secondary);\n}\n\n@font-face {\n  font-family: 'FKGroteskNeue';\n  src: url('https://r2cdn.perplexity.ai/fonts/FKGroteskNeue.woff2')\n    format('woff2');\n}\n\n/* END PERPLEXITY DESIGN SYSTEM */\n/* Application-specific styles */\nbody {\n  background-color: var(--color-background);\n  color: var(--color-text);\n  font-family: var(--font-family-base);\n  margin: 0;\n  padding: 0;\n}\n\n.header {\n  text-align: center;\n  padding: var(--space-32) var(--space-16);\n  background: linear-gradient(135deg, var(--color-bg-1), var(--color-bg-8));\n  border-bottom: 1px solid var(--color-border);\n}\n\n.header h1 {\n  font-size: var(--font-size-4xl);\n  font-weight: var(--font-weight-bold);\n  margin-bottom: var(--space-8);\n  color: var(--color-text);\n}\n\n.subtitle {\n  font-size: var(--font-size-lg);\n  color: var(--color-text-secondary);\n  margin: 0;\n}\n\n.app-layout {\n  display: flex;\n  flex-direction: column;\n  min-height: calc(100vh - 200px);\n}\n\n.tab-navigation {\n  display: flex;\n  background-color: var(--color-surface);\n  border-bottom: 1px solid var(--color-border);\n  padding: 0 var(--space-16);\n  overflow-x: auto;\n}\n\n.tab-btn {\n  background: none;\n  border: none;\n  padding: var(--space-16) var(--space-24);\n  font-size: var(--font-size-base);\n  font-weight: var(--font-weight-medium);\n  color: var(--color-text-secondary);\n  cursor: pointer;\n  transition: all var(--duration-normal) var(--ease-standard);\n  border-bottom: 2px solid transparent;\n  white-space: nowrap;\n}\n\n.tab-btn:hover {\n  color: var(--color-text);\n  background-color: var(--color-secondary);\n}\n\n.tab-btn.active {\n  color: var(--color-primary);\n  border-bottom-color: var(--color-primary);\n  background-color: var(--color-secondary);\n}\n\n.main-content {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-24);\n  padding: var(--space-24);\n  min-height: 600px;\n}\n\n.form-container {\n  background-color: var(--color-surface);\n  border: 1px solid var(--color-card-border);\n  border-radius: var(--radius-lg);\n  padding: var(--space-24);\n  box-shadow: var(--shadow-sm);\n}\n\n.tab-content {\n  display: none;\n}\n\n.tab-content.active {\n  display: block;\n}\n\n.tab-content h2 {\n  margin-bottom: var(--space-24);\n  font-size: var(--font-size-2xl);\n  color: var(--color-text);\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-16);\n  margin-bottom: var(--space-16);\n}\n\n.form-group {\n  margin-bottom: var(--space-16);\n}\n\n.help-text {\n  display: block;\n  margin-top: var(--space-4);\n  font-size: var(--font-size-sm);\n  color: var(--color-text-secondary);\n}\n\n.preview-container {\n  background-color: var(--color-surface);\n  border: 1px solid var(--color-card-border);\n  border-radius: var(--radius-lg);\n  padding: var(--space-24);\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  flex-direction: column;\n}\n\n.preview-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--space-16);\n  flex-wrap: wrap;\n  gap: var(--space-16);\n}\n\n.preview-header h3 {\n  margin: 0;\n  font-size: var(--font-size-xl);\n  color: var(--color-text);\n}\n\n.preview-actions {\n  display: flex;\n  gap: var(--space-8);\n  align-items: center;\n}\n\n.template-select {\n  width: 140px;\n  font-size: var(--font-size-sm);\n}\n\n.prompt-preview {\n  flex: 1;\n  background-color: var(--color-bg-1);\n  border: 1px solid var(--color-border);\n  border-radius: var(--radius-base);\n  padding: var(--space-16);\n  font-family: var(--font-family-mono);\n  font-size: var(--font-size-sm);\n  line-height: 1.6;\n  min-height: 200px;\n  overflow-y: auto;\n}\n\n.placeholder-text {\n  color: var(--color-text-secondary);\n  font-style: italic;\n  font-family: var(--font-family-base);\n  text-align: center;\n  margin-top: var(--space-32);\n}\n\n.quality-metrics {\n  margin-top: var(--space-24);\n  padding: var(--space-16);\n  background-color: var(--color-bg-2);\n  border-radius: var(--radius-base);\n}\n\n.quality-metrics h4 {\n  margin: 0 0 var(--space-16) 0;\n  font-size: var(--font-size-lg);\n  color: var(--color-text);\n}\n\n.quality-score {\n  display: flex;\n  align-items: center;\n  gap: var(--space-16);\n  margin-bottom: var(--space-16);\n}\n\n.score-circle {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: conic-gradient(var(--color-primary) 0deg, var(--color-secondary) 0deg);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-lg);\n  font-weight: var(--font-weight-bold);\n  color: var(--color-text);\n  position: relative;\n}\n\n.score-circle::before {\n  content: '';\n  position: absolute;\n  width: 44px;\n  height: 44px;\n  background-color: var(--color-surface);\n  border-radius: 50%;\n  z-index: -1;\n}\n\n.quality-breakdown {\n  flex: 1;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: var(--space-8);\n}\n\n.quality-item {\n  padding: var(--space-4);\n  background-color: var(--color-surface);\n  border-radius: var(--radius-sm);\n  font-size: var(--font-size-xs);\n  text-align: center;\n}\n\n.quality-item.complete {\n  background-color: var(--color-bg-3);\n  color: var(--color-success);\n}\n\n.word-count {\n  font-size: var(--font-size-sm);\n  color: var(--color-text-secondary);\n  text-align: center;\n}\n\n.word-count.optimal {\n  color: var(--color-success);\n}\n\n.word-count.over {\n  color: var(--color-warning);\n}\n\n.best-practices {\n  margin-top: var(--space-16);\n  padding: var(--space-16);\n  background-color: var(--color-bg-3);\n  border-radius: var(--radius-base);\n}\n\n.best-practices h4 {\n  margin: 0 0 var(--space-12) 0;\n  font-size: var(--font-size-base);\n  color: var(--color-text);\n}\n\n.best-practices ul {\n  margin: 0;\n  padding-left: var(--space-16);\n  list-style-type: none;\n}\n\n.best-practices li {\n  position: relative;\n  padding-left: var(--space-16);\n  margin-bottom: var(--space-8);\n  font-size: var(--font-size-sm);\n  color: var(--color-text-secondary);\n}\n\n.best-practices li::before {\n  content: '✓';\n  position: absolute;\n  left: 0;\n  color: var(--color-success);\n  font-weight: var(--font-weight-bold);\n}\n\n.hook-template {\n  margin-top: var(--space-16);\n  padding: var(--space-16);\n  background-color: var(--color-bg-4);\n  border-radius: var(--radius-base);\n  border-left: 4px solid var(--color-primary);\n}\n\n.hook-template h4 {\n  margin: 0 0 var(--space-8) 0;\n  font-size: var(--font-size-base);\n  color: var(--color-text);\n}\n\n.hook-template p {\n  margin: 0;\n  font-style: italic;\n  color: var(--color-text-secondary);\n  font-size: var(--font-size-sm);\n}\n\n/* Responsive design */\n@media (max-width: 1024px) {\n  .main-content {\n    grid-template-columns: 1fr;\n    gap: var(--space-16);\n  }\n\n  .form-row {\n    grid-template-columns: 1fr;\n  }\n\n  .preview-actions {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .template-select {\n    width: 100%;\n  }\n}\n\n@media (max-width: 768px) {\n  .header h1 {\n    font-size: var(--font-size-3xl);\n  }\n\n  .tab-navigation {\n    padding: 0 var(--space-8);\n  }\n\n  .tab-btn {\n    padding: var(--space-12) var(--space-16);\n    font-size: var(--font-size-sm);\n  }\n\n  .main-content {\n    padding: var(--space-16);\n  }\n\n  .form-container,\n  .preview-container {\n    padding: var(--space-16);\n  }\n\n  .quality-breakdown {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Copy animation */\n.copied {\n  background-color: var(--color-success) !important;\n  color: var(--color-surface) !important;\n  transform: scale(0.95);\n}\n\n/* Loading state */\n.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n/* Custom checkbox styling */\ninput[type=\"checkbox\"] {\n  margin-right: var(--space-8);\n  transform: scale(1.2);\n}\n\n/* Enhanced prompt preview styling */\n.generated-prompt {\n  font-family: var(--font-family-mono);\n  line-height: 1.5;\n  color: var(--color-text);\n}\n\n.prompt-section {\n  margin-bottom: var(--space-12);\n}\n\n.prompt-section strong {\n  color: var(--color-primary);\n  display: block;\n  margin-bottom: var(--space-4);\n  font-family: var(--font-family-base);\n  font-size: var(--font-size-sm);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Random inspiration button animation */\n#generate-random:hover {\n  transform: rotate(5deg);\n  transition: transform var(--duration-fast) var(--ease-standard);\n}\n\n/* Template selector enhancement */\n.template-select:focus {\n  border-color: var(--color-primary);\n  box-shadow: var(--focus-ring);\n}","size_bytes":29842},"static/css/style.css":{"content":"/* CSS Custom Properties */\n:root {\n  /* Colors */\n  --primary-50: #f0f9ff;\n  --primary-100: #e0f2fe;\n  --primary-200: #bae6fd;\n  --primary-300: #7dd3fc;\n  --primary-400: #38bdf8;\n  --primary-500: #0ea5e9;\n  --primary-600: #0284c7;\n  --primary-700: #0369a1;\n  --primary-800: #075985;\n  --primary-900: #0c4a6e;\n\n  /* Gradient colors */\n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  --gradient-accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n  --gradient-warm: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\n  --gradient-cool: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n\n  --gray-50: #f9fafb;\n  --gray-100: #f3f4f6;\n  --gray-200: #e5e7eb;\n  --gray-300: #d1d5db;\n  --gray-400: #9ca3af;\n  --gray-500: #6b7280;\n  --gray-600: #4b5563;\n  --gray-700: #374151;\n  --gray-800: #1f2937;\n  --gray-900: #111827;\n\n  --success-400: #4ade80;\n  --success-500: #22c55e;\n  --error-400: #f87171;\n  --error-500: #ef4444;\n  --warning-400: #fbbf24;\n  --warning-500: #f59e0b;\n\n  /* Dark theme (default) */\n  --bg-primary: #0f172a;\n  --bg-secondary: #1e293b;\n  --bg-tertiary: #334155;\n  --bg-elevated: #1e293b;\n\n  --text-primary: #f1f5f9;\n  --text-secondary: #cbd5e1;\n  --text-tertiary: #94a3b8;\n  --text-inverse: #0f172a;\n\n  --border-primary: #334155;\n  --border-secondary: #475569;\n  --border-active: var(--primary-400);\n\n  /* Spacing */\n  --space-1: 0.25rem;\n  --space-2: 0.5rem;\n  --space-3: 0.75rem;\n  --space-4: 1rem;\n  --space-5: 1.25rem;\n  --space-6: 1.5rem;\n  --space-8: 2rem;\n  --space-10: 2.5rem;\n  --space-12: 3rem;\n  --space-16: 4rem;\n  --space-20: 5rem;\n\n  /* Border radius */\n  --radius-sm: 0.375rem;\n  --radius-md: 0.5rem;\n  --radius-lg: 0.75rem;\n  --radius-xl: 1rem;\n  --radius-2xl: 1.5rem;\n  --radius-full: 9999px;\n\n  /* Shadows */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n\n  /* Transitions */\n  --transition-fast: 150ms ease;\n  --transition-normal: 250ms ease;\n  --transition-slow: 300ms ease;\n}\n\n/* Light theme (optional) */\n[data-theme=\"light\"] {\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8fafc;\n  --bg-tertiary: #f1f5f9;\n  --bg-elevated: #ffffff;\n\n  --text-primary: var(--gray-900);\n  --text-secondary: var(--gray-600);\n  --text-tertiary: var(--gray-500);\n  --text-inverse: #ffffff;\n\n  --border-primary: var(--gray-200);\n  --border-secondary: var(--gray-300);\n}\n\n/* Base styles */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  line-height: 1.6;\n  transition: background-color var(--transition-normal), color var(--transition-normal);\n}\n\n/* App Container */\n.app-container {\n  min-height: 100vh;\n  background: var(--bg-primary);\n}\n\n/* Header */\n.app-header {\n  background: var(--bg-primary);\n  border-bottom: 1px solid var(--border-primary);\n  padding: var(--space-8) 0;\n  box-shadow: var(--shadow-lg);\n  position: relative;\n  overflow: hidden;\n}\n\n.app-header::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: radial-gradient(circle at 20% 50%, rgba(255, 255, 255, 0.02) 0%, transparent 50%),\n              radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.01) 0%, transparent 50%);\n  pointer-events: none;\n  z-index: 0;\n}\n\n.header-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 var(--space-6);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.header-branding h1 {\n  margin: 0;\n  font-size: 2rem;\n  font-weight: 700;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  position: relative;\n  z-index: 5;\n}\n\n.header-branding h1 i {\n  color: #ffffff;\n  font-size: 2.25rem;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n}\n\n.header-branding .header-subtitle {\n  margin: var(--space-2) 0 0;\n  color: rgba(255, 255, 255, 0.9);\n  font-size: 1.125rem;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n  position: relative;\n  z-index: 1;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  position: relative;\n  z-index: 10;\n}\n\n/* Main Content */\n.app-main {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: var(--space-8) var(--space-6);\n}\n\n/* Studio Progress Navigation */\n.studio-tabs {\n  margin-bottom: var(--space-12);\n}\n\n.tab-nav {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  padding: var(--space-8) var(--space-4);\n  overflow-x: auto;\n  background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);\n  border-radius: var(--radius-2xl);\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.tab-nav::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 12%;\n  right: 12%;\n  height: 4px;\n  background: linear-gradient(90deg, var(--border-primary) 0%, var(--border-secondary) 50%, var(--border-primary) 100%);\n  transform: translateY(-50%);\n  border-radius: var(--radius-full);\n  z-index: 1;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.progress-line {\n  position: absolute;\n  top: 50%;\n  left: 12%;\n  height: 4px;\n  background: linear-gradient(90deg, var(--success-500) 0%, var(--success-400) 50%, var(--primary-400) 100%);\n  transform: translateY(-50%);\n  border-radius: var(--radius-full);\n  z-index: 2;\n  transition: width 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  box-shadow: 0 0 12px rgba(34, 197, 94, 0.4), 0 2px 4px rgba(34, 197, 94, 0.2);\n  width: 0%;\n}\n\n.progress-line::after {\n  content: '';\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  width: 8px;\n  height: 8px;\n  background: var(--success-400);\n  border-radius: 50%;\n  box-shadow: 0 0 8px rgba(34, 197, 94, 0.6);\n  animation: progressPulse 2s ease-in-out infinite;\n}\n\n@keyframes progressPulse {\n  0%, 100% { \n    transform: scale(1);\n    opacity: 1;\n  }\n  50% { \n    transform: scale(1.3);\n    opacity: 0.8;\n  }\n}\n\n.tab-btn {\n  background: var(--bg-elevated);\n  border: 3px solid var(--border-primary);\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  cursor: pointer;\n  transition: all var(--transition-normal);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  z-index: 3;\n  flex-shrink: 0;\n  margin: 0 calc(15% / 4);\n  box-shadow: var(--shadow-md);\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  touch-action: manipulation;\n  outline: none;\n}\n\n.tab-btn::before {\n  content: '';\n  position: absolute;\n  inset: -3px;\n  background: var(--gradient-accent);\n  border-radius: 50%;\n  opacity: 0;\n  transition: opacity var(--transition-normal);\n}\n\n.tab-btn::after {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: var(--bg-elevated);\n  border-radius: 50%;\n  z-index: -1;\n}\n\n.tab-btn i {\n  font-size: 1.5rem;\n  color: var(--text-secondary);\n  position: relative;\n  z-index: 1;\n  transition: all var(--transition-normal);\n}\n\n.tab-btn .tab-label {\n  position: absolute;\n  top: calc(100% + var(--space-3));\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 0.75rem;\n  font-weight: 600;\n  color: var(--text-tertiary);\n  white-space: nowrap;\n  transition: all var(--transition-normal);\n  text-align: center;\n}\n\n.tab-btn:hover:not(.active):not(.completed) {\n  border-color: var(--primary-300);\n  transform: translateY(-3px) scale(1.05);\n  box-shadow: var(--shadow-lg);\n}\n\n.tab-btn:hover:not(.active):not(.completed) i {\n  color: var(--primary-400);\n}\n\n.tab-btn:hover:not(.active):not(.completed) .tab-label {\n  color: var(--text-secondary);\n}\n\n.tab-btn.completed {\n  border-color: var(--success-400);\n  background: linear-gradient(135deg, var(--success-900), var(--success-800));\n}\n\n.tab-btn.completed i {\n  color: var(--success-400);\n}\n\n.tab-btn.completed .tab-label {\n  color: var(--success-400);\n}\n\n.tab-btn.active {\n  border-color: var(--border-secondary);\n  background: var(--bg-tertiary);\n  transform: translateY(-3px) scale(1.1);\n  box-shadow: var(--shadow-lg);\n}\n\n.tab-btn.active::before {\n  opacity: 0;\n}\n\n.tab-btn.active i {\n  color: var(--text-primary);\n  animation: pulse 2s ease-in-out infinite;\n}\n\n.tab-btn.active .tab-label {\n  color: var(--text-primary);\n  font-weight: 700;\n  transform: translateX(-50%) translateY(-2px);\n}\n\n.tab-btn:focus {\n  outline: 2px solid var(--primary-400);\n  outline-offset: 4px;\n}\n\n.tab-btn:active {\n  transform: translateY(-1px) scale(1.02);\n  transition: all 0.1s ease;\n}\n\n/* Tab Panels - Enhanced with smooth transitions */\n.tab-panel {\n  display: none;\n  opacity: 0;\n  transform: translateY(20px);\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.tab-panel.active {\n  display: block;\n  opacity: 1;\n  transform: translateY(0);\n  animation: slideInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.tab-panel.exiting {\n  opacity: 0;\n  transform: translateY(-20px);\n}\n\n.panel-header {\n  text-align: center;\n  margin-bottom: var(--space-8);\n}\n\n.panel-header h2 {\n  font-size: 2rem;\n  font-weight: 700;\n  color: var(--text-primary);\n  margin: 0 0 var(--space-2);\n}\n\n.panel-header p {\n  color: var(--text-secondary);\n  font-size: 1.125rem;\n  margin: 0;\n}\n\n/* Product Grid */\n.product-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-6);\n  margin-bottom: var(--space-8);\n}\n\n/* Cards */\n.info-card,\n.analysis-card,\n.section-card {\n  background: var(--bg-elevated);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-xl);\n  padding: var(--space-6);\n  box-shadow: var(--shadow-sm);\n  transition: all var(--transition-normal);\n  position: relative;\n  overflow: hidden;\n}\n\n.info-card::before,\n.analysis-card::before,\n.section-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: var(--gradient-accent);\n  transform: scaleX(0);\n  transition: transform var(--transition-normal);\n}\n\n.info-card:hover,\n.analysis-card:hover,\n.section-card:hover {\n  box-shadow: var(--shadow-xl);\n  transform: translateY(-4px);\n}\n\n.info-card:hover::before,\n.analysis-card:hover::before,\n.section-card:hover::before {\n  transform: scaleX(1);\n}\n\n.card-header {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  margin-bottom: var(--space-6);\n}\n\n.card-header i {\n  font-size: 1.5rem;\n  color: var(--primary-500);\n}\n\n.card-header h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n/* Form Fields */\n.form-field {\n  margin-bottom: var(--space-5);\n}\n\n.form-field label {\n  display: block;\n  font-weight: 500;\n  color: var(--text-primary);\n  margin-bottom: var(--space-2);\n}\n\n.form-field input,\n.form-field textarea {\n  width: 100%;\n  padding: var(--space-3) var(--space-4);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-md);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  transition: border-color var(--transition-fast);\n}\n\n.form-field input:focus,\n.form-field textarea:focus {\n  outline: none;\n  border-color: var(--primary-500);\n  box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);\n}\n\n/* Content Type Grid */\n.content-type-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: var(--space-3);\n}\n\n.content-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: var(--space-2);\n  padding: var(--space-4);\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n  text-align: center;\n}\n\n.content-card:hover {\n  background: var(--bg-tertiary);\n  border-color: var(--primary-300);\n  transform: translateY(-2px);\n}\n\n.content-card.active {\n  background: var(--bg-tertiary);\n  border-color: var(--success-400);\n  color: var(--text-primary);\n}\n\n.content-card.active i {\n  color: var(--success-400);\n}\n\n.content-card i {\n  font-size: 1.5rem;\n  color: var(--primary-500);\n}\n\n.content-card span {\n  font-weight: 500;\n  font-size: 0.875rem;\n}\n\n/* Method Options */\n.method-options {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-4);\n  margin-bottom: var(--space-6);\n}\n\n.method-card {\n  padding: var(--space-6);\n  background: var(--bg-secondary);\n  border: 2px solid var(--border-primary);\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  transition: all var(--transition-normal);\n  text-align: center;\n  position: relative;\n}\n\n.method-card:hover {\n  border-color: var(--primary-300);\n  transform: translateY(-2px);\n}\n\n.method-card.active {\n  border-color: var(--success-400);\n  background: var(--bg-tertiary);\n}\n\n.method-card.active i {\n  color: var(--success-400);\n}\n\n.method-card i {\n  font-size: 2rem;\n  color: var(--primary-500);\n  margin-bottom: var(--space-3);\n}\n\n.method-card h4 {\n  margin: 0 0 var(--space-2);\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.method-card p {\n  margin: 0 0 var(--space-3);\n  color: var(--text-secondary);\n  font-size: 0.875rem;\n}\n\n.cost-badge,\n.free-badge {\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-full);\n  font-size: 0.75rem;\n  font-weight: 500;\n  position: absolute;\n  top: var(--space-2);\n  right: var(--space-2);\n}\n\n.cost-badge {\n  background: var(--warning-900);\n  color: var(--warning-300);\n}\n\n.free-badge {\n  background: var(--success-900);\n  color: var(--success-300);\n}\n\n.optimal-badge {\n  background: var(--primary-600);\n  color: white;\n}\n\n/* Upload Zone - Enhanced */\n.upload-zone {\n  border: 3px dashed var(--border-secondary);\n  border-radius: var(--radius-xl);\n  padding: var(--space-12);\n  text-align: center;\n  cursor: pointer;\n  transition: all var(--transition-normal);\n  background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);\n  position: relative;\n  overflow: hidden;\n}\n\n.upload-zone::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--gradient-cool);\n  opacity: 0;\n  transition: opacity var(--transition-normal);\n}\n\n.upload-zone:hover {\n  border-color: var(--primary-400);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-lg);\n}\n\n.upload-zone:hover::before {\n  opacity: 0.1;\n}\n\n.upload-zone:hover i {\n  transform: scale(1.1);\n  color: var(--primary-400);\n}\n\n.upload-zone.dragover {\n  border-color: var(--primary-400);\n  background: var(--primary-900);\n  transform: scale(1.02);\n  animation: pulse 1s ease-in-out infinite;\n}\n\n.upload-zone.dragover i {\n  animation: bounce 0.6s ease-in-out infinite;\n}\n\n.upload-zone.uploading {\n  border-color: var(--success-400);\n  pointer-events: none;\n}\n\n.upload-zone.uploading::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  height: 4px;\n  background: var(--success-400);\n  animation: uploadProgress 2s ease-in-out;\n  border-radius: 0 0 var(--radius-xl) var(--radius-xl);\n}\n\n.upload-zone i,\n.upload-zone h4,\n.upload-zone p,\n.upload-zone small {\n  position: relative;\n  z-index: 1;\n  transition: all var(--transition-normal);\n}\n\n.upload-zone i {\n  font-size: 3rem;\n  color: var(--primary-500);\n  margin-bottom: var(--space-4);\n}\n\n.upload-zone h4 {\n  margin: 0 0 var(--space-2);\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.upload-zone p {\n  margin: 0 0 var(--space-2);\n  color: var(--text-secondary);\n}\n\n.upload-zone small {\n  color: var(--text-tertiary);\n  font-size: 0.875rem;\n}\n\n/* Upload Progress Animation */\n@keyframes uploadProgress {\n  0% { width: 0%; }\n  50% { width: 70%; }\n  100% { width: 100%; }\n}\n\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n/* Manual Zone */\n.manual-zone {\n  padding: var(--space-6);\n  background: var(--bg-secondary);\n  border-radius: var(--radius-lg);\n}\n\n/* Selection Groups */\n.selection-group {\n  margin-bottom: var(--space-6);\n}\n\n.selection-group label {\n  display: block;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin-bottom: var(--space-4);\n  font-size: 1.125rem;\n}\n\n.option-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  gap: var(--space-3);\n}\n\n.option-card {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: var(--space-3);\n  padding: var(--space-4);\n  background: var(--bg-secondary);\n  border: 2px solid var(--border-primary);\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n  text-align: left;\n  grid-column: span 2;\n}\n\n.option-card:hover {\n  border-color: var(--primary-300);\n  background: var(--bg-tertiary);\n  transform: translateY(-4px);\n  box-shadow: var(--shadow-lg);\n}\n\n.option-card.active {\n  border-color: var(--success-400);\n  background: var(--bg-tertiary);\n  color: var(--text-primary);\n  box-shadow: var(--shadow-md);\n  position: relative;\n}\n\n.option-card.active::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: transparent;\n  border-radius: inherit;\n}\n\n.option-card i {\n  font-size: 1.5rem;\n  color: var(--primary-500);\n  flex-shrink: 0;\n}\n\n.option-card .content {\n  flex: 1;\n}\n\n.option-card span {\n  font-weight: 500;\n  font-size: 0.875rem;\n  display: block;\n}\n\n.option-card small {\n  font-size: 0.75rem;\n  color: var(--text-tertiary);\n  display: block;\n  margin-top: var(--space-1);\n}\n\n/* Character Cards Gallery Styling */\n.character-cards {\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  gap: var(--space-2);\n  margin-bottom: var(--space-6);\n  max-width: 100%;\n  padding: 0;\n}\n\n.character-cards .option-card {\n  width: 100%;\n  height: 180px;\n  padding: 0;\n  text-align: left;\n  transition: all 0.3s ease;\n  border: 1px solid var(--border-primary);\n  background: var(--bg-secondary);\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  min-height: 180px;\n  max-height: 180px;\n}\n\n.character-cards .option-card:hover {\n  transform: translateY(-2px) scale(1.02);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n  border-color: var(--border-secondary);\n}\n\n.character-cards .option-card.active {\n  border-color: var(--success-400);\n  box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);\n  transform: scale(1.02);\n}\n\n.character-cards .option-card.active::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(34, 197, 94, 0.1);\n  pointer-events: none;\n}\n\n.actor-image-container {\n  width: 92px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: var(--bg-tertiary);\n  z-index: 1;\n  overflow: hidden;\n  border-radius: var(--radius-lg) 0 0 var(--radius-lg);\n  flex-shrink: 0;\n}\n\n.actor-image-container .actor-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: center;\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n  transition: opacity 0.3s ease, filter 0.3s ease;\n}\n\n/* Lazy loading styles */\n.lazy-image {\n  transition: opacity 0.3s ease, filter 0.3s ease;\n}\n\n.lazy-image[data-src] {\n  background: var(--bg-tertiary);\n  background-image: linear-gradient(45deg, \n    var(--bg-secondary) 25%, \n    transparent 25%, \n    transparent 75%, \n    var(--bg-secondary) 75%, \n    var(--bg-secondary)), \n    linear-gradient(45deg, \n    var(--bg-secondary) 25%, \n    transparent 25%, \n    transparent 75%, \n    var(--bg-secondary) 75%, \n    var(--bg-secondary));\n  background-size: 20px 20px;\n  background-position: 0 0, 10px 10px;\n  animation: shimmer 1.5s ease-in-out infinite;\n}\n\n.lazy-image.loaded {\n  background: none;\n  animation: none;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: 0 0, 10px 10px;\n  }\n  100% {\n    background-position: 20px 20px, 30px 30px;\n  }\n}\n\n.actor-image-container i {\n  font-size: 2.5rem;\n  color: var(--text-secondary);\n  transition: all 0.3s ease;\n}\n\n.actor-image-container i.bx-spin {\n  color: var(--success-400);\n}\n\n.character-cards .option-card .content {\n  flex: 1;\n  padding: 12px 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 4px;\n  background: var(--bg-secondary);\n  z-index: 2;\n}\n\n.actor-name {\n  font-weight: 700;\n  font-size: 1rem;\n  color: var(--text-primary);\n  margin-bottom: 2px;\n  line-height: 1.2;\n}\n\n.actor-details {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  font-weight: 500;\n  margin-bottom: 4px;\n}\n\n.actor-role {\n  font-size: 0.75rem;\n  color: var(--success-400);\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.3px;\n  background: rgba(34, 197, 94, 0.1);\n  padding: 3px 8px;\n  border-radius: var(--radius-sm);\n  display: inline-block;\n  margin-bottom: 6px;\n}\n\n.actor-bio {\n  font-size: 0.7rem;\n  color: var(--text-tertiary);\n  line-height: 1.3;\n  margin-top: 4px;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.character-cards .option-card.active .actor-name {\n  color: var(--success-400);\n}\n\n.character-cards .option-card.active .actor-role {\n  background: rgba(34, 197, 94, 0.2);\n  color: var(--success-300);\n}\n\n.generate-actor-btn {\n  background: var(--success-500);\n  color: white;\n  border: none;\n  padding: var(--space-2) var(--space-3);\n  border-radius: var(--radius-sm);\n  font-size: 0.75rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: var(--space-1);\n  margin-top: auto;\n}\n\n.generate-actor-btn:hover {\n  background: var(--success-600);\n  transform: translateY(-1px);\n}\n\n.generate-actor-btn:active {\n  transform: translateY(0);\n}\n\n.card-subtitle {\n  font-size: 0.9rem;\n  color: var(--text-secondary);\n  margin-top: var(--space-2);\n  font-style: italic;\n}\n\n/* Hook Cards - now inherits from base option-card styling */\n\n/* Actor Grid */\n.actor-grid,\n.hook-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: var(--space-4);\n}\n\n/* Performance Grid */\n.performance-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-8);\n}\n\n/* Location Showcase Styling */\n.location-showcase {\n  margin-bottom: var(--space-8);\n}\n\n.location-cards {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: var(--space-4);\n  margin-bottom: var(--space-6);\n  width: 100%;\n}\n\n.location-cards .option-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: var(--space-6);\n  text-align: center;\n  min-height: 120px;\n  width: 100%;\n  background: var(--bg-secondary);\n  border: 2px solid var(--border-primary);\n  border-radius: var(--radius-xl);\n  cursor: pointer;\n  transition: all var(--transition-normal);\n  position: relative;\n  overflow: hidden;\n  grid-column: span 1;\n}\n\n.location-cards .option-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--gradient-cool);\n  opacity: 0;\n  transition: opacity var(--transition-normal);\n}\n\n.location-cards .option-card:hover {\n  border-color: var(--primary-400);\n  background: var(--bg-tertiary);\n  transform: translateY(-4px) scale(1.02);\n  box-shadow: var(--shadow-xl);\n}\n\n.location-cards .option-card:hover::before {\n  opacity: 0.1;\n}\n\n.location-cards .option-card.active {\n  border-color: var(--success-400);\n  background: var(--bg-tertiary);\n  box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);\n  transform: scale(1.02);\n}\n\n.location-cards .option-card.active::before {\n  background: rgba(34, 197, 94, 0.1);\n  opacity: 1;\n}\n\n.location-cards .option-card i {\n  font-size: 2.5rem;\n  color: var(--primary-500);\n  margin-bottom: var(--space-3);\n  position: relative;\n  z-index: 2;\n  transition: all var(--transition-normal);\n}\n\n.location-cards .option-card.active i {\n  color: var(--success-400);\n  animation: pulse 2s ease-in-out infinite;\n}\n\n.location-cards .option-card .content {\n  position: relative;\n  z-index: 2;\n}\n\n.location-cards .option-card .content span {\n  font-weight: 600;\n  font-size: 1rem;\n  color: var(--text-primary);\n  display: block;\n  margin-bottom: var(--space-1);\n}\n\n.location-cards .option-card .content small {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  display: block;\n  line-height: 1.4;\n}\n\n.location-cards .option-card.active .content span {\n  color: var(--success-400);\n}\n\n.location-cards .option-card.active .content small {\n  color: var(--success-300);\n}\n\n/* Visual Grid - Updated layout */\n.visual-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--space-6);\n}\n\n/* Enhancement Grid */\n.enhancement-grid {\n  display: grid;\n  gap: var(--space-6);\n}\n\n/* Generate Section */\n.generate-section {\n  text-align: center;\n  margin: var(--space-8) 0;\n}\n\n.btn-generate {\n  font-size: 1.25rem;\n  padding: var(--space-6) var(--space-10);\n  border-radius: var(--radius-xl);\n  background: var(--gradient-warm);\n  border: none;\n  color: #ffffff;\n  position: relative;\n  overflow: hidden;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  box-shadow: var(--shadow-lg);\n}\n\n.btn-generate::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0.1) 100%);\n  transition: left 0.5s ease;\n}\n\n.btn-generate:hover {\n  transform: translateY(-3px) scale(1.02);\n  box-shadow: var(--shadow-xl);\n}\n\n.btn-generate:hover::before {\n  left: 0;\n}\n\n.btn-generate:active {\n  transform: translateY(-1px) scale(0.98);\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: var(--space-2);\n  padding: var(--space-3) var(--space-5);\n  border: none;\n  border-radius: var(--radius-md);\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all var(--transition-fast);\n  text-decoration: none;\n  position: relative;\n  z-index: 1;\n  min-height: 44px;\n  min-width: 44px;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/* Button Loading States */\n.btn.loading {\n  pointer-events: none;\n  opacity: 0.8;\n}\n\n.btn.loading::after {\n  content: '';\n  position: absolute;\n  width: 16px;\n  height: 16px;\n  border: 2px solid transparent;\n  border-top: 2px solid currentColor;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-left: var(--space-2);\n}\n\n.btn.loading .btn-text {\n  opacity: 0.7;\n}\n\n/* Button Success State */\n.btn.success {\n  background: var(--success-500) !important;\n  color: white !important;\n  transform: scale(1.02);\n}\n\n.btn.success::before {\n  content: '✓';\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 1.2rem;\n  animation: checkmark 0.3s ease;\n}\n\n.btn.success .btn-text {\n  opacity: 0;\n}\n\n/* Button Disabled State */\n.btn:disabled,\n.btn.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n\n@keyframes checkmark {\n  0% { transform: translate(-50%, -50%) scale(0); }\n  50% { transform: translate(-50%, -50%) scale(1.2); }\n  100% { transform: translate(-50%, -50%) scale(1); }\n}\n\n.btn-primary {\n  background: var(--gradient-primary);\n  color: #ffffff;\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-primary::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%);\n  transition: left var(--transition-normal);\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-lg);\n}\n\n.btn-primary:hover::before {\n  left: 0;\n}\n\n.btn-secondary {\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  border: 1px solid var(--border-primary);\n}\n\n.btn-secondary:hover {\n  background: var(--bg-tertiary);\n  border-color: var(--border-secondary);\n}\n\n.btn-ghost {\n  background: transparent;\n  color: var(--text-secondary);\n}\n\n.btn-ghost:hover {\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n}\n\n/* Navigation */\n.navigation-container {\n  margin-top: var(--space-12);\n  text-align: center;\n}\n\n.nav-actions {\n  display: flex;\n  justify-content: center;\n  gap: var(--space-4);\n}\n\n/* Prompt Results */\n.prompt-results {\n  margin-top: var(--space-8);\n}\n\n.prompt-display {\n  background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-lg);\n  padding: var(--space-8);\n  margin-bottom: var(--space-6);\n  font-family: 'Monaco', 'Menlo', monospace;\n  font-size: 0.875rem;\n  line-height: 1.7;\n  white-space: pre-wrap;\n  position: relative;\n  overflow: hidden;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.prompt-display::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: var(--gradient-accent);\n}\n\n.prompt-actions {\n  display: flex;\n  gap: var(--space-3);\n  justify-content: center;\n}\n\n/* Analysis Results */\n.analysis-results {\n  margin-top: var(--space-8);\n}\n\n.analysis-preview {\n  background: var(--bg-secondary);\n  border-radius: var(--radius-lg);\n  padding: var(--space-6);\n}\n\n/* Loading */\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.loading-content {\n  background: var(--bg-elevated);\n  border-radius: var(--radius-xl);\n  padding: var(--space-8);\n  text-align: center;\n  box-shadow: var(--shadow-xl);\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid var(--border-primary);\n  border-top: 4px solid var(--primary-500);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto var(--space-4);\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Glass morphism utility class */\n.glass {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n[data-theme=\"light\"] .glass {\n  background: rgba(255, 255, 255, 0.7);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n/* Enhanced loading overlay with glass effect */\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.4);\n  backdrop-filter: blur(8px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.loading-content {\n  background: rgba(var(--bg-elevated), 0.9);\n  backdrop-filter: blur(20px);\n  border-radius: var(--radius-xl);\n  padding: var(--space-10);\n  text-align: center;\n  box-shadow: var(--shadow-xl);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Custom Scene Button */\n.custom-scene-btn {\n    margin-top: var(--space-4);\n    width: 100%;\n    justify-content: center;\n    gap: var(--space-2);\n    padding: var(--space-3) var(--space-4);\n    background: var(--bg-tertiary);\n    border: 2px dashed var(--border-secondary);\n    color: var(--text-secondary);\n    font-weight: 500;\n}\n\n.custom-scene-btn:hover {\n    background: var(--primary-900);\n    border-color: var(--primary-400);\n    color: var(--primary-300);\n    transform: translateY(-1px);\n}\n\n/* Custom Actor Button */\n.custom-actor-btn {\n    margin-top: var(--space-4);\n    width: 100%;\n    justify-content: center;\n    gap: var(--space-2);\n    padding: var(--space-3) var(--space-4);\n    background: var(--bg-tertiary);\n    border: 2px dashed var(--border-secondary);\n    color: var(--text-secondary);\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n}\n\n.custom-actor-btn:hover {\n    background: var(--success-900);\n    border-color: var(--success-400);\n    color: var(--success-300);\n    transform: translateY(-1px);\n}\n\n.custom-actor-btn i {\n    font-size: 1.2rem;\n    color: var(--success-500);\n}\n\n.custom-actor-btn:hover i {\n    color: var(--success-300);\n}\n\n/* Scene Upload Styles */\n.scene-upload-zone {\n    margin-top: 1rem;\n    padding: 2rem;\n    border: 2px dashed var(--border-secondary);\n    border-radius: 12px;\n    text-align: center;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    background: var(--bg-secondary);\n    position: relative;\n}\n\n.scene-upload-zone:hover {\n    border-color: var(--primary-400);\n    background: color-mix(in srgb, var(--primary-color) 5%, var(--bg-secondary));\n}\n\n.scene-upload-zone.dragover {\n    border-color: var(--primary-400);\n    background: color-mix(in srgb, var(--primary-color) 10%, var(--bg-secondary));\n}\n\n.scene-upload-content i {\n    font-size: 2.5rem;\n    color: var(--primary-400);\n    margin-bottom: 1rem;\n}\n\n.scene-upload-content h4 {\n    margin: 0 0 0.5rem 0;\n    color: var(--text-primary);\n}\n\n.scene-upload-content p {\n    margin: 0 0 0.5rem 0;\n    color: var(--text-secondary);\n}\n\n.scene-upload-content small {\n    color: var(--text-tertiary);\n    font-size: 0.85rem;\n}\n\n.scene-upload-content .close-uploader {\n    margin-top: 1rem;\n}\n\n/* Scene Results */\n.scene-results {\n    text-align: left;\n}\n\n.scene-results i {\n    color: var(--success-400);\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.scene-results h4 {\n    color: var(--text-primary);\n    margin: 0 0 1rem 0;\n}\n\n.scene-description {\n    background: var(--bg-tertiary);\n    padding: 1rem;\n    border-radius: 8px;\n    margin-bottom: 1rem;\n    line-height: 1.5;\n    font-size: 0.9rem;\n    color: var(--text-secondary);\n}\n\n.scene-actions {\n    display: flex;\n    gap: var(--space-2);\n    justify-content: flex-start;\n}\n\n.scene-actions .btn {\n    flex: 0 0 auto;\n}\n\n.scene-results {\n    text-align: left;\n}\n\n.scene-results i {\n    color: var(--success-color);\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.scene-results h4 {\n    color: var(--text-primary);\n    margin: 0 0 1rem 0;\n}\n\n.scene-description {\n    background: var(--background-secondary);\n    padding: 1rem;\n    border-radius: 8px;\n    margin-bottom: 1rem;\n    line-height: 1.5;\n    font-size: 0.9rem;\n    color: var(--text-secondary);\n}\n\n/* Toast Notifications */\n.toast-container {\n  position: fixed;\n  top: var(--space-6);\n  right: var(--space-6);\n  z-index: 1000;\n}\n\n.toast {\n  background: var(--bg-elevated);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-lg);\n  padding: var(--space-4) var(--space-5);\n  margin-bottom: var(--space-3);\n  box-shadow: var(--shadow-lg);\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  animation: slideIn 0.3s ease;\n}\n\n.toast.success {\n  border-color: var(--success-400);\n  background: var(--success-900);\n  color: var(--success-200);\n}\n\n.toast.error {\n  border-color: var(--error-400);\n  background: var(--error-900);\n  color: var(--error-200);\n}\n\n@keyframes slideIn {\n  from { transform: translateX(100%); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n}\n\n/* Animations */\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.option-card {\n  animation: slideInUp 0.5s ease-out backwards;\n}\n\n.option-card:nth-child(1) { animation-delay: 0.1s; }\n.option-card:nth-child(2) { animation-delay: 0.2s; }\n.option-card:nth-child(3) { animation-delay: 0.3s; }\n.option-card:nth-child(4) { animation-delay: 0.4s; }\n\n.btn-generate:hover i {\n  animation: float 2s ease-in-out infinite;\n}\n\n.loading-spinner {\n  animation: spin 1s linear infinite, pulse 2s ease-in-out infinite;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .app-main {\n    padding: var(--space-6) var(--space-4);\n  }\n\n  .header-content {\n    padding: 0 var(--space-4);\n    flex-direction: column;\n    gap: var(--space-4);\n    text-align: center;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: center;\n    gap: var(--space-4);\n  }\n\n  .btn {\n    touch-action: manipulation;\n    min-height: 48px;\n    min-width: 48px;\n  }\n\n  .tab-nav {\n    padding: var(--space-6) var(--space-2);\n    overflow-x: auto;\n    justify-content: flex-start;\n  }\n\n  .tab-nav::before {\n    left: 5%;\n    right: 5%;\n  }\n\n  .progress-line {\n    left: 5%;\n  }\n\n  .tab-btn {\n    width: 50px;\n    height: 50px;\n    margin: 0 var(--space-4);\n    flex-shrink: 0;\n  }\n\n  .tab-btn i {\n    font-size: 1.25rem;\n  }\n\n  .tab-btn .tab-label {\n    font-size: 0.6875rem;\n    top: calc(100% + var(--space-2));\n  }\n\n  .product-grid,\n  .actor-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .performance-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .visual-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .visual-grid .section-card:first-child,\n  .visual-grid .section-card:nth-child(2),\n  .visual-grid .section-card:nth-child(3) {\n    grid-column: 1;\n    grid-row: auto;\n  }\n\n  .method-options {\n    grid-template-columns: 1fr;\n  }\n\n  .content-type-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .option-cards {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .option-card {\n    grid-column: span 1;\n    flex-direction: column;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n  }\n\n  /* Character gallery responsive */\n  .character-cards {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 8px;\n  }\n\n  /* Location cards responsive */\n  .location-cards {\n    grid-template-columns: repeat(3, 1fr);\n    gap: var(--space-3);\n  }\n\n  .location-cards .option-card {\n    min-height: 100px;\n    padding: var(--space-4);\n  }\n\n  .location-cards .option-card i {\n    font-size: 2rem;\n  }\n\n  .character-cards .option-card {\n    height: 140px;\n  }\n\n  .actor-image-container {\n    width: 69px;\n  }\n\n  .actor-name {\n    font-size: 0.9rem;\n  }\n\n  .actor-details {\n    font-size: 0.7rem;\n  }\n\n  .actor-role {\n    font-size: 0.65rem;\n  }\n\n  .actor-bio {\n    font-size: 0.65rem;\n    -webkit-line-clamp: 2;\n  }\n\n  .nav-actions {\n    flex-direction: column;\n  }\n}\n\n@media (max-width: 480px) {\n  .header-branding h1 {\n    font-size: 1.5rem;\n  }\n\n  .panel-header h2 {\n    font-size: 1.5rem;\n  }\n\n  .option-cards {\n    grid-template-columns: 1fr;\n  }\n\n  /* Character gallery mobile */\n  .character-cards {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n\n  /* Location cards mobile */\n  .location-cards {\n    grid-template-columns: repeat(2, 1fr);\n    gap: var(--space-2);\n  }\n\n  .location-cards .option-card {\n    min-height: 80px;\n    padding: var(--space-3);\n  }\n\n  .location-cards .option-card i {\n    font-size: 1.8rem;\n    margin-bottom: var(--space-2);\n  }\n\n  .location-cards .option-card .content span {\n    font-size: 0.9rem;\n  }\n\n  .character-cards .option-card {\n    height: 120px;\n  }\n\n  .actor-image-container {\n    width: 58px;\n  }\n\n  .character-cards .option-card .content {\n    padding: 8px 12px;\n  }\n}\n/* AI Service Selection Styles */\n.ai-service-selection {\n  margin: 1.5rem 0;\n  padding: 1rem;\n  background: var(--bg-tertiary);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-primary);\n}\n\n.ai-service-selection h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.service-options {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n.service-card {\n  padding: 1rem;\n  border: 2px solid var(--border-primary);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  background: var(--bg-secondary);\n}\n\n.service-card:hover {\n  border-color: var(--primary-400);\n  background: var(--bg-tertiary);\n}\n\n.service-card.active {\n  border-color: var(--primary-400);\n  background: var(--primary-900);\n  color: var(--primary-200);\n}\n\n.service-card.disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.service-card i {\n  font-size: 1.5rem;\n  color: var(--primary-500);\n  flex-shrink: 0;\n}\n\n.service-card.active i {\n  color: var(--primary-300);\n}\n\n.service-info {\n  flex: 1;\n}\n\n.service-info h5 {\n  margin: 0 0 0.25rem 0;\n  font-size: 0.875rem;\n  font-weight: 600;\n}\n\n.service-info p {\n  margin: 0;\n  font-size: 0.75rem;\n  color: var(--text-secondary);\n}\n\n.service-card.active .service-info p {\n  color: var(--primary-300);\n}\n\n/* API Indicator Styles */\n.api-indicator {\n  margin-top: 0.75rem;\n  padding: 0.5rem;\n  background: var(--bg-tertiary);\n  border-radius: var(--radius-sm);\n  text-align: center;\n}\n\n.selected-service {\n  font-size: 0.875rem;\n  color: var(--text-secondary);\n}\n\n.selected-service strong {\n  color: var(--primary-500);\n}\n\n/* Auto-save Indicator */\n.auto-save-indicator {\n  position: fixed;\n  bottom: var(--space-6);\n  right: var(--space-6);\n  z-index: 1000;\n  background: var(--success-900);\n  color: var(--success-200);\n  padding: var(--space-3) var(--space-4);\n  border-radius: var(--radius-full);\n  border: 1px solid var(--success-400);\n  box-shadow: var(--shadow-lg);\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  font-size: 0.875rem;\n  font-weight: 500;\n  opacity: 0;\n  transform: translateY(20px);\n  transition: all var(--transition-normal);\n  backdrop-filter: blur(10px);\n}\n\n.auto-save-indicator.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.auto-save-indicator i {\n  font-size: 1rem;\n  color: var(--success-400);\n}\n\n/* Welcome Banner */\n.welcome-banner {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10000;\n  background: var(--bg-elevated);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-2xl);\n  box-shadow: var(--shadow-xl);\n  max-width: 500px;\n  width: 90%;\n  backdrop-filter: blur(20px);\n}\n\n.welcome-banner::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--gradient-primary);\n  opacity: 0.1;\n  border-radius: inherit;\n  pointer-events: none;\n}\n\n.welcome-content {\n  padding: var(--space-8);\n  text-align: center;\n  position: relative;\n  z-index: 1;\n}\n\n.welcome-icon {\n  width: 80px;\n  height: 80px;\n  background: var(--gradient-warm);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto var(--space-6);\n  animation: bounce 2s ease-in-out infinite;\n}\n\n.welcome-icon i {\n  font-size: 2.5rem;\n  color: white;\n}\n\n.welcome-text h3 {\n  margin: 0 0 var(--space-3);\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: var(--text-primary);\n}\n\n.welcome-text p {\n  margin: 0 0 var(--space-6);\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.welcome-actions {\n  display: flex;\n  gap: var(--space-3);\n  justify-content: center;\n}\n\n.welcome-banner.slide-in {\n  animation: slideInScale 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@keyframes slideInScale {\n  from {\n    opacity: 0;\n    transform: translate(-50%, -50%) scale(0.8);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, -50%) scale(1);\n  }\n}\n\n/* Tooltips - Enhanced with better sizing and z-index */\n.tooltip {\n  position: relative;\n}\n\n.tooltip::before {\n  content: attr(data-tooltip);\n  position: absolute;\n  bottom: calc(100% + 12px);\n  left: 50%;\n  transform: translateX(-50%);\n  background: var(--bg-elevated);\n  color: var(--text-primary);\n  padding: var(--space-3) var(--space-4);\n  border-radius: var(--radius-lg);\n  font-size: 0.875rem;\n  font-weight: 500;\n  line-height: 1.4;\n  white-space: nowrap;\n  max-width: 300px;\n  opacity: 0;\n  pointer-events: none;\n  transition: all var(--transition-normal);\n  border: 1px solid var(--border-primary);\n  box-shadow: var(--shadow-xl);\n  z-index: 10000;\n  backdrop-filter: blur(10px);\n}\n\n.tooltip::after {\n  content: '';\n  position: absolute;\n  bottom: calc(100% + 6px);\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid var(--bg-elevated);\n  opacity: 0;\n  pointer-events: none;\n  transition: all var(--transition-normal);\n  z-index: 10000;\n}\n\n.tooltip:hover::before,\n.tooltip:hover::after {\n  opacity: 1;\n  transform: translateX(-50%) translateY(-2px);\n}\n\n/* Multi-line tooltip support */\n.tooltip[data-tooltip*=\" \"]::before {\n  white-space: normal;\n  text-align: center;\n  min-width: 120px;\n  max-width: 280px;\n}\n\n/* Tooltip positioning variants */\n.tooltip.tooltip-left::before {\n  right: calc(100% + 12px);\n  left: auto;\n  bottom: 50%;\n  transform: translateY(50%);\n}\n\n.tooltip.tooltip-left::after {\n  right: calc(100% + 6px);\n  left: auto;\n  bottom: 50%;\n  transform: translateY(50%) rotate(-90deg);\n  border-top-color: var(--bg-elevated);\n}\n\n.tooltip.tooltip-right::before {\n  left: calc(100% + 12px);\n  right: auto;\n  bottom: 50%;\n  transform: translateY(50%);\n}\n\n.tooltip.tooltip-right::after {\n  left: calc(100% + 6px);\n  right: auto;\n  bottom: 50%;\n  transform: translateY(50%) rotate(90deg);\n  border-top-color: var(--bg-elevated);\n}\n\n.tooltip.tooltip-top::before {\n  top: calc(-100% - 12px);\n  bottom: auto;\n}\n\n.tooltip.tooltip-top::after {\n  top: calc(-100% - 6px);\n  bottom: auto;\n  border-top: none;\n  border-bottom: 6px solid var(--bg-elevated);\n}\n\n/* Ensure tooltips are always on top of other elements */\n.tooltip:hover::before,\n.tooltip:hover::after {\n  z-index: 10001;\n}\n\n/* Help Icons - Enhanced visibility and z-index */\n.help-icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  background: var(--primary-500);\n  color: white;\n  border-radius: 50%;\n  font-size: 0.75rem;\n  font-weight: 600;\n  margin-left: var(--space-2);\n  cursor: help;\n  transition: all var(--transition-fast);\n  position: relative;\n  z-index: 100;\n  box-shadow: var(--shadow-sm);\n}\n\n.help-icon:hover {\n  background: var(--primary-400);\n  transform: scale(1.15);\n  box-shadow: var(--shadow-md);\n  z-index: 10002;\n}\n\n.help-icon:focus {\n  outline: 2px solid var(--primary-300);\n  outline-offset: 2px;\n}\n\n/* Character Counters */\n.character-counter {\n  font-size: 0.75rem;\n  color: var(--text-tertiary);\n  text-align: right;\n  margin-top: var(--space-1);\n  transition: color var(--transition-fast);\n}\n\n.character-counter.warning {\n  color: var(--warning-400);\n}\n\n.character-counter.error {\n  color: var(--error-400);\n}\n\n/* Keyboard Shortcuts Modal */\n.keyboard-shortcuts {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.9);\n  z-index: 10000;\n  background: var(--bg-elevated);\n  border: 1px solid var(--border-primary);\n  border-radius: var(--radius-xl);\n  box-shadow: var(--shadow-xl);\n  padding: var(--space-8);\n  max-width: 400px;\n  width: 90%;\n  opacity: 0;\n  pointer-events: none;\n  transition: all var(--transition-normal);\n  backdrop-filter: blur(20px);\n}\n\n.keyboard-shortcuts.visible {\n  opacity: 1;\n  pointer-events: all;\n  transform: translate(-50%, -50%) scale(1);\n}\n\n.keyboard-shortcuts h3 {\n  margin: 0 0 var(--space-6);\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--text-primary);\n  text-align: center;\n}\n\n.shortcut-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-3) 0;\n  border-bottom: 1px solid var(--border-primary);\n}\n\n.shortcut-item:last-child {\n  border-bottom: none;\n}\n\n.shortcut-description {\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n}\n\n.shortcut-keys {\n  display: flex;\n  gap: var(--space-1);\n}\n\n.key {\n  background: var(--bg-tertiary);\n  color: var(--text-primary);\n  padding: var(--space-1) var(--space-2);\n  border-radius: var(--radius-sm);\n  font-size: 0.75rem;\n  font-weight: 600;\n  border: 1px solid var(--border-secondary);\n  min-width: 24px;\n  text-align: center;\n}\n\n/* Enhanced Form Validation */\n.form-field.error input,\n.form-field.error textarea {\n  border-color: var(--error-400);\n  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\n}\n\n.form-field.success input,\n.form-field.success textarea {\n  border-color: var(--success-400);\n  box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);\n}\n\n.field-error {\n  color: var(--error-400);\n  font-size: 0.75rem;\n  margin-top: var(--space-1);\n  display: flex;\n  align-items: center;\n  gap: var(--space-1);\n}\n\n.field-success {\n  color: var(--success-400);\n  font-size: 0.75rem;\n  margin-top: var(--space-1);\n  display: flex;\n  align-items: center;\n  gap: var(--space-1);\n}\n\n/* Progress Indicators */\n.step-progress {\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  margin: var(--space-4) 0;\n}\n\n.progress-step {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: var(--border-primary);\n  transition: all var(--transition-fast);\n}\n\n.progress-step.completed {\n  background: var(--success-400);\n  transform: scale(1.2);\n}\n\n.progress-step.active {\n  background: var(--primary-400);\n  transform: scale(1.4);\n  box-shadow: 0 0 8px rgba(14, 165, 233, 0.4);\n}\n\n/* Empty States */\n.empty-state {\n  text-align: center;\n  padding: var(--space-12) var(--space-6);\n  color: var(--text-tertiary);\n}\n\n.empty-state i {\n  font-size: 3rem;\n  margin-bottom: var(--space-4);\n  opacity: 0.5;\n}\n\n.empty-state h3 {\n  margin: 0 0 var(--space-2);\n  color: var(--text-secondary);\n  font-size: 1.125rem;\n}\n\n.empty-state p {\n  margin: 0;\n  font-size: 0.9rem;\n  line-height: 1.5;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .service-options {\n    grid-template-columns: 1fr;\n  }\n  \n  .auto-save-indicator {\n    bottom: var(--space-4);\n    right: var(--space-4);\n    font-size: 0.8rem;\n  }\n  \n  .welcome-banner {\n    width: 95%;\n  }\n  \n  .welcome-content {\n    padding: var(--space-6);\n  }\n  \n  .welcome-actions {\n    flex-direction: column;\n  }\n  \n  .tooltip::before {\n    font-size: 0.7rem;\n    padding: var(--space-1) var(--space-2);\n  }\n  \n  .keyboard-shortcuts {\n    width: 95%;\n    padding: var(--space-6);\n  }\n}\n","size_bytes":49752},"static/js/app.js":{"content":"class UGCStudio {\r\n    constructor() {\r\n        this.currentTab = 'product';\r\n        this.analysisData = null;\r\n        this.actorData = null;\r\n        this.locationData = null;\r\n        this.sceneData = null;\r\n        this.autoSaveTimer = null;\r\n        this.tourStep = 0;\r\n        this.tourActive = false;\r\n        this.selectedOptions = {\r\n            contentType: 'unboxing',\r\n            analysisMethod: 'upload',\r\n            creatorAge: 'young_adult',\r\n            creatorStyle: 'authentic',\r\n            characterArchetype: 'Jake',\r\n            energyLevel: 'moderate',\r\n            tone: 'conversational',\r\n            platform: 'tiktok',\r\n            location: 'office',\r\n            lighting: 'natural',\r\n            cameraStyle: 'handheld',\r\n            hookStrategy: 'problem_solution',\r\n            conversionFocus: 'consideration',\r\n            visualStyle: 'minimal'\r\n        };\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        // Initialize lazy loading\r\n        this.initLazyLoading();\r\n\r\n        // Initialize UX enhancements\r\n        this.initUXEnhancements();\r\n\r\n        this.bindEvents();\r\n        this.setTheme(localStorage.getItem('theme') || 'dark');\r\n        this.updateTabNavigation();\r\n\r\n        // Ensure only the first tab is visible on load\r\n        this.switchTab('product');\r\n\r\n        // Force render all dynamic content\r\n        setTimeout(() => {\r\n            this.renderContentTypes();\r\n            this.renderAnalysisMethods();\r\n            this.renderActorCards();\r\n            this.renderPerformanceStyles();\r\n            this.renderVisualSettings();\r\n            this.renderHookStrategies();\r\n            this.renderEnhancementOptions();\r\n        }, 100);\r\n    }\r\n\r\n    // UX Enhancement Initialization\r\n    initUXEnhancements() {\r\n        // Initialize auto-save\r\n        this.initAutoSave();\r\n        \r\n        // Initialize keyboard shortcuts\r\n        this.initKeyboardShortcuts();\r\n        \r\n        // Initialize tooltips\r\n        this.initTooltips();\r\n        \r\n        // Initialize form validation\r\n        this.initFormValidation();\r\n        \r\n        // Initialize progress tracking\r\n        this.initProgressTracking();\r\n        \r\n        // Add auto-save indicator to DOM\r\n        this.createAutoSaveIndicator();\r\n        \r\n        // Initialize accessibility features\r\n        this.initAccessibility();\r\n    }\r\n\r\n    // Auto-save functionality\r\n    initAutoSave() {\r\n        this.autoSaveInterval = setInterval(() => {\r\n            this.autoSave();\r\n        }, 30000); // Auto-save every 30 seconds\r\n        \r\n        // Save on significant changes\r\n        this.lastSaveState = JSON.stringify(this.selectedOptions);\r\n    }\r\n\r\n    autoSave() {\r\n        const currentState = JSON.stringify({\r\n            selectedOptions: this.selectedOptions,\r\n            analysisData: this.analysisData,\r\n            actorData: this.actorData,\r\n            sceneData: this.sceneData,\r\n            currentTab: this.currentTab\r\n        });\r\n\r\n        if (currentState !== this.lastSaveState) {\r\n            this.showAutoSaveIndicator('saving');\r\n            \r\n            try {\r\n                localStorage.setItem('ugc_studio_autosave', currentState);\r\n                this.lastSaveState = currentState;\r\n                \r\n                setTimeout(() => {\r\n                    this.showAutoSaveIndicator('saved');\r\n                    setTimeout(() => {\r\n                        this.hideAutoSaveIndicator();\r\n                    }, 2000);\r\n                }, 500);\r\n            } catch (error) {\r\n                console.error('Auto-save failed:', error);\r\n                this.showAutoSaveIndicator('error');\r\n            }\r\n        }\r\n    }\r\n\r\n    createAutoSaveIndicator() {\r\n        const indicator = document.createElement('div');\r\n        indicator.id = 'auto-save-indicator';\r\n        indicator.className = 'auto-save-indicator';\r\n        indicator.innerHTML = `\r\n            <i class='bx bx-save'></i>\r\n            <span>Auto-saved</span>\r\n        `;\r\n        document.body.appendChild(indicator);\r\n    }\r\n\r\n    showAutoSaveIndicator(state) {\r\n        const indicator = document.getElementById('auto-save-indicator');\r\n        if (!indicator) return;\r\n\r\n        indicator.className = `auto-save-indicator show ${state}`;\r\n        \r\n        const icon = indicator.querySelector('i');\r\n        const text = indicator.querySelector('span');\r\n        \r\n        switch (state) {\r\n            case 'saving':\r\n                icon.className = 'bx bx-loader-alt bx-spin';\r\n                text.textContent = 'Saving...';\r\n                break;\r\n            case 'saved':\r\n                icon.className = 'bx bx-check';\r\n                text.textContent = 'Auto-saved';\r\n                break;\r\n            case 'error':\r\n                icon.className = 'bx bx-error';\r\n                text.textContent = 'Save failed';\r\n                break;\r\n        }\r\n    }\r\n\r\n    hideAutoSaveIndicator() {\r\n        const indicator = document.getElementById('auto-save-indicator');\r\n        if (indicator) {\r\n            indicator.classList.remove('show');\r\n        }\r\n    }\r\n\r\n    // Keyboard shortcuts\r\n    initKeyboardShortcuts() {\r\n        document.addEventListener('keydown', (e) => {\r\n            // Ctrl/Cmd + S for manual save\r\n            if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n                e.preventDefault();\r\n                this.manualSave();\r\n            }\r\n            \r\n            // Ctrl/Cmd + ? for help\r\n            if ((e.ctrlKey || e.metaKey) && e.key === '?') {\r\n                e.preventDefault();\r\n                this.toggleKeyboardShortcuts();\r\n            }\r\n            \r\n            // Arrow keys for tab navigation\r\n            if (e.key === 'ArrowLeft' && e.altKey) {\r\n                e.preventDefault();\r\n                this.previousTab();\r\n            }\r\n            \r\n            if (e.key === 'ArrowRight' && e.altKey) {\r\n                e.preventDefault();\r\n                this.nextTab();\r\n            }\r\n            \r\n            // Escape to close modals/uploaders\r\n            if (e.key === 'Escape') {\r\n                this.closeActiveModals();\r\n                this.hideKeyboardShortcuts();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Toggle keyboard shortcuts modal\r\n    toggleKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.toggle('visible');\r\n        }\r\n    }\r\n\r\n    hideKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.remove('visible');\r\n        }\r\n    }\r\n\r\n    manualSave() {\r\n        this.showAutoSaveIndicator('saving');\r\n        this.autoSave();\r\n        this.showToast('Project saved manually! 💾', 'success');\r\n    }\r\n\r\n    closeActiveModals() {\r\n        // Close any active uploaders\r\n        const sceneUploader = document.getElementById('scene-uploader');\r\n        const actorUploader = document.getElementById('actor-uploader');\r\n        \r\n        if (sceneUploader) sceneUploader.remove();\r\n        if (actorUploader) actorUploader.remove();\r\n    }\r\n\r\n    // Tooltip initialization\r\n    initTooltips() {\r\n        // Add tooltips to key elements\r\n        this.addTooltips();\r\n    }\r\n\r\n    addTooltips() {\r\n        const tooltipElements = [\r\n            { selector: '#theme-toggle', text: 'Toggle dark/light theme' },\r\n            { selector: '#new-project', text: 'Start a new project (clears all data)' },\r\n            { selector: '.tab-btn[data-tab=\"product\"]', text: 'Define your product and analysis method' },\r\n            { selector: '.tab-btn[data-tab=\"actor\"]', text: 'Choose your content creator' },\r\n            { selector: '.tab-btn[data-tab=\"visual\"]', text: 'Set visual and technical parameters' },\r\n            { selector: '.tab-btn[data-tab=\"hook\"]', text: 'Create compelling hooks and messages' },\r\n            { selector: '.tab-btn[data-tab=\"generate\"]', text: 'Generate your final UGC prompt' },\r\n            { selector: '#generate-prompt', text: 'Create your UGC video prompt' },\r\n            { selector: '#copy-prompt', text: 'Copy prompt to clipboard' }\r\n        ];\r\n\r\n        tooltipElements.forEach(({ selector, text }) => {\r\n            const element = document.querySelector(selector);\r\n            if (element) {\r\n                element.classList.add('tooltip');\r\n                element.setAttribute('data-tooltip', text);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Form validation\r\n    initFormValidation() {\r\n        // Add character counters to text inputs\r\n        this.addCharacterCounters();\r\n        \r\n        // Add real-time validation\r\n        this.addFormValidation();\r\n    }\r\n\r\n    addCharacterCounters() {\r\n        const textInputs = [\r\n            { selector: '#product-name', maxLength: 100 },\r\n            { selector: '#target-audience', maxLength: 200 },\r\n            { selector: '#manual-description', maxLength: 1000 },\r\n            { selector: '#custom-message', maxLength: 300 }\r\n        ];\r\n\r\n        textInputs.forEach(({ selector, maxLength }) => {\r\n            const input = document.querySelector(selector);\r\n            if (input) {\r\n                this.addCharacterCounter(input, maxLength);\r\n            }\r\n        });\r\n    }\r\n\r\n    addCharacterCounter(input, maxLength) {\r\n        const counter = document.createElement('div');\r\n        counter.className = 'char-counter';\r\n        \r\n        const updateCounter = () => {\r\n            const length = input.value.length;\r\n            counter.textContent = `${length}/${maxLength}`;\r\n            \r\n            counter.classList.remove('warning', 'error');\r\n            if (length > maxLength * 0.8) {\r\n                counter.classList.add('warning');\r\n            }\r\n            if (length > maxLength) {\r\n                counter.classList.add('error');\r\n            }\r\n        };\r\n\r\n        input.addEventListener('input', updateCounter);\r\n        input.parentNode.appendChild(counter);\r\n        updateCounter();\r\n    }\r\n\r\n    addFormValidation() {\r\n        const inputs = document.querySelectorAll('input, textarea');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('blur', () => this.validateField(input));\r\n            input.addEventListener('input', () => this.clearFieldValidation(input));\r\n        });\r\n    }\r\n\r\n    validateField(field) {\r\n        const fieldContainer = field.closest('.form-field');\r\n        if (!fieldContainer) return;\r\n\r\n        let isValid = true;\r\n        let message = '';\r\n\r\n        // Required field validation\r\n        if (field.hasAttribute('required') && !field.value.trim()) {\r\n            isValid = false;\r\n            message = 'This field is required';\r\n        }\r\n\r\n        this.setFieldValidation(fieldContainer, isValid, message);\r\n    }\r\n\r\n    setFieldValidation(fieldContainer, isValid, message) {\r\n        fieldContainer.classList.remove('error', 'success');\r\n        \r\n        // Remove existing feedback\r\n        const existingFeedback = fieldContainer.querySelector('.field-feedback');\r\n        if (existingFeedback) {\r\n            existingFeedback.remove();\r\n        }\r\n\r\n        if (!isValid) {\r\n            fieldContainer.classList.add('error');\r\n            if (message) {\r\n                const feedback = document.createElement('div');\r\n                feedback.className = 'field-feedback error';\r\n                feedback.innerHTML = `<i class='bx bx-error-circle'></i> ${message}`;\r\n                fieldContainer.appendChild(feedback);\r\n            }\r\n        } else if (fieldContainer.querySelector('input, textarea').value.trim()) {\r\n            fieldContainer.classList.add('success');\r\n        }\r\n    }\r\n\r\n    clearFieldValidation(field) {\r\n        const fieldContainer = field.closest('.form-field');\r\n        if (fieldContainer) {\r\n            fieldContainer.classList.remove('error');\r\n            const feedback = fieldContainer.querySelector('.field-feedback.error');\r\n            if (feedback) {\r\n                feedback.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Progress tracking\r\n    initProgressTracking() {\r\n        this.completedSteps = new Set();\r\n        this.updateStepCompletion();\r\n    }\r\n\r\n    updateStepCompletion() {\r\n        const steps = ['product', 'actor', 'visual', 'hook', 'generate'];\r\n        \r\n        steps.forEach(step => {\r\n            const isCompleted = this.isStepCompleted(step);\r\n            const tabBtn = document.querySelector(`[data-tab=\"${step}\"]`);\r\n            \r\n            if (tabBtn) {\r\n                if (isCompleted) {\r\n                    tabBtn.classList.add('completed');\r\n                    this.completedSteps.add(step);\r\n                } else {\r\n                    tabBtn.classList.remove('completed');\r\n                    this.completedSteps.delete(step);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    isStepCompleted(step) {\r\n        switch (step) {\r\n            case 'product':\r\n                return this.analysisData || (this.selectedOptions.analysisMethod === 'manual' && \r\n                       document.getElementById('product-name')?.value && \r\n                       document.getElementById('manual-description')?.value);\r\n            case 'actor':\r\n                return this.selectedOptions.characterArchetype;\r\n            case 'visual':\r\n                return this.selectedOptions.location && this.selectedOptions.lighting;\r\n            case 'hook':\r\n                return this.selectedOptions.hookStrategy;\r\n            case 'generate':\r\n                return document.getElementById('prompt-display')?.textContent;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    // Accessibility features\r\n    initAccessibility() {\r\n        // Add keyboard navigation class when using keyboard\r\n        document.addEventListener('keydown', () => {\r\n            document.body.classList.add('keyboard-navigation');\r\n        });\r\n\r\n        document.addEventListener('mousedown', () => {\r\n            document.body.classList.remove('keyboard-navigation');\r\n        });\r\n\r\n        // Add ARIA labels and roles\r\n        this.addAriaLabels();\r\n    }\r\n\r\n    addAriaLabels() {\r\n        // Add ARIA labels to tab navigation\r\n        const tabNav = document.querySelector('.tab-nav');\r\n        if (tabNav) {\r\n            tabNav.setAttribute('role', 'tablist');\r\n            tabNav.setAttribute('aria-label', 'UGC Studio Steps');\r\n        }\r\n\r\n        // Add ARIA labels to tab buttons\r\n        document.querySelectorAll('.tab-btn').forEach((btn, index) => {\r\n            btn.setAttribute('role', 'tab');\r\n            btn.setAttribute('aria-controls', `${btn.dataset.tab}-tab`);\r\n            btn.setAttribute('tabindex', index === 0 ? '0' : '-1');\r\n        });\r\n\r\n        // Add ARIA labels to tab panels\r\n        document.querySelectorAll('.tab-panel').forEach(panel => {\r\n            panel.setAttribute('role', 'tabpanel');\r\n            panel.setAttribute('tabindex', '0');\r\n        });\r\n    }\r\n\r\n    // Lazy Loading Implementation\r\n    initLazyLoading() {\r\n        // Check if IntersectionObserver is supported\r\n        if ('IntersectionObserver' in window) {\r\n            this.lazyImageObserver = new IntersectionObserver((entries, observer) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        const img = entry.target;\r\n                        this.loadImage(img);\r\n                        observer.unobserve(img);\r\n                    }\r\n                });\r\n            }, {\r\n                rootMargin: '50px 0px', // Start loading 50px before image enters viewport\r\n                threshold: 0.01\r\n            });\r\n        } else {\r\n            // Fallback for older browsers\r\n            this.lazyImageObserver = null;\r\n        }\r\n    }\r\n\r\n    loadImage(img) {\r\n        const src = img.dataset.src;\r\n        if (src) {\r\n            // Show loading placeholder\r\n            img.style.opacity = '0.5';\r\n            img.style.filter = 'blur(5px)';\r\n\r\n            // Create a new image to preload\r\n            const imageLoader = new Image();\r\n            imageLoader.onload = () => {\r\n                img.src = src;\r\n                img.removeAttribute('data-src');\r\n                img.classList.add('loaded');\r\n\r\n                // Smooth transition\r\n                img.style.transition = 'opacity 0.3s ease, filter 0.3s ease';\r\n                img.style.opacity = '1';\r\n                img.style.filter = 'none';\r\n            };\r\n            imageLoader.onerror = () => {\r\n                img.style.opacity = '1';\r\n                img.style.filter = 'none';\r\n                img.alt = 'Image failed to load';\r\n            };\r\n            imageLoader.src = src;\r\n        }\r\n    }\r\n\r\n    observeLazyImages() {\r\n        if (this.lazyImageObserver) {\r\n            const lazyImages = document.querySelectorAll('img[data-src]');\r\n            lazyImages.forEach(img => {\r\n                this.lazyImageObserver.observe(img);\r\n            });\r\n        } else {\r\n            // Fallback: load all images immediately\r\n            const lazyImages = document.querySelectorAll('img[data-src]');\r\n            lazyImages.forEach(img => this.loadImage(img));\r\n        }\r\n    }\r\n\r\n    async renderContentTypes() {\r\n        const container = document.querySelector('.content-type-grid');\r\n        if (!container) return;\r\n\r\n        const data = await this.getLocationData();\r\n        const contentTypes = data.content_types;\r\n\r\n        container.innerHTML = contentTypes.map(type => `\r\n            <div class=\"content-card ${type.id === 'unboxing' ? 'active' : ''}\" data-type=\"${type.id}\">\r\n                <i class='bx ${type.icon}'></i>\r\n                <span>${type.name}</span>\r\n            </div>\r\n        `).join('');\r\n    }\r\n\r\n    async renderAnalysisMethods() {\r\n        const container = document.querySelector('.method-options');\r\n        if (!container) return;\r\n\r\n        const data = await this.getLocationData();\r\n        const methods = data.analysis_methods;\r\n\r\n        container.innerHTML = methods.map(method => `\r\n            <div class=\"method-card ${method.active ? 'active' : ''}\" data-method=\"${method.id}\">\r\n                <i class='bx ${method.icon}'></i>\r\n                <h4>${method.name}</h4>\r\n                <p>${method.description}</p>\r\n            </div>\r\n        `).join('');\r\n    }\r\n\r\n    async renderPerformanceStyles() {\r\n        const container = document.querySelector('.performance-grid');\r\n        if (!container) return;\r\n\r\n        const data = await this.getLocationData();\r\n\r\n        container.innerHTML = `\r\n            <div class=\"selection-group\">\r\n                <label>Energy Level</label>\r\n                <div class=\"option-cards\">\r\n                    ${data.energy_levels.map(level => `\r\n                        <div class=\"option-card ${level.active ? 'active' : ''}\" data-value=\"${level.id}\">\r\n                            <i class='bx ${level.icon}'></i>\r\n                            <div class=\"content\">\r\n                                <span>${level.name}</span>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n            <div class=\"selection-group\">\r\n                <label>Tone</label>\r\n                <div class=\"option-cards\">\r\n                    ${data.tones.map(tone => `\r\n                        <div class=\"option-card ${tone.active ? 'active' : ''}\" data-value=\"${tone.id}\">\r\n                            <i class='bx ${tone.icon}'></i>\r\n                            <div class=\"content\">\r\n                                <span>${tone.name}</span>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    async renderHookStrategies() {\r\n        const container = document.querySelector('.hook-cards');\r\n        if (!container) return;\r\n\r\n        const data = await this.getLocationData();\r\n        const hooks = data.hook_strategies;\r\n\r\n        container.innerHTML = hooks.map(hook => `\r\n            <div class=\"option-card ${hook.active ? 'active' : ''}\" data-value=\"${hook.id}\">\r\n                <i class='bx ${hook.icon}'></i>\r\n                <div class=\"content\">\r\n                    <span>${hook.name}</span>\r\n                    <small>\"${hook.description}\"</small>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n    }\r\n\r\n    async renderEnhancementOptions() {\r\n        const container = document.querySelector('.enhancement-grid');\r\n        if (!container) return;\r\n\r\n        const data = await this.getLocationData();\r\n\r\n        container.innerHTML = `\r\n            <div class=\"selection-group\">\r\n                <label>Conversion Focus</label>\r\n                <div class=\"option-cards\">\r\n                    ${data.conversion_focus.map(focus => `\r\n                        <div class=\"option-card ${focus.active ? 'active' : ''}\" data-value=\"${focus.id}\">\r\n                            <i class='bx ${focus.icon}'></i>\r\n                            <div class=\"content\">\r\n                                <span>${focus.name}</span>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n            <div class=\"selection-group\">\r\n                <label>Visual Style</label>\r\n                <div class=\"option-cards\">\r\n                    ${data.visual_styles.map(style => `\r\n                        <div class=\"option-card ${style.active ? 'active' : ''}\" data-value=\"${style.id}\">\r\n                            <i class='bx ${style.icon}'></i>\r\n                            <div class=\"content\">\r\n                                <span>${style.name}</span>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    async renderActorCards() {\r\n        const actorContainer = document.querySelector('.character-cards');\r\n        console.log('Actor container found:', !!actorContainer);\r\n\r\n        if (!actorContainer) {\r\n            console.error('Actor container not found!');\r\n            return;\r\n        }\r\n\r\n        const actorData = await this.getActorData();\r\n        console.log('Actor data loaded:', actorData.length, 'actors');\r\n\r\n        const cardsHTML = actorData.map(actor => `\r\n            <div class=\"option-card ${actor.name === 'Jake' ? 'active' : ''}\" data-value=\"${actor.name}\">\r\n                <div class=\"actor-image-container\">\r\n                    <img data-src=\"${actor.image}\" alt=\"${actor.name} - ${actor.role}\" class=\"actor-image lazy-image\" src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='92' height='180' viewBox='0 0 92 180'%3E%3Crect width='92' height='180' fill='%23334155'/%3E%3Ctext x='50%25' y='50%25' font-family='Arial' font-size='12' fill='%23cbd5e1' text-anchor='middle' dominant-baseline='middle'%3ELoading...%3C/text%3E%3C/svg%3E\">\r\n                </div>\r\n                <div class=\"content\">\r\n                    <div class=\"actor-name\">${actor.name}</div>\r\n                    <div class=\"actor-details\">${actor.age} year old</div>\r\n                    <div class=\"actor-role\">${actor.role}</div>\r\n                    <div class=\"actor-bio\">${actor.bio}</div>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n\r\n        actorContainer.innerHTML = cardsHTML;\r\n        console.log('Actor cards rendered:', actorContainer.children.length);\r\n\r\n        // Add custom actor upload button\r\n        this.addCustomActorButton(actorContainer);\r\n\r\n        // Initialize lazy loading for newly added images\r\n        setTimeout(() => this.observeLazyImages(), 100);\r\n    }\r\n\r\n    async renderVisualSettings() {\r\n        // Render Platform options\r\n        const platformContainer = document.querySelector('[data-setting=\"platform\"] .option-cards');\r\n        if (platformContainer) {\r\n            const platformData = await this.getPlatformData();\r\n            platformContainer.innerHTML = platformData.map(platform => `\r\n                <div class=\"option-card ${platform.id === 'tiktok' ? 'active' : ''}\" data-value=\"${platform.id}\">\r\n                    <i class='bx ${platform.icon}'></i>\r\n                    <div class=\"content\">\r\n                        <span>${platform.name}</span>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Render Location options (excluding custom_scene)\r\n        const locationContainer = document.querySelector('.location-cards');\r\n        console.log('Location container found:', !!locationContainer);\r\n\r\n        if (locationContainer) {\r\n            const locationData = await this.getLocationDataList();\r\n            const filteredLocations = locationData.filter(location => location.id !== 'custom_scene');\r\n            console.log('Location data loaded:', filteredLocations.length, 'locations');\r\n\r\n            const locationHTML = filteredLocations.map(location => `\r\n                <div class=\"option-card ${location.id === 'office' ? 'active' : ''}\" data-value=\"${location.id}\">\r\n                    <i class='bx ${location.icon}'></i>\r\n                    <div class=\"content\">\r\n                        <span>${location.name}</span>\r\n                        <small>${location.description}</small>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n\r\n            locationContainer.innerHTML = locationHTML;\r\n            console.log('Location cards rendered:', locationContainer.children.length);\r\n\r\n            // Add event listeners to dynamically rendered location cards\r\n            locationContainer.querySelectorAll('.option-card').forEach(card => {\r\n                card.addEventListener('click', (e) => this.selectOption(e.currentTarget));\r\n            });\r\n\r\n            // Add custom scene upload button\r\n            this.addCustomSceneButton(locationContainer);\r\n        }\r\n\r\n        // Render Lighting options\r\n        const lightingContainer = document.querySelector('[data-setting=\"lighting\"] .option-cards');\r\n        if (lightingContainer) {\r\n            const lightingData = await this.getLightingData();\r\n            lightingContainer.innerHTML = lightingData.map(lighting => `\r\n                <div class=\"option-card ${lighting.id === 'natural' ? 'active' : ''}\" data-value=\"${lighting.id}\">\r\n                    <i class='bx ${lighting.icon}'></i>\r\n                    <div class=\"content\">\r\n                        <span>${lighting.name}</span>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Render Camera Style options\r\n        const cameraContainer = document.querySelector('[data-setting=\"camera\"] .option-cards');\r\n        if (cameraContainer) {\r\n            const cameraData = await this.getCameraData();\r\n            cameraContainer.innerHTML = cameraData.map(camera => `\r\n                <div class=\"option-card ${camera.id === 'handheld' ? 'active' : ''}\" data-value=\"${camera.id}\">\r\n                    <i class='bx ${camera.icon}'></i>\r\n                    <div class=\"content\">\r\n                        <span>${camera.name}</span>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        // Theme toggle\r\n        document.getElementById('theme-toggle')?.addEventListener('click', () => this.toggleTheme());\r\n\r\n        // New project\r\n        document.getElementById('new-project')?.addEventListener('click', () => this.newProject());\r\n\r\n        // Help toggle\r\n        document.getElementById('help-toggle')?.addEventListener('click', () => this.toggleKeyboardShortcuts());\r\n\r\n        // Tab navigation\r\n        document.querySelectorAll('.tab-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                const tab = e.currentTarget.dataset.tab;\r\n                if (tab) {\r\n                    this.switchTab(tab);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Navigation buttons\r\n        document.getElementById('prev-tab')?.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.previousTab();\r\n        });\r\n        document.getElementById('next-tab')?.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.nextTab();\r\n        });\r\n\r\n        // Use event delegation for dynamically created content\r\n        document.addEventListener('click', (e) => {\r\n            // Content type cards\r\n            if (e.target.closest('.content-card')) {\r\n                const card = e.target.closest('.content-card');\r\n                this.selectContentType(card.dataset.type);\r\n            }\r\n            \r\n            // Method selection cards\r\n            if (e.target.closest('.method-card')) {\r\n                const card = e.target.closest('.method-card');\r\n                this.selectAnalysisMethod(card.dataset.method);\r\n            }\r\n            \r\n            // Option cards (including actor cards)\r\n            if (e.target.closest('.option-card')) {\r\n                const card = e.target.closest('.option-card');\r\n                this.selectOption(card);\r\n            }\r\n            \r\n            // Manual description button\r\n            if (e.target.matches('#use-manual-btn') || e.target.closest('#use-manual-btn')) {\r\n                e.preventDefault();\r\n                this.useManualDescription();\r\n            }\r\n        });\r\n\r\n        // File upload with debugging\r\n        const uploadZone = document.getElementById('upload-zone');\r\n        const imageInput = document.getElementById('image-input');\r\n\r\n        console.log('Upload elements:', {uploadZone: !!uploadZone, imageInput: !!imageInput});\r\n\r\n        if (uploadZone && imageInput) {\r\n            uploadZone.addEventListener('click', (e) => {\r\n                console.log('Upload zone clicked');\r\n                // Don't prevent default, just trigger file input\r\n                imageInput.click();\r\n            });\r\n            uploadZone.addEventListener('dragover', (e) => this.handleDragOver(e));\r\n            uploadZone.addEventListener('dragleave', (e) => this.handleDragLeave(e));\r\n            uploadZone.addEventListener('drop', (e) => this.handleDrop(e));\r\n\r\n            imageInput.addEventListener('change', (e) => this.handleFileSelect(e));\r\n        }\r\n\r\n        // Generate prompt\r\n        document.getElementById('generate-prompt')?.addEventListener('click', () => this.generatePrompt());\r\n\r\n        // Copy prompt\r\n        document.getElementById('copy-prompt')?.addEventListener('click', () => this.copyPrompt());\r\n\r\n        // Regenerate prompt\r\n        document.getElementById('regenerate-prompt')?.addEventListener('click', () => this.generatePrompt());\r\n    }\r\n\r\n    // Theme Management\r\n    toggleTheme() {\r\n        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';\r\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\r\n        this.setTheme(newTheme);\r\n    }\r\n\r\n    setTheme(theme) {\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n        localStorage.setItem('theme', theme);\r\n\r\n        const themeIcon = document.querySelector('#theme-toggle i');\r\n        if (themeIcon) {\r\n            themeIcon.className = theme === 'dark' ? 'bx bx-sun' : 'bx bx-moon';\r\n        }\r\n    }\r\n\r\n    // Tab Management\r\n    switchTab(tabName) {\r\n        if (!tabName || this.currentTab === tabName) return;\r\n\r\n        console.log('Switching to tab:', tabName);\r\n        this.currentTab = tabName;\r\n\r\n        // Use requestAnimationFrame to ensure smooth transitions\r\n        requestAnimationFrame(() => {\r\n            // Update tab buttons\r\n            document.querySelectorAll('.tab-btn').forEach(btn => {\r\n                btn.classList.remove('active');\r\n                btn.setAttribute('aria-selected', 'false');\r\n            });\r\n            const targetBtn = document.querySelector(`[data-tab=\"${tabName}\"]`);\r\n            if (targetBtn) {\r\n                targetBtn.classList.add('active');\r\n                targetBtn.setAttribute('aria-selected', 'true');\r\n            }\r\n\r\n            // Update tab panels - hide all first\r\n            document.querySelectorAll('.tab-panel').forEach(panel => {\r\n                panel.classList.remove('active');\r\n                panel.style.display = 'none';\r\n                panel.setAttribute('aria-hidden', 'true');\r\n            });\r\n\r\n            // Show the target panel\r\n            const targetPanel = document.getElementById(`${tabName}-tab`);\r\n            if (targetPanel) {\r\n                targetPanel.classList.add('active');\r\n                targetPanel.style.display = 'block';\r\n                targetPanel.setAttribute('aria-hidden', 'false');\r\n            }\r\n\r\n            this.updateTabNavigation();\r\n        });\r\n    }\r\n\r\n    updateTabNavigation() {\r\n        const tabs = ['product', 'actor', 'visual', 'hook', 'generate'];\r\n        const currentIndex = tabs.indexOf(this.currentTab);\r\n\r\n        // Update progress bar\r\n        this.updateProgressBar(currentIndex);\r\n\r\n        // Mark previous steps as completed\r\n        document.querySelectorAll('.tab-btn').forEach((btn, index) => {\r\n            btn.classList.remove('completed');\r\n            if (index < currentIndex) {\r\n                btn.classList.add('completed');\r\n            }\r\n        });\r\n\r\n        const prevBtn = document.getElementById('prev-tab');\r\n        const nextBtn = document.getElementById('next-tab');\r\n\r\n        if (prevBtn) {\r\n            prevBtn.style.display = currentIndex > 0 ? 'flex' : 'none';\r\n        }\r\n\r\n        if (nextBtn) {\r\n            if (currentIndex < tabs.length - 1) {\r\n                nextBtn.style.display = 'flex';\r\n                nextBtn.innerHTML = `Next <i class='bx bx-chevron-right'></i>`;\r\n            } else {\r\n                nextBtn.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    updateProgressBar(currentStep) {\r\n        const progressLine = document.getElementById('progress-line');\r\n        if (!progressLine) return;\r\n\r\n        // Calculate progress percentage (0% to 80% to leave room for the last circle)\r\n        const totalSteps = 5;\r\n        const progressPercent = (currentStep / (totalSteps - 1)) * 80;\r\n\r\n        progressLine.style.width = `${progressPercent}%`;\r\n    }\r\n\r\n    previousTab() {\r\n        const tabs = ['product', 'actor', 'visual', 'hook', 'generate'];\r\n        const currentIndex = tabs.indexOf(this.currentTab);\r\n        if (currentIndex > 0) {\r\n            this.switchTab(tabs[currentIndex - 1]);\r\n        }\r\n    }\r\n\r\n    nextTab() {\r\n        const tabs = ['product', 'actor', 'visual', 'hook', 'generate'];\r\n        const currentIndex = tabs.indexOf(this.currentTab);\r\n        if (currentIndex < tabs.length - 1) {\r\n            this.switchTab(tabs[currentIndex + 1]);\r\n        }\r\n    }\r\n\r\n    // Selection Management\r\n    selectContentType(type) {\r\n        this.selectedOptions.contentType = type;\r\n\r\n        document.querySelectorAll('.content-card').forEach(card => {\r\n            card.classList.remove('active');\r\n        });\r\n        document.querySelector(`[data-type=\"${type}\"]`)?.classList.add('active');\r\n    }\r\n\r\n    selectAnalysisMethod(method) {\r\n        this.selectedOptions.analysisMethod = method;\r\n\r\n        document.querySelectorAll('.method-card').forEach(card => {\r\n            card.classList.remove('active');\r\n        });\r\n        document.querySelector(`[data-method=\"${method}\"]`)?.classList.add('active');\r\n\r\n        // Show/hide upload zone and manual zone\r\n        const uploadZone = document.getElementById('upload-zone');\r\n        const manualZone = document.getElementById('manual-zone');\r\n\r\n        if (method === 'upload') {\r\n            uploadZone.style.display = 'block';\r\n            manualZone.style.display = 'none';\r\n        } else {\r\n            uploadZone.style.display = 'none';\r\n            manualZone.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    addCustomSceneButton(locationContainer) {\r\n        const customSceneButton = document.createElement('button');\r\n        customSceneButton.className = 'btn btn-secondary custom-scene-btn';\r\n        customSceneButton.innerHTML = `\r\n            <i class='bx bx-camera-plus'></i>\r\n            Upload Custom Scene\r\n        `;\r\n\r\n        customSceneButton.addEventListener('click', () => {\r\n            this.showSceneUploader();\r\n        });\r\n\r\n        // Insert after location cards\r\n        const parentContainer = locationContainer.parentNode;\r\n        parentContainer.appendChild(customSceneButton);\r\n    }\r\n\r\n    addCustomActorButton(actorContainer) {\r\n        const customActorButton = document.createElement('button');\r\n        customActorButton.className = 'btn btn-secondary custom-actor-btn';\r\n        customActorButton.innerHTML = `\r\n            <i class='bx bx-user-plus'></i>\r\n            Upload Custom Actor\r\n        `;\r\n\r\n        customActorButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            console.log('Custom actor button clicked');\r\n            this.showActorUploader();\r\n        });\r\n\r\n        // Insert after actor cards\r\n        const parentContainer = actorContainer.parentNode;\r\n        parentContainer.appendChild(customActorButton);\r\n    }\r\n\r\n    selectOption(card) {\r\n        const group = card.closest('.selection-group');\r\n        if (!group) return;\r\n\r\n        // Remove active from siblings\r\n        group.querySelectorAll('.option-card').forEach(c => c.classList.remove('active'));\r\n\r\n        // Add active to clicked card\r\n        card.classList.add('active');\r\n\r\n        // Store selection based on data attribute\r\n        const value = card.dataset.value;\r\n        const groupLabel = group.querySelector('label')?.textContent?.toLowerCase().replace(/\\s+/g, '');\r\n\r\n        // Map selections to our options object\r\n        if (groupLabel?.includes('age')) this.selectedOptions.creatorAge = value;\r\n        else if (groupLabel?.includes('creator') || groupLabel?.includes('style')) this.selectedOptions.creatorStyle = value;\r\n        else if (groupLabel?.includes('character') || groupLabel?.includes('archetype')) this.selectedOptions.characterArchetype = value;\r\n        else if (groupLabel?.includes('energy')) this.selectedOptions.energyLevel = value;\r\n        else if (groupLabel?.includes('tone')) this.selectedOptions.tone = value;\r\n        else if (groupLabel?.includes('platform')) this.selectedOptions.platform = value;\r\n        else if (groupLabel?.includes('location')) this.selectedOptions.location = value;\r\n        else if (groupLabel?.includes('lighting')) this.selectedOptions.lighting = value;\r\n        else if (groupLabel?.includes('camera')) this.selectedOptions.cameraStyle = value;\r\n        else if (groupLabel?.includes('hook')) this.selectedOptions.hookStrategy = value;\r\n        else if (groupLabel?.includes('conversion')) this.selectedOptions.conversionFocus = value;\r\n        else if (groupLabel?.includes('visual')) this.selectedOptions.visualStyle = value;\r\n    }\r\n\r\n    showSceneUploader() {\r\n        const existingUploader = document.getElementById('scene-uploader');\r\n        if (existingUploader) {\r\n            existingUploader.remove();\r\n        }\r\n\r\n        const locationSection = document.querySelector('.location-showcase .card-content');\r\n        if (!locationSection) return;\r\n\r\n        const uploader = document.createElement('div');\r\n        uploader.id = 'scene-uploader';\r\n        uploader.className = 'scene-upload-zone';\r\n        uploader.innerHTML = `\r\n            <div class=\"scene-upload-content\">\r\n                <i class='bx bx-camera-plus'></i>\r\n                <h4>Upload Scene Photo</h4>\r\n                <p>Drop your room/location photo here or click to browse</p>\r\n                <small>PNG, JPG, JPEG • Max 16MB</small>\r\n                <input type=\"file\" id=\"scene-input\" accept=\"image/*\" style=\"display: none;\">\r\n                <button class=\"btn btn-sm btn-secondary close-uploader\">\r\n                    <i class='bx bx-x'></i> Cancel\r\n                </button>\r\n            </div>\r\n        `;\r\n\r\n        locationSection.appendChild(uploader);\r\n\r\n        const sceneInput = uploader.querySelector('#scene-input');\r\n        const closeBtn = uploader.querySelector('.close-uploader');\r\n\r\n        uploader.addEventListener('click', (e) => {\r\n            if (e.target !== closeBtn && !closeBtn.contains(e.target)) {\r\n                sceneInput.click();\r\n            }\r\n        });\r\n        uploader.addEventListener('dragover', (e) => this.handleDragOver(e));\r\n        uploader.addEventListener('dragleave', (e) => this.handleDragLeave(e));\r\n        uploader.addEventListener('drop', (e) => this.handleSceneDrop(e));\r\n        sceneInput.addEventListener('change', (e) => this.handleSceneSelect(e));\r\n        closeBtn.addEventListener('click', () => uploader.remove());\r\n    }\r\n\r\n    handleSceneDrop(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.currentTarget.classList.remove('dragover');\r\n\r\n        const files = e.dataTransfer.files;\r\n        if (files.length > 0) {\r\n            this.processSceneFile(files[0]);\r\n        }\r\n    }\r\n\r\n    handleSceneSelect(e) {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            this.processSceneFile(file);\r\n        }\r\n    }\r\n\r\n    processSceneFile(file) {\r\n        if (!file.type.startsWith('image/')) {\r\n            this.showToast('Please select a valid image file', 'error');\r\n            return;\r\n        }\r\n\r\n        if (file.size > 16 * 1024 * 1024) {\r\n            this.showToast('File size must be less than 16MB', 'error');\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            this.analyzeScene(e.target.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    analyzeScene(imageData) {\r\n        this.showLoading('Analyzing your scene...');\r\n\r\n        fetch('/analyze-scene', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                image: imageData\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.hideLoading();\r\n            if (data.success) {\r\n                this.sceneData = data.scene_analysis;\r\n                this.displaySceneResults(data.scene_analysis);\r\n                this.showToast('Scene analysis complete! 🎬', 'success');\r\n            } else {\r\n                this.showToast(data.error || 'Scene analysis failed', 'error');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.hideLoading();\r\n            this.showToast('Scene analysis failed: ' + error.message, 'error');\r\n        });\r\n    }\r\n\r\n    displaySceneResults(sceneAnalysis) {\r\n        const uploader = document.getElementById('scene-uploader');\r\n        if (!uploader) return;\r\n\r\n        uploader.innerHTML = `\r\n            <div class=\"scene-results\">\r\n                <i class='bx bx-check-circle'></i>\r\n                <h4>Scene Analyzed Successfully!</h4>\r\n                <p class=\"scene-description\">${sceneAnalysis.scene_description}</p>\r\n                <div class=\"scene-actions\">\r\n                    <button class=\"btn btn-sm btn-secondary\" onclick=\"this.closest('#scene-uploader').remove(); app.showSceneUploader()\">\r\n                        <i class='bx bx-refresh'></i> Upload Different Scene\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-primary\" onclick=\"this.closest('#scene-uploader').remove()\">\r\n                        <i class='bx bx-check'></i> Use This Scene\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Set custom scene as selected location\r\n        this.selectedOptions.location = 'custom_scene';\r\n    }\r\n\r\n    showActorUploader() {\r\n        // Remove any existing uploader and input\r\n        const existingUploader = document.getElementById('actor-uploader');\r\n        if (existingUploader) {\r\n            existingUploader.remove();\r\n        }\r\n        \r\n        const existingInput = document.getElementById('actor-input');\r\n        if (existingInput) {\r\n            existingInput.remove();\r\n        }\r\n\r\n        const actorSection = document.querySelector('#actor-tab .card-content');\r\n        if (!actorSection) {\r\n            console.error('Actor section not found');\r\n            return;\r\n        }\r\n\r\n        const uploader = document.createElement('div');\r\n        uploader.id = 'actor-uploader';\r\n        uploader.className = 'scene-upload-zone';\r\n        \r\n        // Create and configure file input separately\r\n        const actorFileInput = document.createElement('input');\r\n        actorFileInput.type = 'file';\r\n        actorFileInput.id = 'actor-input';\r\n        actorFileInput.accept = 'image/*';\r\n        actorFileInput.style.display = 'none';\r\n        \r\n        uploader.innerHTML = `\r\n            <div class=\"scene-upload-content\">\r\n                <i class='bx bx-user-plus'></i>\r\n                <h4>Upload Actor Photo</h4>\r\n                <p>Drop your actor photo here or click to browse</p>\r\n                <small>PNG, JPG, JPEG • Max 16MB</small>\r\n                <button class=\"btn btn-sm btn-secondary close-uploader\">\r\n                    <i class='bx bx-x'></i> Cancel\r\n                </button>\r\n            </div>\r\n        `;\r\n        \r\n        // Append input to uploader first\r\n        uploader.appendChild(actorFileInput);\r\n        \r\n        // Append to DOM\r\n        actorSection.appendChild(uploader);\r\n\r\n        const closeBtn = uploader.querySelector('.close-uploader');\r\n\r\n        // Add event listeners\r\n        uploader.addEventListener('click', (e) => {\r\n            console.log('Actor uploader clicked');\r\n            if (e.target !== closeBtn && !closeBtn.contains(e.target)) {\r\n                console.log('Triggering file input click');\r\n                actorFileInput.click();\r\n            }\r\n        });\r\n        \r\n        uploader.addEventListener('dragover', (e) => this.handleDragOver(e));\r\n        uploader.addEventListener('dragleave', (e) => this.handleDragLeave(e));\r\n        uploader.addEventListener('drop', (e) => this.handleActorDrop(e));\r\n        \r\n        // Add change event listener\r\n        actorFileInput.addEventListener('change', (e) => {\r\n            console.log('Actor input change triggered', e.target.files);\r\n            this.handleActorSelect(e);\r\n        });\r\n        \r\n        closeBtn.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            uploader.remove();\r\n        });\r\n    }\r\n\r\n    handleActorDrop(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.currentTarget.classList.remove('dragover');\r\n\r\n        const files = e.dataTransfer.files;\r\n        if (files.length > 0) {\r\n            this.processActorFile(files[0]);\r\n        }\r\n    }\r\n\r\n    handleActorSelect(e) {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            this.processActorFile(file);\r\n        }\r\n    }\r\n\r\n    processActorFile(file) {\r\n        if (!file.type.startsWith('image/')) {\r\n            this.showToast('Please select a valid image file', 'error');\r\n            return;\r\n        }\r\n\r\n        if (file.size > 16 * 1024 * 1024) {\r\n            this.showToast('File size must be less than 16MB', 'error');\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            this.analyzeActor(e.target.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    analyzeActor(imageData) {\r\n        this.showLoading('Analyzing actor image...');\r\n\r\n        fetch('/analyze-actor', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                image: imageData\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.hideLoading();\r\n            if (data.success) {\r\n                this.actorData = data.actor_analysis;\r\n                this.displayActorResults(data.actor_analysis);\r\n                this.showToast('Actor analysis complete! 🎭', 'success');\r\n            } else {\r\n                this.showToast(data.error || 'Actor analysis failed', 'error');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.hideLoading();\r\n            this.showToast('Actor analysis failed: ' + error.message, 'error');\r\n        });\r\n    }\r\n\r\n    displayActorResults(actorAnalysis) {\r\n        const uploader = document.getElementById('actor-uploader');\r\n        if (!uploader) return;\r\n\r\n        uploader.innerHTML = `\r\n            <div class=\"scene-results\">\r\n                <i class='bx bx-check-circle'></i>\r\n                <h4>Actor Analyzed Successfully!</h4>\r\n                <p class=\"scene-description\">${actorAnalysis.actor_description}</p>\r\n                <div class=\"scene-actions\">\r\n                    <button class=\"btn btn-sm btn-secondary\" onclick=\"this.closest('#actor-uploader').remove(); app.showActorUploader()\">\r\n                        <i class='bx bx-refresh'></i> Upload Different Actor\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-primary\" onclick=\"this.closest('#actor-uploader').remove()\">\r\n                        <i class='bx bx-check'></i> Use This Actor\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Set custom actor as selected\r\n        this.selectedOptions.characterArchetype = 'custom_actor';\r\n        \r\n        // Deselect other actor cards\r\n        document.querySelectorAll('.character-cards .option-card').forEach(card => {\r\n            card.classList.remove('active');\r\n        });\r\n    }\r\n\r\n    // File Upload Management\r\n    handleDragOver(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.currentTarget.classList.add('dragover');\r\n    }\r\n\r\n    handleDragLeave(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.currentTarget.classList.remove('dragover');\r\n    }\r\n\r\n    handleDrop(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.currentTarget.classList.remove('dragover');\r\n\r\n        const files = e.dataTransfer.files;\r\n        if (files.length > 0) {\r\n            this.processFile(files[0]);\r\n        }\r\n    }\r\n\r\n    handleFileSelect(e) {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            this.processFile(file);\r\n        }\r\n    }\r\n\r\n    processFile(file) {\r\n        if (!file.type.startsWith('image/')) {\r\n            this.showToast('Please select a valid image file', 'error');\r\n            return;\r\n        }\r\n\r\n        if (file.size > 16 * 1024 * 1024) {\r\n            this.showToast('File size must be less than 16MB', 'error');\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            this.analyzeImage(e.target.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    analyzeImage(imageData) {\r\n        this.showLoading('Analyzing your product image...');\r\n\r\n        fetch('/analyze', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                image: imageData\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.hideLoading();\r\n            if (data.success) {\r\n                this.analysisData = data.analysis;\r\n                this.displayAnalysisResults(data.analysis);\r\n                this.populateFormFromAnalysis(data.analysis);\r\n                this.showToast('Product analysis complete! 🎉', 'success');\r\n            } else {\r\n                this.showToast(data.error || 'Analysis failed', 'error');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.hideLoading();\r\n            this.showToast('Analysis failed: ' + error.message, 'error');\r\n        });\r\n    }\r\n\r\n    displayAnalysisResults(analysis) {\r\n        const resultsContainer = document.getElementById('analysis-results');\r\n        const previewContainer = document.getElementById('analysis-preview');\r\n\r\n        if (!resultsContainer || !previewContainer) return;\r\n\r\n        previewContainer.innerHTML = `\r\n            <div class=\"analysis-item\">\r\n                <h4><i class='bx bx-tag'></i> Product Name</h4>\r\n                <p>${analysis.product_name || 'Not detected'}</p>\r\n            </div>\r\n            <div class=\"analysis-item\">\r\n                <h4><i class='bx bx-category'></i> Product Type</h4>\r\n                <p>${analysis.product_type || 'Not detected'}</p>\r\n            </div>\r\n            <div class=\"analysis-item\">\r\n                <h4><i class='bx bx-detail'></i> Description</h4>\r\n                <p>${analysis.detailed_description || 'No description available'}</p>\r\n            </div>\r\n            <div class=\"analysis-item\">\r\n                <h4><i class='bx bx-star'></i> Key Features</h4>\r\n                <p>${Array.isArray(analysis.key_features) ? analysis.key_features.join(', ') : 'None detected'}</p>\r\n            </div>\r\n        `;\r\n\r\n        resultsContainer.style.display = 'block';\r\n\r\n        // Auto-advance to next tab after a moment\r\n        setTimeout(() => {\r\n            this.switchTab('actor');\r\n        }, 2000);\r\n    }\r\n\r\n    populateFormFromAnalysis(analysis) {\r\n        // Populate product name\r\n        const productNameInput = document.getElementById('product-name');\r\n        if (productNameInput && analysis.product_name) {\r\n            productNameInput.value = analysis.product_name;\r\n        }\r\n\r\n        // Set suggested content type based on product\r\n        if (analysis.suggested_setting && analysis.suggested_setting.includes('unboxing')) {\r\n            this.selectContentType('unboxing');\r\n        }\r\n    }\r\n\r\n    // Manual Description\r\n    useManualDescription() {\r\n        const productName = document.getElementById('product-name')?.value;\r\n        const description = document.getElementById('manual-description')?.value;\r\n\r\n        if (!productName || !description) {\r\n            this.showToast('Please provide both product name and description', 'error');\r\n            return;\r\n        }\r\n\r\n        this.analysisData = {\r\n            product_name: productName,\r\n            product_type: 'Manual Entry',\r\n            detailed_description: description,\r\n            key_features: [],\r\n            visual_style: 'User-provided description',\r\n            suggested_setting: 'Based on description',\r\n            emotional_appeal: 'User-defined'\r\n        };\r\n\r\n        this.displayAnalysisResults(this.analysisData);\r\n        this.showToast('Manual description added successfully! 📝', 'success');\r\n    }\r\n\r\n    // Prompt Generation\r\n    async generatePrompt() {\r\n        if (!this.analysisData && this.selectedOptions.analysisMethod === 'upload') {\r\n            this.showToast('Please upload and analyze a product image first', 'error');\r\n            this.switchTab('product');\r\n            return;\r\n        }\r\n\r\n        if (this.selectedOptions.analysisMethod === 'manual') {\r\n            this.useManualDescription();\r\n            if (!this.analysisData) return;\r\n        }\r\n\r\n        this.showLoading('Generating your UGC prompt...');\r\n\r\n        // Generate prompt using pure template logic (no backend call)\r\n        const promptData = await this.buildPromptFromTemplate();\r\n\r\n        this.hideLoading();\r\n        this.displayGeneratedPrompt(promptData);\r\n        this.showToast('Prompt generated successfully! 🎬', 'success');\r\n    }\r\n\r\n    async buildPromptFromTemplate() {\r\n        const productName = document.getElementById('product-name')?.value || this.analysisData?.product_name || 'Unknown';\r\n        const productDescription = this.analysisData?.detailed_description || 'Product details not available';\r\n\r\n        // Get actor description - check for custom actor first\r\n        let actorDescription;\r\n        if (this.selectedOptions.characterArchetype === 'custom_actor' && this.actorData?.actor_description) {\r\n            actorDescription = this.actorData.actor_description;\r\n        } else {\r\n            // Get actor data directly from the selected name\r\n            const actorData = await this.getActorData();\r\n            const selectedActor = actorData.find(actor => actor.name === this.selectedOptions.characterArchetype);\r\n            actorDescription = selectedActor ? selectedActor.description : actorData[0].description;\r\n        }\r\n\r\n        console.log('Selected Actor Name:', this.selectedOptions.characterArchetype);\r\n        console.log('Actor Description:', actorDescription);\r\n        console.log('Selected Options:', this.selectedOptions);\r\n\r\n        // Build action based on content type and extract key features from product description\r\n        let action = '';\r\n        const keyFeatures = this.extractProductFeatures(productDescription);\r\n\r\n        switch(this.selectedOptions.contentType) {\r\n            case 'unboxing':\r\n                action = `unboxing and revealing the ${productName} with genuine excitement and surprise reactions, highlighting ${keyFeatures}`;\r\n                break;\r\n            case 'review':\r\n                action = `reviewing the ${productName} with detailed examination and authentic reactions, demonstrating key features and benefits`;\r\n                break;\r\n            case 'demo':\r\n                action = `demonstrating the ${productName} in action, showing practical use cases and highlighting performance`;\r\n                break;\r\n            default:\r\n                action = `showcasing the ${productName} with authentic enthusiasm and natural reactions`;\r\n        }\r\n\r\n        // Build hook based on strategy\r\n        let dialogue = '';\r\n        const customHook = document.getElementById('custom-message')?.value;\r\n        if (customHook) {\r\n            dialogue = customHook;\r\n        } else {\r\n            switch(this.selectedOptions.hookStrategy) {\r\n                case 'problem_solution':\r\n                    dialogue = `I found the solution everyone's been looking for`;\r\n                    break;\r\n                case 'trending':\r\n                    dialogue = `Everyone's talking about this ${productName} - here's why`;\r\n                    break;\r\n                case 'review':\r\n                    dialogue = `Here's my honest review of the ${productName}`;\r\n                    break;\r\n                default:\r\n                    dialogue = `Everyone's talking about this ${productName} - here's why`;\r\n            }\r\n        }\r\n\r\n        // Build the complete prompt\r\n        const settingDesc = await this.getSettingDescription();\r\n        const lightingDesc = await this.getLightingDescription();\r\n        const cameraDesc = await this.getCameraDescription();\r\n\r\n        const prompt = `PRODUCT (read this exactly; use as visual ground truth):\r\n${productDescription}\r\n\r\nDO NOT SUBSTITUTE ANOTHER PRODUCT. Keep exact branding/text/colors.\r\n\r\nUGC advert. Duration 8 seconds. Aspect 9:16.\r\nSetting: ${settingDesc}, ${lightingDesc}. Camera: ${cameraDesc}.\r\nActor: ${actorDescription}\r\nAction: ${action}\r\nDialogue (to camera): ${dialogue}\r\nNo Subtitles. Audio: clear voice, faint room tone only.`;\r\n\r\n        return { prompt: prompt };\r\n    }\r\n\r\n    async getSettingDescription() {\r\n        // If custom scene is selected and we have scene data, use that\r\n        if (this.selectedOptions.location === 'custom_scene' && this.sceneData?.scene_description) {\r\n            return this.sceneData.scene_description;\r\n        }\r\n\r\n        const locationData = await this.getLocationDataList();\r\n        const selectedLocation = locationData.find(loc => loc.id === this.selectedOptions.location);\r\n        return selectedLocation ? (selectedLocation.prompt_description || selectedLocation.description) : 'comfortable indoor setting';\r\n    }\r\n\r\n    async getLightingDescription() {\r\n        const lightingData = await this.getLightingData();\r\n        const selectedLighting = lightingData.find(light => light.id === this.selectedOptions.lighting);\r\n        return selectedLighting ? selectedLighting.description : 'natural lighting';\r\n    }\r\n\r\n    async getCameraDescription() {\r\n        const cameraData = await this.getCameraData();\r\n        const selectedCamera = cameraData.find(cam => cam.id === this.selectedOptions.cameraStyle);\r\n        return selectedCamera ? selectedCamera.description : 'handheld camera work';\r\n    }\r\n\r\n    displayGeneratedPrompt(promptData) {\r\n        const promptDisplay = document.getElementById('prompt-display');\r\n        const promptResults = document.getElementById('prompt-results');\r\n\r\n        if (!promptDisplay || !promptResults) return;\r\n\r\n        promptDisplay.textContent = promptData.prompt || 'No prompt generated';\r\n        promptResults.style.display = 'block';\r\n\r\n        // Auto-scroll to results\r\n        promptResults.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    copyPrompt() {\r\n        const promptText = document.getElementById('prompt-display')?.textContent;\r\n        if (!promptText) return;\r\n\r\n        navigator.clipboard.writeText(promptText).then(() => {\r\n            this.showToast('Prompt copied to clipboard! 📋', 'success');\r\n        }).catch(() => {\r\n            this.showToast('Failed to copy prompt', 'error');\r\n        });\r\n    }\r\n\r\n    // Utility Functions\r\n    newProject() {\r\n        if (confirm('Start a new project? This will clear all current data.')) {\r\n            location.reload();\r\n        }\r\n    }\r\n\r\n    showLoading(message = 'Loading...') {\r\n        const overlay = document.getElementById('loading-overlay');\r\n        const text = overlay?.querySelector('.loading-text');\r\n\r\n        if (text) text.textContent = message;\r\n        if (overlay) overlay.style.display = 'flex';\r\n    }\r\n\r\n    hideLoading() {\r\n        const overlay = document.getElementById('loading-overlay');\r\n        if (overlay) overlay.style.display = 'none';\r\n    }\r\n\r\n    async getLocationData() {\r\n        if (!this.locationData) {\r\n            try {\r\n                const response = await fetch('/static/data/locations.json');\r\n                const data = await response.json();\r\n                this.locationData = data;\r\n            } catch (error) {\r\n                console.error('Error loading location data:', error);\r\n                this.locationData = { platforms: [], locations: [], lighting: [], camera: [] };\r\n            }\r\n        }\r\n        return this.locationData;\r\n    }\r\n\r\n    async getPlatformData() {\r\n        const data = await this.getLocationData();\r\n        return data.platforms;\r\n    }\r\n\r\n    async getLocationDataList() {\r\n        const data = await this.getLocationData();\r\n        return data.locations;\r\n    }\r\n\r\n    async getLightingData() {\r\n        const data = await this.getLocationData();\r\n        return data.lighting;\r\n    }\r\n\r\n    async getCameraData() {\r\n        const data = await this.getLocationData();\r\n        return data.camera;\r\n    }\r\n\r\n    async getActorData() {\r\n        if (!this.actorData) {\r\n            try {\r\n                const response = await fetch('/static/data/actors.json');\r\n                const data = await response.json();\r\n                this.actorData = data.actors;\r\n            } catch (error) {\r\n                console.error('Error loading actor data:', error);\r\n                this.actorData = [];\r\n            }\r\n        }\r\n        return this.actorData;\r\n    }\r\n\r\n    extractProductFeatures(description) {\r\n        if (!description) return 'the distinctive features';\r\n\r\n        const descLower = description.toLowerCase();\r\n        const features = [];\r\n\r\n        // Look for colors\r\n        const colors = ['white', 'black', 'beige', 'brown', 'blue', 'red', 'green', 'yellow', 'gray', 'silver', 'gold'];\r\n        const foundColors = colors.filter(color => descLower.includes(color));\r\n        if (foundColors.length > 0) {\r\n            features.push(`the ${foundColors.join(' and ')} styling`);\r\n        }\r\n\r\n        // Look for materials\r\n        const materials = ['leather', 'suede', 'fabric', 'metal', 'plastic', 'rubber'];\r\n        const foundMaterials = materials.filter(material => descLower.includes(material));\r\n        if (foundMaterials.length > 0) {\r\n            features.push(`premium ${foundMaterials.join(' and ')} construction`);\r\n        }\r\n\r\n        // Look for brand name\r\n        if (descLower.includes('nikki')) {\r\n            features.push('the distinctive NIKKI branding');\r\n        } else if (descLower.includes('nike')) {\r\n            features.push('the iconic Nike branding');\r\n        }\r\n\r\n        // Look for specific product features\r\n        if (descLower.includes('cushioned') || descLower.includes('comfort')) {\r\n            features.push('the enhanced comfort features');\r\n        }\r\n\r\n        return features.length > 0 ? features.join(', ') : 'the distinctive design and quality craftsmanship';\r\n    }\r\n\r\n    showToast(message, type = 'info') {\r\n        const container = document.getElementById('toast-container');\r\n        if (!container) return;\r\n\r\n        const toast = document.createElement('div');\r\n        toast.className = `toast ${type}`;\r\n\r\n        const icon = type === 'success' ? 'bx-check-circle' :\r\n                    type === 'error' ? 'bx-error-circle' : 'bx-info-circle';\r\n\r\n        toast.innerHTML = `\r\n            <i class='bx ${icon}'></i>\r\n            <span>${message}</span>\r\n        `;\r\n\r\n        container.appendChild(toast);\r\n\r\n        // Enhanced toast with better animations\r\n        setTimeout(() => {\r\n            toast.classList.add('removing');\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.parentNode.removeChild(toast);\r\n                }\r\n            }, 300);\r\n        }, 5000);\r\n\r\n        // Remove on click\r\n        toast.addEventListener('click', () => {\r\n            toast.classList.add('removing');\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.parentNode.removeChild(toast);\r\n                }\r\n            }, 300);\r\n        });\r\n    }\r\n\r\n    // Enhanced button states\r\n    setButtonState(button, state) {\r\n        if (!button) return;\r\n\r\n        button.classList.remove('loading', 'success', 'error');\r\n        \r\n        switch (state) {\r\n            case 'loading':\r\n                button.classList.add('loading');\r\n                button.disabled = true;\r\n                break;\r\n            case 'success':\r\n                button.classList.add('success');\r\n                button.disabled = false;\r\n                setTimeout(() => {\r\n                    button.classList.remove('success');\r\n                }, 2000);\r\n                break;\r\n            case 'error':\r\n                button.classList.add('error');\r\n                button.disabled = false;\r\n                setTimeout(() => {\r\n                    button.classList.remove('error');\r\n                }, 3000);\r\n                break;\r\n            default:\r\n                button.disabled = false;\r\n        }\r\n    }\r\n\r\n    // Enhanced tab switching with animations\r\n    switchTab(tabName) {\r\n        if (!tabName || this.currentTab === tabName) return;\r\n\r\n        console.log('Switching to tab:', tabName);\r\n        \r\n        // Add exit animation to current tab\r\n        const currentPanel = document.getElementById(`${this.currentTab}-tab`);\r\n        if (currentPanel) {\r\n            currentPanel.classList.add('exiting');\r\n        }\r\n\r\n        this.currentTab = tabName;\r\n\r\n        // Use requestAnimationFrame to ensure smooth transitions\r\n        requestAnimationFrame(() => {\r\n            // Update tab buttons\r\n            document.querySelectorAll('.tab-btn').forEach(btn => {\r\n                btn.classList.remove('active');\r\n                btn.setAttribute('aria-selected', 'false');\r\n                btn.setAttribute('tabindex', '-1');\r\n            });\r\n            \r\n            const targetBtn = document.querySelector(`[data-tab=\"${tabName}\"]`);\r\n            if (targetBtn) {\r\n                targetBtn.classList.add('active');\r\n                targetBtn.setAttribute('aria-selected', 'true');\r\n                targetBtn.setAttribute('tabindex', '0');\r\n                targetBtn.focus();\r\n            }\r\n\r\n            // Update tab panels with smooth transition\r\n            setTimeout(() => {\r\n                document.querySelectorAll('.tab-panel').forEach(panel => {\r\n                    panel.classList.remove('active', 'exiting');\r\n                    panel.style.display = 'none';\r\n                    panel.setAttribute('aria-hidden', 'true');\r\n                });\r\n\r\n                const targetPanel = document.getElementById(`${tabName}-tab`);\r\n                if (targetPanel) {\r\n                    targetPanel.classList.add('active');\r\n                    targetPanel.style.display = 'block';\r\n                    targetPanel.setAttribute('aria-hidden', 'false');\r\n                }\r\n\r\n                this.updateTabNavigation();\r\n                this.updateStepCompletion();\r\n            }, 200);\r\n        });\r\n    }\r\n\r\n    // Load saved data on initialization\r\n    loadSavedData() {\r\n        try {\r\n            const savedData = localStorage.getItem('ugc_studio_autosave');\r\n            if (savedData) {\r\n                const data = JSON.parse(savedData);\r\n                \r\n                // Restore selected options\r\n                if (data.selectedOptions) {\r\n                    this.selectedOptions = { ...this.selectedOptions, ...data.selectedOptions };\r\n                }\r\n                \r\n                // Restore analysis data\r\n                if (data.analysisData) {\r\n                    this.analysisData = data.analysisData;\r\n                }\r\n                \r\n                // Restore other data\r\n                if (data.actorData) this.actorData = data.actorData;\r\n                if (data.sceneData) this.sceneData = data.sceneData;\r\n                \r\n                // Restore current tab\r\n                if (data.currentTab) {\r\n                    this.currentTab = data.currentTab;\r\n                }\r\n                \r\n                this.showToast('Previous session restored! 🔄', 'info');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load saved data:', error);\r\n        }\r\n    }\r\n\r\n    // Enhanced file processing with progress\r\n    processFile(file) {\r\n        if (!file.type.startsWith('image/')) {\r\n            this.showToast('Please select a valid image file', 'error');\r\n            return;\r\n        }\r\n\r\n        if (file.size > 16 * 1024 * 1024) {\r\n            this.showToast('File size must be less than 16MB', 'error');\r\n            return;\r\n        }\r\n\r\n        // Add uploading state to upload zone\r\n        const uploadZone = document.getElementById('upload-zone');\r\n        if (uploadZone) {\r\n            uploadZone.classList.add('uploading');\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            this.analyzeImage(e.target.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    // Enhanced image analysis with better feedback\r\n    analyzeImage(imageData) {\r\n        this.showLoading('Analyzing your product image...');\r\n        \r\n        const analyzeBtn = document.querySelector('.upload-zone');\r\n        this.setButtonState(analyzeBtn, 'loading');\r\n\r\n        fetch('/analyze', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                image: imageData\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.hideLoading();\r\n            \r\n            // Remove uploading state\r\n            const uploadZone = document.getElementById('upload-zone');\r\n            if (uploadZone) {\r\n                uploadZone.classList.remove('uploading');\r\n            }\r\n            \r\n            if (data.success) {\r\n                this.analysisData = data.analysis;\r\n                this.displayAnalysisResults(data.analysis);\r\n                this.populateFormFromAnalysis(data.analysis);\r\n                this.setButtonState(analyzeBtn, 'success');\r\n                this.showToast('Product analysis complete! 🎉', 'success');\r\n                \r\n                // Auto-advance to next tab after a moment\r\n                setTimeout(() => {\r\n                    this.switchTab('actor');\r\n                }, 2000);\r\n            } else {\r\n                this.setButtonState(analyzeBtn, 'error');\r\n                this.showToast(data.error || 'Analysis failed', 'error');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.hideLoading();\r\n            const uploadZone = document.getElementById('upload-zone');\r\n            if (uploadZone) {\r\n                uploadZone.classList.remove('uploading');\r\n            }\r\n            this.setButtonState(analyzeBtn, 'error');\r\n            this.showToast('Analysis failed: ' + error.message, 'error');\r\n        });\r\n    }\r\n\r\n    // Enhanced prompt generation with better UX\r\n    async generatePrompt() {\r\n        if (!this.analysisData && this.selectedOptions.analysisMethod === 'upload') {\r\n            this.showToast('Please upload and analyze a product image first', 'error');\r\n            this.switchTab('product');\r\n            return;\r\n        }\r\n\r\n        if (this.selectedOptions.analysisMethod === 'manual') {\r\n            this.useManualDescription();\r\n            if (!this.analysisData) return;\r\n        }\r\n\r\n        const generateBtn = document.getElementById('generate-prompt');\r\n        this.setButtonState(generateBtn, 'loading');\r\n        this.showLoading('Generating your UGC prompt...');\r\n\r\n        try {\r\n            // Generate prompt using pure template logic (no backend call)\r\n            const promptData = await this.buildPromptFromTemplate();\r\n\r\n            this.hideLoading();\r\n            this.setButtonState(generateBtn, 'success');\r\n            this.displayGeneratedPrompt(promptData);\r\n            this.showToast('Prompt generated successfully! 🎬', 'success');\r\n            \r\n            // Update step completion\r\n            this.updateStepCompletion();\r\n        } catch (error) {\r\n            this.hideLoading();\r\n            this.setButtonState(generateBtn, 'error');\r\n            this.showToast('Failed to generate prompt: ' + error.message, 'error');\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize the app when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.app = new UGCStudio();\r\n});\r\n","size_bytes":75159},"README_API_SECURITY.md":{"content":"# 🔐 Secure API Key Management\r\n\r\nThis project now includes a secure API key management system that encrypts and stores your OpenAI API key safely on your local machine.\r\n\r\n## 🚀 Quick Start\r\n\r\n### 1. Install Dependencies\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n### 2. Set Up Your API Key (One-time setup)\r\n```bash\r\npython setup_api_keys.py\r\n```\r\n\r\nThis will:\r\n- Ask you to create a master password\r\n- Securely store your OpenAI API key encrypted\r\n- Test that everything works\r\n\r\n### 3. Run Your Application\r\n\r\n#### Option A: Set password as environment variable (Recommended)\r\n```bash\r\nexport API_KEY_PASSWORD=\"your_master_password\"\r\npython app.py\r\n```\r\n\r\n#### Option B: Traditional environment variable (Still works)\r\n```bash\r\nexport OPENAI_API_KEY=\"your_openai_key\"\r\npython app.py\r\n```\r\n\r\n## 🛠️ Managing API Keys\r\n\r\nUse the management tool to view, add, update, or delete stored keys:\r\n\r\n```bash\r\npython manage_api_keys.py\r\n```\r\n\r\nFeatures:\r\n- View all stored services\r\n- Add/update API keys\r\n- Test OpenAI connection\r\n- Delete stored keys\r\n\r\n## 🔒 How It Works\r\n\r\n### Security Features:\r\n- **Encryption**: API keys are encrypted using Fernet (AES 128) with PBKDF2 key derivation\r\n- **Password Protection**: Master password required to access keys\r\n- **Local Storage**: Keys stored locally in `.secure_config/` directory\r\n- **No Hardcoding**: No API keys in your source code\r\n- **Git Safe**: `.secure_config/` is automatically ignored by git\r\n\r\n### File Structure:\r\n```\r\n.secure_config/\r\n├── api_keys.enc    # Encrypted API keys\r\n└── salt.key        # Salt for key derivation\r\n```\r\n\r\n## 🔄 Migration from Environment Variables\r\n\r\nYour existing setup will continue to work! The system checks for API keys in this order:\r\n\r\n1. **Environment Variable**: `OPENAI_API_KEY` (highest priority)\r\n2. **Secure Storage**: Encrypted local storage with `API_KEY_PASSWORD`\r\n3. **Error**: If neither found, shows helpful setup instructions\r\n\r\n## 🚨 Security Best Practices\r\n\r\n### ✅ DO:\r\n- Use a strong master password (8+ characters)\r\n- Keep your master password secure\r\n- Use environment variables in production\r\n- Regularly rotate your API keys\r\n\r\n### ❌ DON'T:\r\n- Share your master password\r\n- Commit `.secure_config/` to version control\r\n- Use weak passwords\r\n- Store passwords in plain text\r\n\r\n## 🔧 Production Deployment\r\n\r\nFor production environments, use environment variables:\r\n\r\n```bash\r\n# Production\r\nexport OPENAI_API_KEY=\"your_production_key\"\r\nexport FLASK_ENV=\"production\"\r\n```\r\n\r\nThe secure storage is perfect for:\r\n- Local development\r\n- Testing environments\r\n- Personal projects\r\n- When you don't want to manage environment variables\r\n\r\n## 🆘 Troubleshooting\r\n\r\n### \"OpenAI API key not found\" Error\r\nRun the setup script:\r\n```bash\r\npython setup_api_keys.py\r\n```\r\n\r\n### \"Wrong password\" Error\r\nYour master password is incorrect. Try the management tool:\r\n```bash\r\npython manage_api_keys.py\r\n```\r\n\r\n### Reset Everything\r\nDelete the secure config directory:\r\n```bash\r\nrm -rf .secure_config/\r\npython setup_api_keys.py\r\n```\r\n\r\n### Test Your Setup\r\n```bash\r\npython manage_api_keys.py\r\n# Choose option 3: Test OpenAI connection\r\n```\r\n\r\n## 🔄 Key Rotation\r\n\r\nTo update your API key:\r\n1. Get new API key from OpenAI\r\n2. Run: `python manage_api_keys.py`\r\n3. Choose \"Add/Update API key\"\r\n4. Enter your existing master password\r\n5. Enter the new API key\r\n\r\n## 📱 Environment Variables Reference\r\n\r\n| Variable | Purpose | Required |\r\n|----------|---------|----------|\r\n| `OPENAI_API_KEY` | Direct API key (production) | No* |\r\n| `API_KEY_PASSWORD` | Master password for secure storage | No* |\r\n| `FLASK_ENV` | Environment (development/production) | No |\r\n\r\n*At least one method must be configured\r\n\r\n## 🎯 Benefits\r\n\r\n- **Easy Setup**: One-time configuration\r\n- **Secure**: Military-grade encryption\r\n- **Flexible**: Works with existing environment variables\r\n- **Local**: No external dependencies\r\n- **Git Safe**: Automatically ignored by version control\r\n- **User Friendly**: Simple management tools\r\n\r\nYour API keys are now much safer! 🛡️\r\n","size_bytes":4090},"electron-main.js":{"content":"const { app, BrowserWindow, dialog } = require('electron');\nconst { spawn } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nlet mainWindow;\nlet flaskProcess;\nconst FLASK_PORT = 5050; // Use different port to avoid conflicts\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 1400,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      enableRemoteModule: false,\n      webSecurity: true\n    },\n    icon: path.join(__dirname, 'static/icons/app-icon.png'), // Add app icon if you have one\n    titleBarStyle: 'default',\n    show: false // Don't show until ready\n  });\n\n  // Load the Flask app\n  mainWindow.loadURL(`http://127.0.0.1:${FLASK_PORT}`);\n\n  // Show window when ready to prevent visual flash\n  mainWindow.once('ready-to-show', () => {\n    mainWindow.show();\n  });\n\n  // Handle window closed\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  // Development tools (remove in production)\n  if (process.argv.includes('--dev')) {\n    mainWindow.webContents.openDevTools();\n  }\n}\n\nfunction startFlaskServer() {\n  return new Promise((resolve, reject) => {\n    // Modified app.py to use different port for Electron\n    const pythonExecutable = process.platform === 'win32' ? 'python' : 'python3';\n\n    flaskProcess = spawn(pythonExecutable, ['-c', `\nimport sys\nsys.path.append('${__dirname}')\nfrom app import app\napp.run(host='127.0.0.1', port=${FLASK_PORT}, debug=False)\n    `], {\n      cwd: __dirname,\n      env: { ...process.env, FLASK_ENV: 'production' }\n    });\n\n    flaskProcess.stdout.on('data', (data) => {\n      console.log(`Flask: ${data}`);\n      if (data.includes('Running on')) {\n        resolve();\n      }\n    });\n\n    flaskProcess.stderr.on('data', (data) => {\n      console.error(`Flask Error: ${data}`);\n    });\n\n    flaskProcess.on('close', (code) => {\n      console.log(`Flask process exited with code ${code}`);\n    });\n\n    // Give Flask time to start\n    setTimeout(resolve, 3000);\n  });\n}\n\napp.whenReady().then(async () => {\n  try {\n    console.log('Starting Flask server...');\n    await startFlaskServer();\n    console.log('Creating Electron window...');\n    createWindow();\n  } catch (error) {\n    console.error('Failed to start application:', error);\n    dialog.showErrorBox('Startup Error', 'Failed to start the application server.');\n    app.quit();\n  }\n});\n\napp.on('window-all-closed', () => {\n  // Kill Flask process\n  if (flaskProcess) {\n    flaskProcess.kill();\n  }\n\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// Handle app quit\napp.on('before-quit', () => {\n  if (flaskProcess) {\n    flaskProcess.kill();\n  }\n});","size_bytes":2775},"manage_api_keys.py":{"content":"#!/usr/bin/env python3\r\n\"\"\"\r\nAPI Key Management Tool\r\nManage your stored API keys easily\r\n\"\"\"\r\n\r\nimport getpass\r\nimport sys\r\nfrom secure_config import SecureAPIKeyManager\r\n\r\ndef show_menu():\r\n    print(\"\\n🔐 API Key Manager\")\r\n    print(\"=\" * 30)\r\n    print(\"1. View stored services\")\r\n    print(\"2. Add/Update API key\")\r\n    print(\"3. Test OpenAI connection\")\r\n    print(\"4. Delete API key\")\r\n    print(\"5. Exit\")\r\n    print(\"-\" * 30)\r\n\r\ndef get_password():\r\n    return getpass.getpass(\"Enter master password: \")\r\n\r\ndef view_services(manager):\r\n    password = get_password()\r\n    services = manager.list_stored_services(password)\r\n    \r\n    if services:\r\n        print(f\"\\n📋 Stored services: {', '.join(services)}\")\r\n    else:\r\n        print(\"\\n📋 No services stored yet\")\r\n\r\ndef add_api_key(manager):\r\n    password = get_password()\r\n    \r\n    print(\"\\nAvailable services:\")\r\n    print(\"1. openai\")\r\n    print(\"2. other (custom)\")\r\n    \r\n    choice = input(\"Select service (1-2): \").strip()\r\n    \r\n    if choice == \"1\":\r\n        service_name = \"openai\"\r\n    elif choice == \"2\":\r\n        service_name = input(\"Enter service name: \").strip().lower()\r\n    else:\r\n        print(\"❌ Invalid choice\")\r\n        return\r\n    \r\n    api_key = getpass.getpass(f\"Enter {service_name} API key: \").strip()\r\n    \r\n    if manager.store_api_key(service_name, api_key, password):\r\n        print(f\"✅ {service_name} API key stored successfully!\")\r\n    else:\r\n        print(f\"❌ Failed to store {service_name} API key\")\r\n\r\ndef test_openai_connection(manager):\r\n    password = get_password()\r\n    \r\n    try:\r\n        api_key = manager.get_api_key(\"openai\", password)\r\n        if not api_key:\r\n            print(\"❌ No OpenAI API key found\")\r\n            return\r\n        \r\n        print(\"🔄 Testing OpenAI connection...\")\r\n        \r\n        from openai import OpenAI\r\n        client = OpenAI(api_key=api_key)\r\n        \r\n        # Simple test request\r\n        response = client.chat.completions.create(\r\n            model=\"gpt-3.5-turbo\",\r\n            messages=[{\"role\": \"user\", \"content\": \"Say 'API key works!'\"}],\r\n            max_tokens=10\r\n        )\r\n        \r\n        result = response.choices[0].message.content\r\n        print(f\"✅ OpenAI API test successful!\")\r\n        print(f\"Response: {result}\")\r\n        \r\n    except Exception as e:\r\n        print(f\"❌ OpenAI API test failed: {e}\")\r\n\r\ndef delete_api_key(manager):\r\n    password = get_password()\r\n    \r\n    services = manager.list_stored_services(password)\r\n    if not services:\r\n        print(\"❌ No services stored\")\r\n        return\r\n    \r\n    print(f\"\\nStored services: {', '.join(services)}\")\r\n    service_name = input(\"Enter service name to delete: \").strip().lower()\r\n    \r\n    if service_name in services:\r\n        confirm = input(f\"Are you sure you want to delete '{service_name}'? (y/N): \")\r\n        if confirm.lower() == 'y':\r\n            if manager.delete_api_key(service_name, password):\r\n                print(f\"✅ {service_name} deleted successfully!\")\r\n            else:\r\n                print(f\"❌ Failed to delete {service_name}\")\r\n        else:\r\n            print(\"❌ Deletion cancelled\")\r\n    else:\r\n        print(f\"❌ Service '{service_name}' not found\")\r\n\r\ndef main():\r\n    manager = SecureAPIKeyManager()\r\n    \r\n    while True:\r\n        try:\r\n            show_menu()\r\n            choice = input(\"Choose option (1-5): \").strip()\r\n            \r\n            if choice == \"1\":\r\n                view_services(manager)\r\n            elif choice == \"2\":\r\n                add_api_key(manager)\r\n            elif choice == \"3\":\r\n                test_openai_connection(manager)\r\n            elif choice == \"4\":\r\n                delete_api_key(manager)\r\n            elif choice == \"5\":\r\n                print(\"👋 Goodbye!\")\r\n                break\r\n            else:\r\n                print(\"❌ Invalid choice, please try again\")\r\n                \r\n        except KeyboardInterrupt:\r\n            print(\"\\n\\n👋 Goodbye!\")\r\n            break\r\n        except Exception as e:\r\n            print(f\"\\n❌ Error: {e}\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","size_bytes":4125},"secure_config.py":{"content":"import os\r\nimport json\r\nimport base64\r\nfrom pathlib import Path\r\nfrom cryptography.fernet import Fernet\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\r\n\r\nclass SecureAPIKeyManager:\r\n    def __init__(self, config_dir=\".secure_config\"):\r\n        self.config_dir = Path(config_dir)\r\n        self.config_dir.mkdir(exist_ok=True)\r\n        self.key_file = self.config_dir / \"api_keys.enc\"\r\n        self.salt_file = self.config_dir / \"salt.key\"\r\n        \r\n    def _generate_key_from_password(self, password: str) -> bytes:\r\n        \"\"\"Generate encryption key from password\"\"\"\r\n        # Load or create salt\r\n        if self.salt_file.exists():\r\n            with open(self.salt_file, 'rb') as f:\r\n                salt = f.read()\r\n        else:\r\n            salt = os.urandom(16)\r\n            with open(self.salt_file, 'wb') as f:\r\n                f.write(salt)\r\n        \r\n        kdf = PBKDF2HMAC(\r\n            algorithm=hashes.SHA256(),\r\n            length=32,\r\n            salt=salt,\r\n            iterations=100000,\r\n        )\r\n        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))\r\n        return key\r\n    \r\n    def store_api_key(self, service_name: str, api_key: str, password: str):\r\n        \"\"\"Store API key encrypted with password\"\"\"\r\n        try:\r\n            # Generate encryption key from password\r\n            key = self._generate_key_from_password(password)\r\n            cipher_suite = Fernet(key)\r\n            \r\n            # Load existing keys or create new dict\r\n            keys_data = {}\r\n            if self.key_file.exists():\r\n                try:\r\n                    with open(self.key_file, 'rb') as f:\r\n                        encrypted_data = f.read()\r\n                    decrypted_data = cipher_suite.decrypt(encrypted_data)\r\n                    keys_data = json.loads(decrypted_data.decode())\r\n                except:\r\n                    # If decryption fails, start fresh (wrong password or corrupted)\r\n                    keys_data = {}\r\n            \r\n            # Add/update the API key\r\n            keys_data[service_name] = api_key\r\n            \r\n            # Encrypt and save\r\n            json_data = json.dumps(keys_data).encode()\r\n            encrypted_data = cipher_suite.encrypt(json_data)\r\n            \r\n            with open(self.key_file, 'wb') as f:\r\n                f.write(encrypted_data)\r\n            \r\n            print(f\"✅ {service_name} API key stored securely!\")\r\n            return True\r\n            \r\n        except Exception as e:\r\n            print(f\"❌ Error storing API key: {e}\")\r\n            return False\r\n    \r\n    def get_api_key(self, service_name: str, password: str = None) -> str:\r\n        \"\"\"Retrieve API key with password\"\"\"\r\n        try:\r\n            if not self.key_file.exists():\r\n                return None\r\n            \r\n            # Try environment variable first (for production)\r\n            env_key = os.environ.get(f\"{service_name.upper()}_API_KEY\")\r\n            if env_key:\r\n                return env_key\r\n            \r\n            # If no password provided, try to get from environment\r\n            if not password:\r\n                password = os.environ.get(\"API_KEY_PASSWORD\")\r\n                if not password:\r\n                    return None\r\n            \r\n            # Decrypt stored keys\r\n            key = self._generate_key_from_password(password)\r\n            cipher_suite = Fernet(key)\r\n            \r\n            with open(self.key_file, 'rb') as f:\r\n                encrypted_data = f.read()\r\n            \r\n            decrypted_data = cipher_suite.decrypt(encrypted_data)\r\n            keys_data = json.loads(decrypted_data.decode())\r\n            \r\n            return keys_data.get(service_name)\r\n            \r\n        except Exception as e:\r\n            print(f\"❌ Error retrieving API key: {e}\")\r\n            return None\r\n    \r\n    def list_stored_services(self, password: str) -> list:\r\n        \"\"\"List all stored service names\"\"\"\r\n        try:\r\n            if not self.key_file.exists():\r\n                return []\r\n            \r\n            key = self._generate_key_from_password(password)\r\n            cipher_suite = Fernet(key)\r\n            \r\n            with open(self.key_file, 'rb') as f:\r\n                encrypted_data = f.read()\r\n            \r\n            decrypted_data = cipher_suite.decrypt(encrypted_data)\r\n            keys_data = json.loads(decrypted_data.decode())\r\n            \r\n            return list(keys_data.keys())\r\n            \r\n        except Exception as e:\r\n            print(f\"❌ Error listing services: {e}\")\r\n            return []\r\n    \r\n    def delete_api_key(self, service_name: str, password: str) -> bool:\r\n        \"\"\"Delete a stored API key\"\"\"\r\n        try:\r\n            if not self.key_file.exists():\r\n                return False\r\n            \r\n            key = self._generate_key_from_password(password)\r\n            cipher_suite = Fernet(key)\r\n            \r\n            with open(self.key_file, 'rb') as f:\r\n                encrypted_data = f.read()\r\n            \r\n            decrypted_data = cipher_suite.decrypt(encrypted_data)\r\n            keys_data = json.loads(decrypted_data.decode())\r\n            \r\n            if service_name in keys_data:\r\n                del keys_data[service_name]\r\n                \r\n                # Save updated data\r\n                json_data = json.dumps(keys_data).encode()\r\n                encrypted_data = cipher_suite.encrypt(json_data)\r\n                \r\n                with open(self.key_file, 'wb') as f:\r\n                    f.write(encrypted_data)\r\n                \r\n                print(f\"✅ {service_name} API key deleted!\")\r\n                return True\r\n            else:\r\n                print(f\"❌ {service_name} not found in stored keys\")\r\n                return False\r\n                \r\n        except Exception as e:\r\n            print(f\"❌ Error deleting API key: {e}\")\r\n            return False\r\n\r\n# Global instance\r\napi_key_manager = SecureAPIKeyManager()\r\n\r\ndef get_openai_api_key():\r\n    \"\"\"Get OpenAI API key from secure storage or environment\"\"\"\r\n    # Try environment variable first (for production/CI)\r\n    env_key = os.environ.get(\"OPENAI_API_KEY\")\r\n    if env_key:\r\n        return env_key\r\n    \r\n    # Try secure storage with password from environment\r\n    password = os.environ.get(\"API_KEY_PASSWORD\")\r\n    if password:\r\n        stored_key = api_key_manager.get_api_key(\"openai\", password)\r\n        if stored_key:\r\n            return stored_key\r\n    \r\n    # If nothing found, raise error with helpful message\r\n    raise ValueError(\r\n        \"OpenAI API key not found. Please either:\\n\"\r\n        \"1. Set OPENAI_API_KEY environment variable, or\\n\"\r\n        \"2. Run 'python setup_api_keys.py' to store it securely, or\\n\"\r\n        \"3. Set API_KEY_PASSWORD environment variable if already stored\"\r\n    )\r\n","size_bytes":6888},"setup_api_keys.py":{"content":"#!/usr/bin/env python3\r\n\"\"\"\r\nEasy setup script for securely storing API keys\r\nRun this once to store your OpenAI API key safely\r\n\"\"\"\r\n\r\nimport getpass\r\nimport sys\r\nfrom secure_config import SecureAPIKeyManager\r\n\r\ndef main():\r\n    print(\"🔐 Secure API Key Setup\")\r\n    print(\"=\" * 40)\r\n    \r\n    manager = SecureAPIKeyManager()\r\n    \r\n    # Get master password\r\n    print(\"\\n1. First, create a master password to encrypt your API keys:\")\r\n    print(\"   (This password will be used to encrypt/decrypt your keys)\")\r\n    \r\n    while True:\r\n        password = getpass.getpass(\"Enter master password: \")\r\n        if len(password) < 8:\r\n            print(\"❌ Password must be at least 8 characters long\")\r\n            continue\r\n        \r\n        confirm_password = getpass.getpass(\"Confirm master password: \")\r\n        if password != confirm_password:\r\n            print(\"❌ Passwords don't match, try again\")\r\n            continue\r\n        \r\n        break\r\n    \r\n    # Get OpenAI API key\r\n    print(\"\\n2. Enter your OpenAI API key:\")\r\n    print(\"   (Get it from: https://platform.openai.com/api-keys)\")\r\n    \r\n    while True:\r\n        api_key = getpass.getpass(\"OpenAI API Key: \").strip()\r\n        if not api_key:\r\n            print(\"❌ API key cannot be empty\")\r\n            continue\r\n        \r\n        if not api_key.startswith('sk-'):\r\n            print(\"❌ OpenAI API keys should start with 'sk-'\")\r\n            continue\r\n        \r\n        break\r\n    \r\n    # Store the API key\r\n    print(\"\\n3. Storing API key securely...\")\r\n    \r\n    if manager.store_api_key(\"openai\", api_key, password):\r\n        print(\"\\n✅ Setup complete!\")\r\n        print(\"\\nYour API key is now stored securely and encrypted.\")\r\n        print(\"\\nTo use it in your application:\")\r\n        print(\"1. Set environment variable: API_KEY_PASSWORD=your_master_password\")\r\n        print(\"2. Or the app will prompt for password when needed\")\r\n        \r\n        # Test retrieval\r\n        print(\"\\n4. Testing retrieval...\")\r\n        retrieved_key = manager.get_api_key(\"openai\", password)\r\n        if retrieved_key == api_key:\r\n            print(\"✅ Test successful - API key can be retrieved correctly!\")\r\n        else:\r\n            print(\"❌ Test failed - something went wrong\")\r\n            return 1\r\n            \r\n    else:\r\n        print(\"❌ Failed to store API key\")\r\n        return 1\r\n    \r\n    return 0\r\n\r\nif __name__ == \"__main__\":\r\n    try:\r\n        sys.exit(main())\r\n    except KeyboardInterrupt:\r\n        print(\"\\n\\n❌ Setup cancelled by user\")\r\n        sys.exit(1)\r\n    except Exception as e:\r\n        print(f\"\\n❌ Error during setup: {e}\")\r\n        sys.exit(1)\r\n","size_bytes":2647},"static/css/faq.css":{"content":"/* FAQ Page Styles */\r\n.faq-container {\r\n    min-height: 100vh;\r\n    background: var(--bg-primary);\r\n    color: var(--text-primary);\r\n}\r\n\r\n.faq-header {\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-primary);\r\n    padding: var(--space-6) 0;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 100;\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\n.faq-header .header-content {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 0 var(--space-6);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.back-link {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-2);\r\n    color: var(--text-secondary);\r\n    text-decoration: none;\r\n    font-weight: 500;\r\n    transition: color var(--transition-fast);\r\n    margin-bottom: var(--space-3);\r\n}\r\n\r\n.back-link:hover {\r\n    color: var(--primary-400);\r\n}\r\n\r\n.faq-header .header-title {\r\n    margin: 0;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n    color: var(--text-primary);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n}\r\n\r\n.faq-header .header-subtitle {\r\n    margin: var(--space-2) 0 0;\r\n    color: var(--text-secondary);\r\n    font-size: 1.125rem;\r\n}\r\n\r\n.faq-main {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: var(--space-8) var(--space-6);\r\n}\r\n\r\n/* Search Bar */\r\n.faq-search {\r\n    margin-bottom: var(--space-8);\r\n}\r\n\r\n.search-container {\r\n    position: relative;\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.search-container i {\r\n    position: absolute;\r\n    left: var(--space-4);\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: var(--text-tertiary);\r\n    font-size: 1.25rem;\r\n}\r\n\r\n#faq-search-input {\r\n    width: 100%;\r\n    padding: var(--space-4) var(--space-12) var(--space-4) var(--space-12);\r\n    border: 2px solid var(--border-primary);\r\n    border-radius: var(--radius-xl);\r\n    background: var(--bg-elevated);\r\n    color: var(--text-primary);\r\n    font-size: 1.125rem;\r\n    transition: all var(--transition-fast);\r\n}\r\n\r\n#faq-search-input:focus {\r\n    outline: none;\r\n    border-color: var(--primary-400);\r\n    box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);\r\n}\r\n\r\n.search-clear {\r\n    position: absolute;\r\n    right: var(--space-4);\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    background: none;\r\n    border: none;\r\n    color: var(--text-tertiary);\r\n    cursor: pointer;\r\n    padding: var(--space-2);\r\n    border-radius: 50%;\r\n    transition: all var(--transition-fast);\r\n}\r\n\r\n.search-clear:hover {\r\n    background: var(--bg-tertiary);\r\n    color: var(--text-primary);\r\n}\r\n\r\n/* FAQ Categories */\r\n.faq-categories {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: var(--space-3);\r\n    justify-content: center;\r\n    margin-bottom: var(--space-8);\r\n    padding: var(--space-6);\r\n    background: var(--bg-elevated);\r\n    border-radius: var(--radius-xl);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.category-btn {\r\n    padding: var(--space-3) var(--space-5);\r\n    background: var(--bg-secondary);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-full);\r\n    color: var(--text-secondary);\r\n    font-weight: 500;\r\n    cursor: pointer;\r\n    transition: all var(--transition-fast);\r\n    white-space: nowrap;\r\n}\r\n\r\n.category-btn:hover {\r\n    background: var(--bg-tertiary);\r\n    border-color: var(--primary-300);\r\n    color: var(--text-primary);\r\n    transform: translateY(-2px);\r\n}\r\n\r\n.category-btn.active {\r\n    background: var(--primary-600);\r\n    border-color: var(--primary-400);\r\n    color: white;\r\n    box-shadow: var(--shadow-md);\r\n}\r\n\r\n/* FAQ Content */\r\n.faq-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-8);\r\n}\r\n\r\n.faq-section {\r\n    transition: all var(--transition-normal);\r\n}\r\n\r\n.faq-section.hidden {\r\n    display: none;\r\n}\r\n\r\n.faq-section h2 {\r\n    margin: 0 0 var(--space-6);\r\n    font-size: 1.75rem;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n    padding-bottom: var(--space-3);\r\n    border-bottom: 2px solid var(--border-primary);\r\n}\r\n\r\n.faq-section h2 i {\r\n    color: var(--primary-400);\r\n    font-size: 1.5rem;\r\n}\r\n\r\n/* FAQ Items */\r\n.faq-item {\r\n    background: var(--bg-elevated);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-lg);\r\n    margin-bottom: var(--space-4);\r\n    overflow: hidden;\r\n    transition: all var(--transition-normal);\r\n}\r\n\r\n.faq-item:hover {\r\n    box-shadow: var(--shadow-md);\r\n    transform: translateY(-2px);\r\n}\r\n\r\n.faq-item.active {\r\n    border-color: var(--primary-400);\r\n    box-shadow: var(--shadow-lg);\r\n}\r\n\r\n.faq-question {\r\n    padding: var(--space-5) var(--space-6);\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    background: var(--bg-elevated);\r\n    transition: all var(--transition-fast);\r\n    user-select: none;\r\n}\r\n\r\n.faq-question:hover {\r\n    background: var(--bg-tertiary);\r\n}\r\n\r\n.faq-item.active .faq-question {\r\n    background: var(--primary-900);\r\n    color: var(--primary-200);\r\n}\r\n\r\n.faq-question h3 {\r\n    margin: 0;\r\n    font-size: 1.125rem;\r\n    font-weight: 600;\r\n    color: inherit;\r\n    flex: 1;\r\n    padding-right: var(--space-4);\r\n}\r\n\r\n.faq-question i {\r\n    font-size: 1.25rem;\r\n    color: var(--text-tertiary);\r\n    transition: transform var(--transition-fast);\r\n    flex-shrink: 0;\r\n}\r\n\r\n.faq-item.active .faq-question i {\r\n    transform: rotate(180deg);\r\n    color: var(--primary-300);\r\n}\r\n\r\n.faq-answer {\r\n    padding: 0 var(--space-6) var(--space-6);\r\n    background: var(--bg-secondary);\r\n    border-top: 1px solid var(--border-primary);\r\n    display: none;\r\n    animation: fadeInDown 0.3s ease-out;\r\n}\r\n\r\n.faq-item.active .faq-answer {\r\n    display: block;\r\n}\r\n\r\n.faq-answer p {\r\n    margin: 0 0 var(--space-4);\r\n    color: var(--text-secondary);\r\n    line-height: 1.6;\r\n}\r\n\r\n.faq-answer p:last-child {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.faq-answer ul,\r\n.faq-answer ol {\r\n    margin: 0 0 var(--space-4);\r\n    padding-left: var(--space-5);\r\n}\r\n\r\n.faq-answer li {\r\n    margin-bottom: var(--space-2);\r\n    color: var(--text-secondary);\r\n    line-height: 1.5;\r\n}\r\n\r\n.faq-answer strong {\r\n    color: var(--text-primary);\r\n}\r\n\r\n/* No Results */\r\n.no-results {\r\n    text-align: center;\r\n    padding: var(--space-12) var(--space-6);\r\n    background: var(--bg-elevated);\r\n    border-radius: var(--radius-xl);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.no-results-content i {\r\n    font-size: 4rem;\r\n    color: var(--text-tertiary);\r\n    margin-bottom: var(--space-4);\r\n}\r\n\r\n.no-results-content h3 {\r\n    margin: 0 0 var(--space-3);\r\n    font-size: 1.5rem;\r\n    color: var(--text-primary);\r\n}\r\n\r\n.no-results-content p {\r\n    margin: 0 0 var(--space-6);\r\n    color: var(--text-secondary);\r\n    font-size: 1.125rem;\r\n}\r\n\r\n/* Footer */\r\n.faq-footer {\r\n    background: var(--bg-secondary);\r\n    border-top: 1px solid var(--border-primary);\r\n    padding: var(--space-8) 0;\r\n    margin-top: var(--space-12);\r\n}\r\n\r\n.footer-content {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 0 var(--space-6);\r\n    display: grid;\r\n    grid-template-columns: 2fr 1fr;\r\n    gap: var(--space-8);\r\n    align-items: center;\r\n}\r\n\r\n.footer-section h4 {\r\n    margin: 0 0 var(--space-3);\r\n    font-size: 1.25rem;\r\n    color: var(--text-primary);\r\n}\r\n\r\n.footer-section p {\r\n    margin: 0 0 var(--space-6);\r\n    color: var(--text-secondary);\r\n    line-height: 1.6;\r\n}\r\n\r\n.footer-actions {\r\n    display: flex;\r\n    gap: var(--space-4);\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.footer-links {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n    align-items: flex-end;\r\n}\r\n\r\n.footer-links a {\r\n    color: var(--text-secondary);\r\n    text-decoration: none;\r\n    font-weight: 500;\r\n    transition: color var(--transition-fast);\r\n}\r\n\r\n.footer-links a:hover {\r\n    color: var(--primary-400);\r\n}\r\n\r\n/* Search Highlighting */\r\n.search-highlight {\r\n    background: var(--warning-400);\r\n    color: var(--warning-900);\r\n    padding: 0 2px;\r\n    border-radius: 2px;\r\n    font-weight: 600;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n    .faq-header .header-content {\r\n        flex-direction: column;\r\n        gap: var(--space-4);\r\n        text-align: center;\r\n    }\r\n    \r\n    .faq-main {\r\n        padding: var(--space-6) var(--space-4);\r\n    }\r\n    \r\n    .faq-categories {\r\n        padding: var(--space-4);\r\n        gap: var(--space-2);\r\n    }\r\n    \r\n    .category-btn {\r\n        padding: var(--space-2) var(--space-4);\r\n        font-size: 0.9rem;\r\n    }\r\n    \r\n    .faq-question {\r\n        padding: var(--space-4) var(--space-5);\r\n    }\r\n    \r\n    .faq-question h3 {\r\n        font-size: 1rem;\r\n        padding-right: var(--space-3);\r\n    }\r\n    \r\n    .faq-answer {\r\n        padding: 0 var(--space-5) var(--space-5);\r\n    }\r\n    \r\n    .footer-content {\r\n        grid-template-columns: 1fr;\r\n        gap: var(--space-6);\r\n        text-align: center;\r\n    }\r\n    \r\n    .footer-links {\r\n        align-items: center;\r\n    }\r\n    \r\n    .footer-actions {\r\n        justify-content: center;\r\n    }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n    .faq-header .header-title {\r\n        font-size: 1.5rem;\r\n        flex-direction: column;\r\n        gap: var(--space-2);\r\n    }\r\n    \r\n    .search-container {\r\n        margin: 0 var(--space-2);\r\n    }\r\n    \r\n    #faq-search-input {\r\n        font-size: 1rem;\r\n        padding: var(--space-3) var(--space-10) var(--space-3) var(--space-10);\r\n    }\r\n    \r\n    .faq-categories {\r\n        margin: 0 var(--space-2) var(--space-6);\r\n    }\r\n    \r\n    .faq-question {\r\n        padding: var(--space-3) var(--space-4);\r\n    }\r\n    \r\n    .faq-answer {\r\n        padding: 0 var(--space-4) var(--space-4);\r\n    }\r\n    \r\n    .footer-actions {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n}\r\n\r\n/* Animations */\r\n@keyframes fadeInDown {\r\n    from {\r\n        opacity: 0;\r\n        transform: translateY(-10px);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n\r\n/* Smooth scrolling */\r\nhtml {\r\n    scroll-behavior: smooth;\r\n}\r\n\r\n/* Focus styles for accessibility */\r\n.category-btn:focus,\r\n.faq-question:focus,\r\n#faq-search-input:focus {\r\n    outline: 2px solid var(--primary-400);\r\n    outline-offset: 2px;\r\n}\r\n\r\n/* Print styles */\r\n@media print {\r\n    .faq-header,\r\n    .faq-search,\r\n    .faq-categories,\r\n    .faq-footer {\r\n        display: none;\r\n    }\r\n    \r\n    .faq-item {\r\n        break-inside: avoid;\r\n        box-shadow: none;\r\n        border: 1px solid #ccc;\r\n    }\r\n    \r\n    .faq-answer {\r\n        display: block !important;\r\n    }\r\n    \r\n    .faq-question i {\r\n        display: none;\r\n    }\r\n}\r\n","size_bytes":10715},"static/css/tutorial.css":{"content":"/* Tutorial Page Styles */\r\n.tutorial-container {\r\n    min-height: 100vh;\r\n    background: var(--bg-primary);\r\n    color: var(--text-primary);\r\n}\r\n\r\n.tutorial-header {\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-primary);\r\n    padding: var(--space-6) 0;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 100;\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\n.tutorial-header .header-content {\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    padding: 0 var(--space-6);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.back-link {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-2);\r\n    color: var(--text-secondary);\r\n    text-decoration: none;\r\n    font-weight: 500;\r\n    transition: color var(--transition-fast);\r\n    margin-bottom: var(--space-3);\r\n}\r\n\r\n.back-link:hover {\r\n    color: var(--primary-400);\r\n}\r\n\r\n.tutorial-header .header-title {\r\n    margin: 0;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n    color: var(--text-primary);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n}\r\n\r\n.tutorial-header .header-subtitle {\r\n    margin: var(--space-2) 0 0;\r\n    color: var(--text-secondary);\r\n    font-size: 1.125rem;\r\n}\r\n\r\n.tutorial-main {\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    padding: var(--space-8) var(--space-6);\r\n    display: grid;\r\n    grid-template-columns: 280px 1fr;\r\n    gap: var(--space-8);\r\n}\r\n\r\n/* Tutorial Navigation */\r\n.tutorial-nav {\r\n    position: sticky;\r\n    top: 120px;\r\n    height: fit-content;\r\n}\r\n\r\n.nav-content {\r\n    background: var(--bg-elevated);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-xl);\r\n    padding: var(--space-6);\r\n    box-shadow: var(--shadow-sm);\r\n}\r\n\r\n.nav-content h3 {\r\n    margin: 0 0 var(--space-4);\r\n    font-size: 1.125rem;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n}\r\n\r\n.nav-list {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.nav-list li {\r\n    margin-bottom: var(--space-2);\r\n}\r\n\r\n.nav-link {\r\n    display: block;\r\n    padding: var(--space-3) var(--space-4);\r\n    color: var(--text-secondary);\r\n    text-decoration: none;\r\n    border-radius: var(--radius-md);\r\n    transition: all var(--transition-fast);\r\n    font-weight: 500;\r\n    border-left: 3px solid transparent;\r\n}\r\n\r\n.nav-link:hover {\r\n    background: var(--bg-tertiary);\r\n    color: var(--text-primary);\r\n    border-left-color: var(--primary-400);\r\n}\r\n\r\n.nav-link.active {\r\n    background: var(--primary-900);\r\n    color: var(--primary-200);\r\n    border-left-color: var(--primary-400);\r\n}\r\n\r\n/* Tutorial Content */\r\n.tutorial-content {\r\n    min-height: 100vh;\r\n}\r\n\r\n.tutorial-section {\r\n    display: none;\r\n    animation: fadeInUp 0.5s ease-out;\r\n}\r\n\r\n.tutorial-section.active {\r\n    display: block;\r\n}\r\n\r\n.section-header {\r\n    margin-bottom: var(--space-8);\r\n    text-align: center;\r\n}\r\n\r\n.section-header h2 {\r\n    margin: 0 0 var(--space-3);\r\n    font-size: 2.5rem;\r\n    font-weight: 700;\r\n    color: var(--text-primary);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: var(--space-3);\r\n}\r\n\r\n.section-header p {\r\n    margin: 0;\r\n    font-size: 1.25rem;\r\n    color: var(--text-secondary);\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    line-height: 1.6;\r\n}\r\n\r\n/* Content Grid */\r\n.content-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\r\n    gap: var(--space-6);\r\n    margin-bottom: var(--space-8);\r\n}\r\n\r\n.tutorial-card {\r\n    background: var(--bg-elevated);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-xl);\r\n    padding: var(--space-8);\r\n    box-shadow: var(--shadow-sm);\r\n    transition: all var(--transition-normal);\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n.tutorial-card::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 4px;\r\n    background: var(--gradient-accent);\r\n    transform: scaleX(0);\r\n    transition: transform var(--transition-normal);\r\n}\r\n\r\n.tutorial-card:hover {\r\n    box-shadow: var(--shadow-xl);\r\n    transform: translateY(-4px);\r\n}\r\n\r\n.tutorial-card:hover::before {\r\n    transform: scaleX(1);\r\n}\r\n\r\n.tutorial-card.full-width {\r\n    grid-column: 1 / -1;\r\n}\r\n\r\n.card-icon {\r\n    width: 60px;\r\n    height: 60px;\r\n    background: var(--gradient-primary);\r\n    border-radius: var(--radius-xl);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: var(--space-4);\r\n}\r\n\r\n.card-icon i {\r\n    font-size: 1.75rem;\r\n    color: white;\r\n}\r\n\r\n.tutorial-card h3 {\r\n    margin: 0 0 var(--space-4);\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n}\r\n\r\n.tutorial-card p {\r\n    margin: 0 0 var(--space-4);\r\n    color: var(--text-secondary);\r\n    line-height: 1.6;\r\n}\r\n\r\n/* Special Content Boxes */\r\n.highlight-box,\r\n.tip-box,\r\n.warning-box,\r\n.example-box {\r\n    padding: var(--space-4);\r\n    border-radius: var(--radius-lg);\r\n    margin: var(--space-4) 0;\r\n    border-left: 4px solid;\r\n}\r\n\r\n.highlight-box {\r\n    background: var(--primary-900);\r\n    border-left-color: var(--primary-400);\r\n    color: var(--primary-200);\r\n}\r\n\r\n.tip-box {\r\n    background: var(--success-900);\r\n    border-left-color: var(--success-400);\r\n    color: var(--success-200);\r\n}\r\n\r\n.warning-box {\r\n    background: var(--warning-900);\r\n    border-left-color: var(--warning-400);\r\n    color: var(--warning-200);\r\n}\r\n\r\n.example-box {\r\n    background: var(--bg-tertiary);\r\n    border-left-color: var(--border-secondary);\r\n    color: var(--text-secondary);\r\n}\r\n\r\n.tip-box i,\r\n.warning-box i {\r\n    margin-right: var(--space-2);\r\n    font-size: 1.125rem;\r\n}\r\n\r\n/* Process Steps */\r\n.process-steps {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-4);\r\n}\r\n\r\n.step {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    gap: var(--space-4);\r\n    padding: var(--space-4);\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-lg);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.step-number {\r\n    width: 32px;\r\n    height: 32px;\r\n    background: var(--gradient-primary);\r\n    color: white;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: 600;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.step-content strong {\r\n    display: block;\r\n    color: var(--text-primary);\r\n    margin-bottom: var(--space-1);\r\n}\r\n\r\n.step-content p {\r\n    margin: 0;\r\n    color: var(--text-secondary);\r\n    font-size: 0.9rem;\r\n}\r\n\r\n/* Quick Start List */\r\n.quick-start-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n    margin: var(--space-4) 0;\r\n}\r\n\r\n.quick-step {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n    padding: var(--space-3);\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-md);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.quick-step i {\r\n    color: var(--success-400);\r\n    font-size: 1.25rem;\r\n    flex-shrink: 0;\r\n}\r\n\r\n/* Method Details */\r\n.method-details h4,\r\n.testing-guide h4,\r\n.optimization-tips h4 {\r\n    margin: var(--space-4) 0 var(--space-2);\r\n    color: var(--text-primary);\r\n    font-size: 1.125rem;\r\n}\r\n\r\n.method-details ul,\r\n.testing-guide ul,\r\n.optimization-tips ul {\r\n    margin: 0 0 var(--space-4);\r\n    padding-left: var(--space-5);\r\n}\r\n\r\n.method-details li,\r\n.testing-guide li,\r\n.optimization-tips li {\r\n    margin-bottom: var(--space-2);\r\n    color: var(--text-secondary);\r\n    line-height: 1.5;\r\n}\r\n\r\n.avoid-list {\r\n    list-style: none;\r\n    padding-left: 0;\r\n}\r\n\r\n.avoid-list li {\r\n    position: relative;\r\n    padding-left: var(--space-5);\r\n    color: var(--error-300);\r\n}\r\n\r\n.avoid-list li::before {\r\n    content: '✗';\r\n    position: absolute;\r\n    left: 0;\r\n    color: var(--error-400);\r\n    font-weight: bold;\r\n}\r\n\r\n/* Content Types */\r\n.content-types {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n}\r\n\r\n.type-item {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    gap: var(--space-3);\r\n    padding: var(--space-3);\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-md);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.type-item i {\r\n    color: var(--primary-400);\r\n    font-size: 1.5rem;\r\n    flex-shrink: 0;\r\n    margin-top: var(--space-1);\r\n}\r\n\r\n.type-item strong {\r\n    display: block;\r\n    color: var(--text-primary);\r\n    margin-bottom: var(--space-1);\r\n}\r\n\r\n.type-item p {\r\n    margin: 0;\r\n    color: var(--text-secondary);\r\n    font-size: 0.9rem;\r\n}\r\n\r\n/* Actors Grid */\r\n.actors-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n    gap: var(--space-4);\r\n    margin: var(--space-4) 0;\r\n}\r\n\r\n.actor-profile {\r\n    padding: var(--space-4);\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-lg);\r\n    border: 1px solid var(--border-primary);\r\n}\r\n\r\n.actor-info strong {\r\n    display: block;\r\n    color: var(--text-primary);\r\n    margin-bottom: var(--space-2);\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.actor-info p {\r\n    margin: var(--space-1) 0;\r\n    color: var(--text-secondary);\r\n    font-size: 0.9rem;\r\n}\r\n\r\n/* Footer */\r\n.tutorial-footer {\r\n    background: var(--bg-secondary);\r\n    border-top: 1px solid var(--border-primary);\r\n    padding: var(--space-8) 0;\r\n    margin-top: var(--space-12);\r\n}\r\n\r\n.footer-content {\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    padding: 0 var(--space-6);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.footer-links {\r\n    display: flex;\r\n    gap: var(--space-6);\r\n}\r\n\r\n.footer-links a {\r\n    color: var(--text-secondary);\r\n    text-decoration: none;\r\n    font-weight: 500;\r\n    transition: color var(--transition-fast);\r\n}\r\n\r\n.footer-links a:hover {\r\n    color: var(--primary-400);\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 1024px) {\r\n    .tutorial-main {\r\n        grid-template-columns: 1fr;\r\n        gap: var(--space-6);\r\n    }\r\n    \r\n    .tutorial-nav {\r\n        position: static;\r\n        order: -1;\r\n    }\r\n    \r\n    .nav-content {\r\n        padding: var(--space-4);\r\n    }\r\n    \r\n    .nav-list {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: var(--space-2);\r\n    }\r\n    \r\n    .nav-list li {\r\n        margin-bottom: 0;\r\n    }\r\n    \r\n    .nav-link {\r\n        padding: var(--space-2) var(--space-3);\r\n        border-left: none;\r\n        border-bottom: 3px solid transparent;\r\n    }\r\n    \r\n    .nav-link:hover,\r\n    .nav-link.active {\r\n        border-left: none;\r\n        border-bottom-color: var(--primary-400);\r\n    }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .tutorial-header .header-content {\r\n        flex-direction: column;\r\n        gap: var(--space-4);\r\n        text-align: center;\r\n    }\r\n    \r\n    .tutorial-main {\r\n        padding: var(--space-6) var(--space-4);\r\n    }\r\n    \r\n    .content-grid {\r\n        grid-template-columns: 1fr;\r\n        gap: var(--space-4);\r\n    }\r\n    \r\n    .section-header h2 {\r\n        font-size: 2rem;\r\n        flex-direction: column;\r\n        gap: var(--space-2);\r\n    }\r\n    \r\n    .tutorial-card {\r\n        padding: var(--space-6);\r\n    }\r\n    \r\n    .footer-content {\r\n        flex-direction: column;\r\n        gap: var(--space-4);\r\n        text-align: center;\r\n    }\r\n}\r\n\r\n/* Animations */\r\n@keyframes fadeInUp {\r\n    from {\r\n        opacity: 0;\r\n        transform: translateY(30px);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n\r\n/* Smooth scrolling */\r\nhtml {\r\n    scroll-behavior: smooth;\r\n}\r\n\r\n/* Focus styles for accessibility */\r\n.nav-link:focus,\r\n.tutorial-card:focus {\r\n    outline: 2px solid var(--primary-400);\r\n    outline-offset: 2px;\r\n}\r\n","size_bytes":11731},"static/js/faq.js":{"content":"class FAQPage {\r\n    constructor() {\r\n        this.currentCategory = 'all';\r\n        this.searchQuery = '';\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.bindEvents();\r\n        this.setTheme(localStorage.getItem('theme') || 'dark');\r\n        this.initSearch();\r\n        this.initCategories();\r\n        this.initFAQItems();\r\n    }\r\n\r\n    bindEvents() {\r\n        // Theme toggle\r\n        document.getElementById('theme-toggle')?.addEventListener('click', () => this.toggleTheme());\r\n\r\n        // Search functionality\r\n        const searchInput = document.getElementById('faq-search-input');\r\n        const searchClear = document.getElementById('search-clear');\r\n\r\n        if (searchInput) {\r\n            searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));\r\n            searchInput.addEventListener('keydown', (e) => {\r\n                if (e.key === 'Escape') {\r\n                    this.clearSearch();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (searchClear) {\r\n            searchClear.addEventListener('click', () => this.clearSearch());\r\n        }\r\n\r\n        // Category buttons\r\n        document.querySelectorAll('.category-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const category = e.target.dataset.category;\r\n                this.filterByCategory(category);\r\n            });\r\n        });\r\n\r\n        // FAQ items\r\n        document.querySelectorAll('.faq-question').forEach(question => {\r\n            question.addEventListener('click', (e) => {\r\n                const faqItem = e.currentTarget.closest('.faq-item');\r\n                this.toggleFAQItem(faqItem);\r\n            });\r\n        });\r\n\r\n        // Keyboard shortcuts\r\n        document.addEventListener('keydown', (e) => {\r\n            // Ctrl/Cmd + ? for help\r\n            if ((e.ctrlKey || e.metaKey) && e.key === '?') {\r\n                e.preventDefault();\r\n                this.toggleKeyboardShortcuts();\r\n            }\r\n            \r\n            // Escape to close modals and clear search\r\n            if (e.key === 'Escape') {\r\n                this.hideKeyboardShortcuts();\r\n                if (this.searchQuery) {\r\n                    this.clearSearch();\r\n                }\r\n            }\r\n            \r\n            // Ctrl/Cmd + F to focus search\r\n            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {\r\n                e.preventDefault();\r\n                const searchInput = document.getElementById('faq-search-input');\r\n                if (searchInput) {\r\n                    searchInput.focus();\r\n                    searchInput.select();\r\n                }\r\n            }\r\n        });\r\n\r\n        // URL hash handling for direct links\r\n        window.addEventListener('hashchange', () => this.handleHashChange());\r\n        this.handleHashChange(); // Handle initial hash\r\n    }\r\n\r\n    // Theme Management\r\n    toggleTheme() {\r\n        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';\r\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\r\n        this.setTheme(newTheme);\r\n    }\r\n\r\n    setTheme(theme) {\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n        localStorage.setItem('theme', theme);\r\n\r\n        const themeIcon = document.querySelector('#theme-toggle i');\r\n        if (themeIcon) {\r\n            themeIcon.className = theme === 'dark' ? 'bx bx-sun' : 'bx bx-moon';\r\n        }\r\n    }\r\n\r\n    // Search Functionality\r\n    initSearch() {\r\n        this.searchIndex = this.buildSearchIndex();\r\n    }\r\n\r\n    buildSearchIndex() {\r\n        const index = [];\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            const question = item.querySelector('.faq-question h3').textContent;\r\n            const answer = item.querySelector('.faq-answer').textContent;\r\n            const category = item.closest('.faq-section').dataset.category;\r\n            \r\n            index.push({\r\n                element: item,\r\n                question: question.toLowerCase(),\r\n                answer: answer.toLowerCase(),\r\n                category: category,\r\n                searchText: (question + ' ' + answer).toLowerCase()\r\n            });\r\n        });\r\n        return index;\r\n    }\r\n\r\n    handleSearch(query) {\r\n        this.searchQuery = query.toLowerCase().trim();\r\n        \r\n        // Show/hide clear button\r\n        const clearBtn = document.getElementById('search-clear');\r\n        if (clearBtn) {\r\n            clearBtn.style.display = this.searchQuery ? 'block' : 'none';\r\n        }\r\n\r\n        this.performSearch();\r\n    }\r\n\r\n    performSearch() {\r\n        if (!this.searchQuery) {\r\n            this.showAllItems();\r\n            this.hideNoResults();\r\n            return;\r\n        }\r\n\r\n        let hasResults = false;\r\n        const matchedItems = [];\r\n\r\n        this.searchIndex.forEach(item => {\r\n            const isMatch = item.searchText.includes(this.searchQuery);\r\n            const categoryMatch = this.currentCategory === 'all' || item.category === this.currentCategory;\r\n            \r\n            if (isMatch && categoryMatch) {\r\n                matchedItems.push(item);\r\n                hasResults = true;\r\n            }\r\n        });\r\n\r\n        // Hide all items first\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            item.style.display = 'none';\r\n        });\r\n\r\n        // Show matched items with highlighting\r\n        matchedItems.forEach(item => {\r\n            item.element.style.display = 'block';\r\n            this.highlightSearchTerms(item.element);\r\n        });\r\n\r\n        // Show/hide sections based on visible items\r\n        this.updateSectionVisibility();\r\n        \r\n        // Show no results if needed\r\n        if (!hasResults) {\r\n            this.showNoResults();\r\n        } else {\r\n            this.hideNoResults();\r\n        }\r\n    }\r\n\r\n    highlightSearchTerms(element) {\r\n        if (!this.searchQuery) return;\r\n\r\n        const question = element.querySelector('.faq-question h3');\r\n        const answer = element.querySelector('.faq-answer');\r\n\r\n        [question, answer].forEach(container => {\r\n            if (!container) return;\r\n            \r\n            const walker = document.createTreeWalker(\r\n                container,\r\n                NodeFilter.SHOW_TEXT,\r\n                null,\r\n                false\r\n            );\r\n\r\n            const textNodes = [];\r\n            let node;\r\n            while (node = walker.nextNode()) {\r\n                textNodes.push(node);\r\n            }\r\n\r\n            textNodes.forEach(textNode => {\r\n                const text = textNode.textContent;\r\n                const regex = new RegExp(`(${this.escapeRegex(this.searchQuery)})`, 'gi');\r\n                \r\n                if (regex.test(text)) {\r\n                    const highlightedText = text.replace(regex, '<span class=\"search-highlight\">$1</span>');\r\n                    const wrapper = document.createElement('span');\r\n                    wrapper.innerHTML = highlightedText;\r\n                    textNode.parentNode.replaceChild(wrapper, textNode);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    escapeRegex(string) {\r\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    }\r\n\r\n    clearSearch() {\r\n        const searchInput = document.getElementById('faq-search-input');\r\n        if (searchInput) {\r\n            searchInput.value = '';\r\n            this.searchQuery = '';\r\n        }\r\n\r\n        const clearBtn = document.getElementById('search-clear');\r\n        if (clearBtn) {\r\n            clearBtn.style.display = 'none';\r\n        }\r\n\r\n        this.removeHighlights();\r\n        this.showAllItems();\r\n        this.hideNoResults();\r\n    }\r\n\r\n    removeHighlights() {\r\n        document.querySelectorAll('.search-highlight').forEach(highlight => {\r\n            const parent = highlight.parentNode;\r\n            parent.replaceChild(document.createTextNode(highlight.textContent), highlight);\r\n            parent.normalize();\r\n        });\r\n    }\r\n\r\n    // Category Management\r\n    initCategories() {\r\n        this.updateCategoryButtons();\r\n    }\r\n\r\n    filterByCategory(category) {\r\n        this.currentCategory = category;\r\n        this.updateCategoryButtons();\r\n        \r\n        if (this.searchQuery) {\r\n            this.performSearch();\r\n        } else {\r\n            this.showItemsByCategory();\r\n        }\r\n    }\r\n\r\n    updateCategoryButtons() {\r\n        document.querySelectorAll('.category-btn').forEach(btn => {\r\n            btn.classList.remove('active');\r\n            if (btn.dataset.category === this.currentCategory) {\r\n                btn.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    showItemsByCategory() {\r\n        document.querySelectorAll('.faq-section').forEach(section => {\r\n            const sectionCategory = section.dataset.category;\r\n            const shouldShow = this.currentCategory === 'all' || sectionCategory === this.currentCategory;\r\n            section.classList.toggle('hidden', !shouldShow);\r\n        });\r\n\r\n        this.updateSectionVisibility();\r\n        this.hideNoResults();\r\n    }\r\n\r\n    showAllItems() {\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            item.style.display = 'block';\r\n        });\r\n        \r\n        document.querySelectorAll('.faq-section').forEach(section => {\r\n            const sectionCategory = section.dataset.category;\r\n            const shouldShow = this.currentCategory === 'all' || sectionCategory === this.currentCategory;\r\n            section.classList.toggle('hidden', !shouldShow);\r\n        });\r\n    }\r\n\r\n    updateSectionVisibility() {\r\n        document.querySelectorAll('.faq-section').forEach(section => {\r\n            const visibleItems = section.querySelectorAll('.faq-item[style*=\"block\"], .faq-item:not([style*=\"none\"])');\r\n            const hasVisibleItems = visibleItems.length > 0;\r\n            const categoryMatch = this.currentCategory === 'all' || section.dataset.category === this.currentCategory;\r\n            \r\n            section.classList.toggle('hidden', !hasVisibleItems || !categoryMatch);\r\n        });\r\n    }\r\n\r\n    // FAQ Item Management\r\n    initFAQItems() {\r\n        // Close all items initially\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n    }\r\n\r\n    toggleFAQItem(faqItem) {\r\n        const isActive = faqItem.classList.contains('active');\r\n        \r\n        // Optional: Close other items (accordion behavior)\r\n        // document.querySelectorAll('.faq-item').forEach(item => {\r\n        //     if (item !== faqItem) {\r\n        //         item.classList.remove('active');\r\n        //     }\r\n        // });\r\n        \r\n        faqItem.classList.toggle('active', !isActive);\r\n        \r\n        // Update URL hash for direct linking\r\n        if (!isActive) {\r\n            const questionText = faqItem.querySelector('.faq-question h3').textContent;\r\n            const hash = this.createHashFromText(questionText);\r\n            history.replaceState(null, null, `#${hash}`);\r\n        } else {\r\n            history.replaceState(null, null, window.location.pathname);\r\n        }\r\n\r\n        // Analytics tracking (if needed)\r\n        this.trackFAQInteraction(faqItem, !isActive);\r\n    }\r\n\r\n    createHashFromText(text) {\r\n        return text.toLowerCase()\r\n                  .replace(/[^\\w\\s-]/g, '')\r\n                  .replace(/\\s+/g, '-')\r\n                  .substring(0, 50);\r\n    }\r\n\r\n    // URL Hash Handling\r\n    handleHashChange() {\r\n        const hash = window.location.hash.substring(1);\r\n        if (!hash) return;\r\n\r\n        // Find FAQ item by hash\r\n        const faqItem = this.findFAQItemByHash(hash);\r\n        if (faqItem) {\r\n            // Open the item\r\n            faqItem.classList.add('active');\r\n            \r\n            // Scroll to it\r\n            setTimeout(() => {\r\n                faqItem.scrollIntoView({ \r\n                    behavior: 'smooth', \r\n                    block: 'center' \r\n                });\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    findFAQItemByHash(hash) {\r\n        const faqItems = document.querySelectorAll('.faq-item');\r\n        for (const item of faqItems) {\r\n            const questionText = item.querySelector('.faq-question h3').textContent;\r\n            const itemHash = this.createHashFromText(questionText);\r\n            if (itemHash === hash) {\r\n                return item;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // No Results Management\r\n    showNoResults() {\r\n        const noResults = document.getElementById('no-results');\r\n        if (noResults) {\r\n            noResults.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    hideNoResults() {\r\n        const noResults = document.getElementById('no-results');\r\n        if (noResults) {\r\n            noResults.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // Keyboard Shortcuts Modal\r\n    toggleKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.toggle('visible');\r\n        }\r\n    }\r\n\r\n    hideKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.remove('visible');\r\n        }\r\n    }\r\n\r\n    // Analytics and Tracking\r\n    trackFAQInteraction(faqItem, opened) {\r\n        const questionText = faqItem.querySelector('.faq-question h3').textContent;\r\n        const category = faqItem.closest('.faq-section').dataset.category;\r\n        \r\n        // Example analytics call (replace with your analytics service)\r\n        if (typeof gtag !== 'undefined') {\r\n            gtag('event', opened ? 'faq_open' : 'faq_close', {\r\n                'event_category': 'FAQ',\r\n                'event_label': questionText,\r\n                'custom_parameter_1': category\r\n            });\r\n        }\r\n        \r\n        console.log(`FAQ ${opened ? 'opened' : 'closed'}:`, questionText, `(${category})`);\r\n    }\r\n\r\n    trackSearch(query, resultsCount) {\r\n        if (typeof gtag !== 'undefined') {\r\n            gtag('event', 'search', {\r\n                'event_category': 'FAQ',\r\n                'search_term': query,\r\n                'custom_parameter_1': resultsCount\r\n            });\r\n        }\r\n        \r\n        console.log(`FAQ search: \"${query}\" (${resultsCount} results)`);\r\n    }\r\n\r\n    // Utility Methods\r\n    showToast(message, type = 'info') {\r\n        // Create toast container if it doesn't exist\r\n        let container = document.getElementById('toast-container');\r\n        if (!container) {\r\n            container = document.createElement('div');\r\n            container.id = 'toast-container';\r\n            container.className = 'toast-container';\r\n            document.body.appendChild(container);\r\n        }\r\n\r\n        const toast = document.createElement('div');\r\n        toast.className = `toast ${type}`;\r\n\r\n        const icon = type === 'success' ? 'bx-check-circle' :\r\n                    type === 'error' ? 'bx-error-circle' : 'bx-info-circle';\r\n\r\n        toast.innerHTML = `\r\n            <i class='bx ${icon}'></i>\r\n            <span>${message}</span>\r\n        `;\r\n\r\n        container.appendChild(toast);\r\n\r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (toast.parentNode) {\r\n                toast.classList.add('removing');\r\n                setTimeout(() => {\r\n                    if (toast.parentNode) {\r\n                        toast.parentNode.removeChild(toast);\r\n                    }\r\n                }, 300);\r\n            }\r\n        }, 5000);\r\n\r\n        // Remove on click\r\n        toast.addEventListener('click', () => {\r\n            toast.classList.add('removing');\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.parentNode.removeChild(toast);\r\n                }\r\n            }, 300);\r\n        });\r\n    }\r\n\r\n    // Export FAQ data (for support or analytics)\r\n    exportFAQData() {\r\n        const faqData = [];\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            const question = item.querySelector('.faq-question h3').textContent;\r\n            const answer = item.querySelector('.faq-answer').textContent;\r\n            const category = item.closest('.faq-section').dataset.category;\r\n            \r\n            faqData.push({\r\n                question,\r\n                answer,\r\n                category\r\n            });\r\n        });\r\n        \r\n        return faqData;\r\n    }\r\n\r\n    // Print functionality\r\n    printFAQ() {\r\n        // Open all FAQ items for printing\r\n        document.querySelectorAll('.faq-item').forEach(item => {\r\n            item.classList.add('active');\r\n        });\r\n        \r\n        setTimeout(() => {\r\n            window.print();\r\n        }, 100);\r\n    }\r\n}\r\n\r\n// Initialize FAQ page when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.faqPage = new FAQPage();\r\n});\r\n\r\n// Export for potential use in other scripts\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = FAQPage;\r\n}\r\n","size_bytes":17104},"static/js/onboarding.js":{"content":"class OnboardingTour {\r\n    constructor() {\r\n        this.currentStep = 0;\r\n        this.steps = [\r\n            {\r\n                target: '.header-title',\r\n                title: 'Welcome to UGC Prompt Studio! 🎬',\r\n                content: 'Create professional User-Generated Content video prompts in just 5 simple steps. Let\\'s take a quick tour!',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '.tab-btn[data-tab=\"product\"]',\r\n                title: 'Step 1: Product Analysis',\r\n                content: 'Start by uploading your product image or describing it manually. Our AI will analyze key features, colors, and materials.',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '.tab-btn[data-tab=\"actor\"]',\r\n                title: 'Step 2: Choose Your Actor',\r\n                content: 'Select from our diverse cast of creators or upload your own. Each actor is designed for specific audiences and product types.',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '.tab-btn[data-tab=\"visual\"]',\r\n                title: 'Step 3: Visual Settings',\r\n                content: 'Configure the perfect environment - location, lighting, camera work, and platform optimization.',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '.tab-btn[data-tab=\"hook\"]',\r\n                title: 'Step 4: Hook Strategy',\r\n                content: 'Create compelling opening hooks that stop the scroll. Choose from proven strategies or write your own.',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '.tab-btn[data-tab=\"generate\"]',\r\n                title: 'Step 5: Generate Prompt',\r\n                content: 'Get your professional UGC video prompt, optimized for AI video generation platforms like Runway and Pika.',\r\n                position: 'bottom'\r\n            },\r\n            {\r\n                target: '#theme-toggle',\r\n                title: 'Customize Your Experience',\r\n                content: 'Switch between dark and light themes, use keyboard shortcuts (Ctrl+?), and enjoy auto-save every 30 seconds.',\r\n                position: 'left'\r\n            },\r\n            {\r\n                target: '.navigation-container',\r\n                title: 'Ready to Create!',\r\n                content: 'You\\'re all set! Use the navigation buttons or keyboard shortcuts (Alt + arrows) to move between steps. Happy creating! 🚀',\r\n                position: 'top'\r\n            }\r\n        ];\r\n        this.isActive = false;\r\n        this.overlay = null;\r\n        this.tooltip = null;\r\n    }\r\n\r\n    start() {\r\n        if (this.isActive) return;\r\n        \r\n        this.isActive = true;\r\n        this.currentStep = 0;\r\n        this.createOverlay();\r\n        this.showStep(0);\r\n        \r\n        // Track onboarding start\r\n        this.trackEvent('onboarding_started');\r\n    }\r\n\r\n    createOverlay() {\r\n        // Create overlay\r\n        this.overlay = document.createElement('div');\r\n        this.overlay.className = 'onboarding-overlay';\r\n        this.overlay.innerHTML = `\r\n            <div class=\"onboarding-backdrop\"></div>\r\n        `;\r\n        \r\n        // Create tooltip\r\n        this.tooltip = document.createElement('div');\r\n        this.tooltip.className = 'onboarding-tooltip';\r\n        \r\n        document.body.appendChild(this.overlay);\r\n        document.body.appendChild(this.tooltip);\r\n        \r\n        // Prevent body scroll\r\n        document.body.style.overflow = 'hidden';\r\n        \r\n        // Bind events\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        // Keyboard navigation\r\n        document.addEventListener('keydown', this.handleKeydown.bind(this));\r\n        \r\n        // Click outside to close\r\n        this.overlay.addEventListener('click', (e) => {\r\n            if (e.target === this.overlay || e.target.classList.contains('onboarding-backdrop')) {\r\n                this.skip();\r\n            }\r\n        });\r\n    }\r\n\r\n    handleKeydown(e) {\r\n        if (!this.isActive) return;\r\n        \r\n        switch (e.key) {\r\n            case 'Escape':\r\n                this.skip();\r\n                break;\r\n            case 'ArrowRight':\r\n            case ' ':\r\n                e.preventDefault();\r\n                this.next();\r\n                break;\r\n            case 'ArrowLeft':\r\n                e.preventDefault();\r\n                this.previous();\r\n                break;\r\n        }\r\n    }\r\n\r\n    showStep(stepIndex) {\r\n        if (stepIndex < 0 || stepIndex >= this.steps.length) return;\r\n        \r\n        this.currentStep = stepIndex;\r\n        const step = this.steps[stepIndex];\r\n        \r\n        // Find target element\r\n        const target = document.querySelector(step.target);\r\n        if (!target) {\r\n            console.warn(`Onboarding target not found: ${step.target}`);\r\n            this.next();\r\n            return;\r\n        }\r\n        \r\n        // Highlight target\r\n        this.highlightElement(target);\r\n        \r\n        // Position and show tooltip\r\n        this.showTooltip(target, step);\r\n        \r\n        // Track step view\r\n        this.trackEvent('onboarding_step_viewed', { step: stepIndex + 1 });\r\n    }\r\n\r\n    highlightElement(element) {\r\n        // Remove previous highlights\r\n        document.querySelectorAll('.onboarding-highlight').forEach(el => {\r\n            el.classList.remove('onboarding-highlight');\r\n        });\r\n        \r\n        // Add highlight to current element\r\n        element.classList.add('onboarding-highlight');\r\n        \r\n        // Scroll element into view\r\n        element.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'center',\r\n            inline: 'center'\r\n        });\r\n        \r\n        // Create spotlight effect\r\n        this.createSpotlight(element);\r\n    }\r\n\r\n    createSpotlight(element) {\r\n        const rect = element.getBoundingClientRect();\r\n        const spotlight = document.createElement('div');\r\n        spotlight.className = 'onboarding-spotlight';\r\n        \r\n        // Position spotlight\r\n        spotlight.style.left = `${rect.left - 10}px`;\r\n        spotlight.style.top = `${rect.top - 10}px`;\r\n        spotlight.style.width = `${rect.width + 20}px`;\r\n        spotlight.style.height = `${rect.height + 20}px`;\r\n        \r\n        // Remove previous spotlight\r\n        const existingSpotlight = document.querySelector('.onboarding-spotlight');\r\n        if (existingSpotlight) {\r\n            existingSpotlight.remove();\r\n        }\r\n        \r\n        document.body.appendChild(spotlight);\r\n    }\r\n\r\n    showTooltip(target, step) {\r\n        const rect = target.getBoundingClientRect();\r\n        const isFirstStep = this.currentStep === 0;\r\n        const isLastStep = this.currentStep === this.steps.length - 1;\r\n        \r\n        this.tooltip.innerHTML = `\r\n            <div class=\"tooltip-content\">\r\n                <div class=\"tooltip-header\">\r\n                    <h3>${step.title}</h3>\r\n                    <button class=\"tooltip-close\" onclick=\"window.onboardingTour.skip()\">\r\n                        <i class='bx bx-x'></i>\r\n                    </button>\r\n                </div>\r\n                <div class=\"tooltip-body\">\r\n                    <p>${step.content}</p>\r\n                </div>\r\n                <div class=\"tooltip-footer\">\r\n                    <div class=\"step-indicator\">\r\n                        ${this.currentStep + 1} of ${this.steps.length}\r\n                    </div>\r\n                    <div class=\"tooltip-actions\">\r\n                        ${!isFirstStep ? `\r\n                            <button class=\"btn btn-secondary btn-sm\" onclick=\"window.onboardingTour.previous()\">\r\n                                <i class='bx bx-chevron-left'></i>\r\n                                Previous\r\n                            </button>\r\n                        ` : ''}\r\n                        ${!isLastStep ? `\r\n                            <button class=\"btn btn-primary btn-sm\" onclick=\"window.onboardingTour.next()\">\r\n                                Next\r\n                                <i class='bx bx-chevron-right'></i>\r\n                            </button>\r\n                        ` : `\r\n                            <button class=\"btn btn-primary btn-sm\" onclick=\"window.onboardingTour.finish()\">\r\n                                <i class='bx bx-check'></i>\r\n                                Get Started\r\n                            </button>\r\n                        `}\r\n                    </div>\r\n                </div>\r\n                <div class=\"tooltip-progress\">\r\n                    <div class=\"progress-bar\" style=\"width: ${((this.currentStep + 1) / this.steps.length) * 100}%\"></div>\r\n                </div>\r\n            </div>\r\n            <div class=\"tooltip-arrow\"></div>\r\n        `;\r\n        \r\n        // Position tooltip\r\n        this.positionTooltip(target, step.position);\r\n        \r\n        // Show tooltip with animation\r\n        this.tooltip.classList.add('visible');\r\n    }\r\n\r\n    positionTooltip(target, position = 'bottom') {\r\n        const rect = target.getBoundingClientRect();\r\n        const tooltipRect = this.tooltip.getBoundingClientRect();\r\n        const viewport = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n        \r\n        let left, top;\r\n        \r\n        switch (position) {\r\n            case 'top':\r\n                left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\r\n                top = rect.top - tooltipRect.height - 15;\r\n                break;\r\n            case 'bottom':\r\n                left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\r\n                top = rect.bottom + 15;\r\n                break;\r\n            case 'left':\r\n                left = rect.left - tooltipRect.width - 15;\r\n                top = rect.top + (rect.height / 2) - (tooltipRect.height / 2);\r\n                break;\r\n            case 'right':\r\n                left = rect.right + 15;\r\n                top = rect.top + (rect.height / 2) - (tooltipRect.height / 2);\r\n                break;\r\n        }\r\n        \r\n        // Adjust for viewport boundaries\r\n        if (left < 10) left = 10;\r\n        if (left + tooltipRect.width > viewport.width - 10) {\r\n            left = viewport.width - tooltipRect.width - 10;\r\n        }\r\n        if (top < 10) top = 10;\r\n        if (top + tooltipRect.height > viewport.height - 10) {\r\n            top = viewport.height - tooltipRect.height - 10;\r\n        }\r\n        \r\n        this.tooltip.style.left = `${left}px`;\r\n        this.tooltip.style.top = `${top}px`;\r\n        this.tooltip.setAttribute('data-position', position);\r\n    }\r\n\r\n    next() {\r\n        if (this.currentStep < this.steps.length - 1) {\r\n            this.showStep(this.currentStep + 1);\r\n        } else {\r\n            this.finish();\r\n        }\r\n    }\r\n\r\n    previous() {\r\n        if (this.currentStep > 0) {\r\n            this.showStep(this.currentStep - 1);\r\n        }\r\n    }\r\n\r\n    skip() {\r\n        this.trackEvent('onboarding_skipped', { step: this.currentStep + 1 });\r\n        this.end();\r\n    }\r\n\r\n    finish() {\r\n        this.trackEvent('onboarding_completed');\r\n        this.end();\r\n        \r\n        // Show completion message\r\n        if (window.app && window.app.showToast) {\r\n            window.app.showToast('Welcome to UGC Prompt Studio! Ready to create amazing content? 🎉', 'success');\r\n        }\r\n    }\r\n\r\n    end() {\r\n        this.isActive = false;\r\n        \r\n        // Remove elements\r\n        if (this.overlay) {\r\n            this.overlay.remove();\r\n            this.overlay = null;\r\n        }\r\n        \r\n        if (this.tooltip) {\r\n            this.tooltip.remove();\r\n            this.tooltip = null;\r\n        }\r\n        \r\n        // Remove highlights and spotlights\r\n        document.querySelectorAll('.onboarding-highlight').forEach(el => {\r\n            el.classList.remove('onboarding-highlight');\r\n        });\r\n        \r\n        document.querySelectorAll('.onboarding-spotlight').forEach(el => {\r\n            el.remove();\r\n        });\r\n        \r\n        // Restore body scroll\r\n        document.body.style.overflow = '';\r\n        \r\n        // Remove event listeners\r\n        document.removeEventListener('keydown', this.handleKeydown);\r\n        \r\n        // Mark onboarding as completed\r\n        localStorage.setItem('ugc_studio_onboarding_completed', 'true');\r\n    }\r\n\r\n    // Static methods for easy access\r\n    static shouldShowOnboarding() {\r\n        return !localStorage.getItem('ugc_studio_onboarding_completed');\r\n    }\r\n\r\n    static resetOnboarding() {\r\n        localStorage.removeItem('ugc_studio_onboarding_completed');\r\n    }\r\n\r\n    // Analytics tracking\r\n    trackEvent(eventName, properties = {}) {\r\n        // Example analytics call (replace with your analytics service)\r\n        if (typeof gtag !== 'undefined') {\r\n            gtag('event', eventName, {\r\n                'event_category': 'Onboarding',\r\n                ...properties\r\n            });\r\n        }\r\n        \r\n        console.log(`Onboarding event: ${eventName}`, properties);\r\n    }\r\n\r\n    // Auto-start onboarding for new users\r\n    static autoStart(delay = 1000) {\r\n        if (OnboardingTour.shouldShowOnboarding()) {\r\n            setTimeout(() => {\r\n                if (!window.onboardingTour) {\r\n                    window.onboardingTour = new OnboardingTour();\r\n                }\r\n                window.onboardingTour.start();\r\n            }, delay);\r\n        }\r\n    }\r\n}\r\n\r\n// CSS for onboarding (inject into page)\r\nconst onboardingCSS = `\r\n.onboarding-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 10000;\r\n    pointer-events: none;\r\n}\r\n\r\n.onboarding-backdrop {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.3);\r\n    backdrop-filter: blur(1px);\r\n    pointer-events: all;\r\n}\r\n\r\n.onboarding-spotlight {\r\n    position: fixed;\r\n    background: transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.4);\r\n    z-index: 10001;\r\n    pointer-events: none;\r\n    transition: all 0.3s ease;\r\n    border: 2px solid var(--primary-400);\r\n}\r\n\r\n.onboarding-highlight {\r\n    position: relative;\r\n    z-index: 10002 !important;\r\n    pointer-events: all !important;\r\n}\r\n\r\n.onboarding-tooltip {\r\n    position: fixed;\r\n    z-index: 10003;\r\n    max-width: 400px;\r\n    background: var(--bg-elevated);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-xl);\r\n    box-shadow: var(--shadow-xl);\r\n    opacity: 0;\r\n    transform: scale(0.9);\r\n    transition: all 0.3s ease;\r\n    pointer-events: all;\r\n}\r\n\r\n.onboarding-tooltip.visible {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n}\r\n\r\n.tooltip-content {\r\n    padding: 0;\r\n    overflow: hidden;\r\n    border-radius: var(--radius-xl);\r\n}\r\n\r\n.tooltip-header {\r\n    padding: var(--space-5) var(--space-6) var(--space-3);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    background: var(--gradient-primary);\r\n    color: white;\r\n}\r\n\r\n.tooltip-header h3 {\r\n    margin: 0;\r\n    font-size: 1.125rem;\r\n    font-weight: 600;\r\n}\r\n\r\n.tooltip-close {\r\n    background: none;\r\n    border: none;\r\n    color: white;\r\n    cursor: pointer;\r\n    padding: var(--space-1);\r\n    border-radius: 50%;\r\n    transition: background-color 0.2s ease;\r\n}\r\n\r\n.tooltip-close:hover {\r\n    background: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.tooltip-body {\r\n    padding: var(--space-4) var(--space-6);\r\n}\r\n\r\n.tooltip-body p {\r\n    margin: 0;\r\n    color: var(--text-secondary);\r\n    line-height: 1.5;\r\n}\r\n\r\n.tooltip-footer {\r\n    padding: var(--space-4) var(--space-6);\r\n    background: var(--bg-secondary);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.step-indicator {\r\n    font-size: 0.875rem;\r\n    color: var(--text-tertiary);\r\n    font-weight: 500;\r\n}\r\n\r\n.tooltip-actions {\r\n    display: flex;\r\n    gap: var(--space-3);\r\n}\r\n\r\n.tooltip-progress {\r\n    height: 3px;\r\n    background: var(--bg-tertiary);\r\n    position: relative;\r\n}\r\n\r\n.progress-bar {\r\n    height: 100%;\r\n    background: var(--gradient-primary);\r\n    transition: width 0.3s ease;\r\n}\r\n\r\n.tooltip-arrow {\r\n    position: absolute;\r\n    width: 12px;\r\n    height: 12px;\r\n    background: var(--bg-elevated);\r\n    border: 1px solid var(--border-primary);\r\n    transform: rotate(45deg);\r\n}\r\n\r\n.onboarding-tooltip[data-position=\"bottom\"] .tooltip-arrow {\r\n    top: -7px;\r\n    left: 50%;\r\n    margin-left: -6px;\r\n    border-bottom: none;\r\n    border-right: none;\r\n}\r\n\r\n.onboarding-tooltip[data-position=\"top\"] .tooltip-arrow {\r\n    bottom: -7px;\r\n    left: 50%;\r\n    margin-left: -6px;\r\n    border-top: none;\r\n    border-left: none;\r\n}\r\n\r\n.onboarding-tooltip[data-position=\"left\"] .tooltip-arrow {\r\n    right: -7px;\r\n    top: 50%;\r\n    margin-top: -6px;\r\n    border-left: none;\r\n    border-bottom: none;\r\n}\r\n\r\n.onboarding-tooltip[data-position=\"right\"] .tooltip-arrow {\r\n    left: -7px;\r\n    top: 50%;\r\n    margin-top: -6px;\r\n    border-right: none;\r\n    border-top: none;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n    .onboarding-tooltip {\r\n        max-width: calc(100vw - 40px);\r\n        left: 20px !important;\r\n        right: 20px !important;\r\n        width: auto !important;\r\n    }\r\n    \r\n    .tooltip-footer {\r\n        flex-direction: column;\r\n        gap: var(--space-3);\r\n        align-items: stretch;\r\n    }\r\n    \r\n    .tooltip-actions {\r\n        justify-content: center;\r\n    }\r\n}\r\n`;\r\n\r\n// Inject CSS\r\nconst styleSheet = document.createElement('style');\r\nstyleSheet.textContent = onboardingCSS;\r\ndocument.head.appendChild(styleSheet);\r\n\r\n// Export for use\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = OnboardingTour;\r\n}\r\n\r\n// Make available globally\r\nwindow.OnboardingTour = OnboardingTour;\r\n","size_bytes":17937},"static/js/tutorial.js":{"content":"class TutorialPage {\r\n    constructor() {\r\n        this.currentSection = 'getting-started';\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.bindEvents();\r\n        this.setTheme(localStorage.getItem('theme') || 'dark');\r\n        this.updateNavigation();\r\n        this.initScrollSpy();\r\n    }\r\n\r\n    bindEvents() {\r\n        // Theme toggle\r\n        document.getElementById('theme-toggle')?.addEventListener('click', () => this.toggleTheme());\r\n\r\n        // Navigation links\r\n        document.querySelectorAll('.nav-link').forEach(link => {\r\n            link.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const section = link.getAttribute('href').substring(1);\r\n                this.showSection(section);\r\n                this.scrollToSection(section);\r\n            });\r\n        });\r\n\r\n        // Keyboard shortcuts\r\n        document.addEventListener('keydown', (e) => {\r\n            // Ctrl/Cmd + ? for help\r\n            if ((e.ctrlKey || e.metaKey) && e.key === '?') {\r\n                e.preventDefault();\r\n                this.toggleKeyboardShortcuts();\r\n            }\r\n            \r\n            // Escape to close modals\r\n            if (e.key === 'Escape') {\r\n                this.hideKeyboardShortcuts();\r\n            }\r\n            \r\n            // Home/End for navigation\r\n            if (e.key === 'Home') {\r\n                e.preventDefault();\r\n                window.scrollTo({ top: 0, behavior: 'smooth' });\r\n            }\r\n            \r\n            if (e.key === 'End') {\r\n                e.preventDefault();\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\r\n            }\r\n        });\r\n\r\n        // Smooth scroll for anchor links\r\n        document.querySelectorAll('a[href^=\"#\"]').forEach(link => {\r\n            link.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const target = document.querySelector(link.getAttribute('href'));\r\n                if (target) {\r\n                    target.scrollIntoView({ behavior: 'smooth' });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Theme Management\r\n    toggleTheme() {\r\n        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';\r\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\r\n        this.setTheme(newTheme);\r\n    }\r\n\r\n    setTheme(theme) {\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n        localStorage.setItem('theme', theme);\r\n\r\n        const themeIcon = document.querySelector('#theme-toggle i');\r\n        if (themeIcon) {\r\n            themeIcon.className = theme === 'dark' ? 'bx bx-sun' : 'bx bx-moon';\r\n        }\r\n    }\r\n\r\n    // Section Management\r\n    showSection(sectionId) {\r\n        // Hide all sections\r\n        document.querySelectorAll('.tutorial-section').forEach(section => {\r\n            section.classList.remove('active');\r\n        });\r\n\r\n        // Show target section\r\n        const targetSection = document.getElementById(sectionId);\r\n        if (targetSection) {\r\n            targetSection.classList.add('active');\r\n            this.currentSection = sectionId;\r\n            this.updateNavigation();\r\n        }\r\n    }\r\n\r\n    updateNavigation() {\r\n        // Update active nav link\r\n        document.querySelectorAll('.nav-link').forEach(link => {\r\n            link.classList.remove('active');\r\n        });\r\n\r\n        const activeLink = document.querySelector(`[href=\"#${this.currentSection}\"]`);\r\n        if (activeLink) {\r\n            activeLink.classList.add('active');\r\n        }\r\n    }\r\n\r\n    scrollToSection(sectionId) {\r\n        const section = document.getElementById(sectionId);\r\n        if (section) {\r\n            const headerHeight = document.querySelector('.tutorial-header').offsetHeight;\r\n            const targetPosition = section.offsetTop - headerHeight - 20;\r\n            \r\n            window.scrollTo({\r\n                top: targetPosition,\r\n                behavior: 'smooth'\r\n            });\r\n        }\r\n    }\r\n\r\n    // Scroll Spy\r\n    initScrollSpy() {\r\n        const sections = document.querySelectorAll('.tutorial-section');\r\n        const navLinks = document.querySelectorAll('.nav-link');\r\n        \r\n        const observerOptions = {\r\n            root: null,\r\n            rootMargin: '-20% 0px -70% 0px',\r\n            threshold: 0\r\n        };\r\n\r\n        const observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    const sectionId = entry.target.id;\r\n                    this.currentSection = sectionId;\r\n                    this.updateNavigation();\r\n                }\r\n            });\r\n        }, observerOptions);\r\n\r\n        sections.forEach(section => {\r\n            observer.observe(section);\r\n        });\r\n    }\r\n\r\n    // Keyboard Shortcuts Modal\r\n    toggleKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.toggle('visible');\r\n        }\r\n    }\r\n\r\n    hideKeyboardShortcuts() {\r\n        const modal = document.getElementById('keyboard-shortcuts');\r\n        if (modal) {\r\n            modal.classList.remove('visible');\r\n        }\r\n    }\r\n\r\n    // Utility Methods\r\n    showToast(message, type = 'info') {\r\n        // Create toast container if it doesn't exist\r\n        let container = document.getElementById('toast-container');\r\n        if (!container) {\r\n            container = document.createElement('div');\r\n            container.id = 'toast-container';\r\n            container.className = 'toast-container';\r\n            document.body.appendChild(container);\r\n        }\r\n\r\n        const toast = document.createElement('div');\r\n        toast.className = `toast ${type}`;\r\n\r\n        const icon = type === 'success' ? 'bx-check-circle' :\r\n                    type === 'error' ? 'bx-error-circle' : 'bx-info-circle';\r\n\r\n        toast.innerHTML = `\r\n            <i class='bx ${icon}'></i>\r\n            <span>${message}</span>\r\n        `;\r\n\r\n        container.appendChild(toast);\r\n\r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (toast.parentNode) {\r\n                toast.classList.add('removing');\r\n                setTimeout(() => {\r\n                    if (toast.parentNode) {\r\n                        toast.parentNode.removeChild(toast);\r\n                    }\r\n                }, 300);\r\n            }\r\n        }, 5000);\r\n\r\n        // Remove on click\r\n        toast.addEventListener('click', () => {\r\n            toast.classList.add('removing');\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.parentNode.removeChild(toast);\r\n                }\r\n            }, 300);\r\n        });\r\n    }\r\n\r\n    // Search functionality (if needed)\r\n    initSearch() {\r\n        const searchInput = document.getElementById('tutorial-search');\r\n        if (!searchInput) return;\r\n\r\n        searchInput.addEventListener('input', (e) => {\r\n            const query = e.target.value.toLowerCase().trim();\r\n            this.performSearch(query);\r\n        });\r\n    }\r\n\r\n    performSearch(query) {\r\n        const sections = document.querySelectorAll('.tutorial-section');\r\n        const cards = document.querySelectorAll('.tutorial-card');\r\n        \r\n        if (!query) {\r\n            // Show all content\r\n            sections.forEach(section => section.style.display = 'block');\r\n            cards.forEach(card => card.style.display = 'block');\r\n            return;\r\n        }\r\n\r\n        let hasResults = false;\r\n\r\n        cards.forEach(card => {\r\n            const text = card.textContent.toLowerCase();\r\n            const isMatch = text.includes(query);\r\n            \r\n            card.style.display = isMatch ? 'block' : 'none';\r\n            if (isMatch) hasResults = true;\r\n        });\r\n\r\n        // Show/hide sections based on whether they have visible cards\r\n        sections.forEach(section => {\r\n            const visibleCards = section.querySelectorAll('.tutorial-card[style*=\"block\"], .tutorial-card:not([style*=\"none\"])');\r\n            section.style.display = visibleCards.length > 0 ? 'block' : 'none';\r\n        });\r\n\r\n        // Show no results message if needed\r\n        this.toggleNoResults(!hasResults);\r\n    }\r\n\r\n    toggleNoResults(show) {\r\n        let noResults = document.getElementById('no-results');\r\n        \r\n        if (show && !noResults) {\r\n            noResults = document.createElement('div');\r\n            noResults.id = 'no-results';\r\n            noResults.className = 'no-results';\r\n            noResults.innerHTML = `\r\n                <div class=\"no-results-content\">\r\n                    <i class='bx bx-search-alt-2'></i>\r\n                    <h3>No results found</h3>\r\n                    <p>Try different keywords or browse our sections above.</p>\r\n                </div>\r\n            `;\r\n            document.querySelector('.tutorial-content').appendChild(noResults);\r\n        } else if (!show && noResults) {\r\n            noResults.remove();\r\n        }\r\n    }\r\n\r\n    // Progress tracking\r\n    trackProgress() {\r\n        const sections = document.querySelectorAll('.tutorial-section');\r\n        const completedSections = new Set();\r\n        \r\n        // Mark sections as read when user spends time on them\r\n        sections.forEach(section => {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        setTimeout(() => {\r\n                            if (entry.isIntersecting) {\r\n                                completedSections.add(section.id);\r\n                                this.updateProgressIndicator();\r\n                            }\r\n                        }, 3000); // Mark as read after 3 seconds\r\n                    }\r\n                });\r\n            }, { threshold: 0.5 });\r\n            \r\n            observer.observe(section);\r\n        });\r\n    }\r\n\r\n    updateProgressIndicator() {\r\n        // Could add a progress bar or completion indicator\r\n        const totalSections = document.querySelectorAll('.tutorial-section').length;\r\n        const completedSections = document.querySelectorAll('.nav-link.completed').length;\r\n        const progress = (completedSections / totalSections) * 100;\r\n        \r\n        // Update progress indicator if it exists\r\n        const progressBar = document.getElementById('tutorial-progress');\r\n        if (progressBar) {\r\n            progressBar.style.width = `${progress}%`;\r\n        }\r\n    }\r\n\r\n    // Print functionality\r\n    initPrint() {\r\n        const printBtn = document.getElementById('print-tutorial');\r\n        if (printBtn) {\r\n            printBtn.addEventListener('click', () => {\r\n                window.print();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Copy code snippets\r\n    initCodeCopy() {\r\n        document.querySelectorAll('pre code').forEach(codeBlock => {\r\n            const copyBtn = document.createElement('button');\r\n            copyBtn.className = 'copy-code-btn';\r\n            copyBtn.innerHTML = '<i class=\"bx bx-copy\"></i>';\r\n            copyBtn.title = 'Copy code';\r\n            \r\n            copyBtn.addEventListener('click', () => {\r\n                navigator.clipboard.writeText(codeBlock.textContent).then(() => {\r\n                    copyBtn.innerHTML = '<i class=\"bx bx-check\"></i>';\r\n                    setTimeout(() => {\r\n                        copyBtn.innerHTML = '<i class=\"bx bx-copy\"></i>';\r\n                    }, 2000);\r\n                });\r\n            });\r\n            \r\n            codeBlock.parentNode.style.position = 'relative';\r\n            codeBlock.parentNode.appendChild(copyBtn);\r\n        });\r\n    }\r\n}\r\n\r\n// Initialize tutorial page when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.tutorialPage = new TutorialPage();\r\n});\r\n\r\n// Export for potential use in other scripts\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = TutorialPage;\r\n}\r\n","size_bytes":12094}},"version":1}